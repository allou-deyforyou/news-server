// Code generated by entc, DO NOT EDIT.

package store

import (
	"context"
	"errors"
	"fmt"
	"news/internal/store/newssource"
	"news/internal/store/predicate"
	"news/internal/store/schema"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeNewsSource = "NewsSource"
)

// NewsSourceMutation represents an operation that mutates the NewsSource nodes in the graph.
type NewsSourceMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	latest_post_url        *string
	latest_post_selector   **schema.NewsPostSelector
	category_post_url      *string
	category_post_selector **schema.NewsPostSelector
	article_selector       **schema.NewsArticleSelector
	language               *string
	country                *string
	status                 *bool
	name                   *string
	categories             *[]string
	url                    *string
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*NewsSource, error)
	predicates             []predicate.NewsSource
}

var _ ent.Mutation = (*NewsSourceMutation)(nil)

// newssourceOption allows management of the mutation configuration using functional options.
type newssourceOption func(*NewsSourceMutation)

// newNewsSourceMutation creates new mutation for the NewsSource entity.
func newNewsSourceMutation(c config, op Op, opts ...newssourceOption) *NewsSourceMutation {
	m := &NewsSourceMutation{
		config:        c,
		op:            op,
		typ:           TypeNewsSource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNewsSourceID sets the ID field of the mutation.
func withNewsSourceID(id int) newssourceOption {
	return func(m *NewsSourceMutation) {
		var (
			err   error
			once  sync.Once
			value *NewsSource
		)
		m.oldValue = func(ctx context.Context) (*NewsSource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NewsSource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNewsSource sets the old NewsSource of the mutation.
func withNewsSource(node *NewsSource) newssourceOption {
	return func(m *NewsSourceMutation) {
		m.oldValue = func(context.Context) (*NewsSource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NewsSourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NewsSourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("store: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NewsSourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NewsSourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NewsSource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLatestPostURL sets the "latest_post_url" field.
func (m *NewsSourceMutation) SetLatestPostURL(s string) {
	m.latest_post_url = &s
}

// LatestPostURL returns the value of the "latest_post_url" field in the mutation.
func (m *NewsSourceMutation) LatestPostURL() (r string, exists bool) {
	v := m.latest_post_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLatestPostURL returns the old "latest_post_url" field's value of the NewsSource entity.
// If the NewsSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsSourceMutation) OldLatestPostURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatestPostURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatestPostURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatestPostURL: %w", err)
	}
	return oldValue.LatestPostURL, nil
}

// ClearLatestPostURL clears the value of the "latest_post_url" field.
func (m *NewsSourceMutation) ClearLatestPostURL() {
	m.latest_post_url = nil
	m.clearedFields[newssource.FieldLatestPostURL] = struct{}{}
}

// LatestPostURLCleared returns if the "latest_post_url" field was cleared in this mutation.
func (m *NewsSourceMutation) LatestPostURLCleared() bool {
	_, ok := m.clearedFields[newssource.FieldLatestPostURL]
	return ok
}

// ResetLatestPostURL resets all changes to the "latest_post_url" field.
func (m *NewsSourceMutation) ResetLatestPostURL() {
	m.latest_post_url = nil
	delete(m.clearedFields, newssource.FieldLatestPostURL)
}

// SetLatestPostSelector sets the "latest_post_selector" field.
func (m *NewsSourceMutation) SetLatestPostSelector(sps *schema.NewsPostSelector) {
	m.latest_post_selector = &sps
}

// LatestPostSelector returns the value of the "latest_post_selector" field in the mutation.
func (m *NewsSourceMutation) LatestPostSelector() (r *schema.NewsPostSelector, exists bool) {
	v := m.latest_post_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldLatestPostSelector returns the old "latest_post_selector" field's value of the NewsSource entity.
// If the NewsSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsSourceMutation) OldLatestPostSelector(ctx context.Context) (v *schema.NewsPostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatestPostSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatestPostSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatestPostSelector: %w", err)
	}
	return oldValue.LatestPostSelector, nil
}

// ClearLatestPostSelector clears the value of the "latest_post_selector" field.
func (m *NewsSourceMutation) ClearLatestPostSelector() {
	m.latest_post_selector = nil
	m.clearedFields[newssource.FieldLatestPostSelector] = struct{}{}
}

// LatestPostSelectorCleared returns if the "latest_post_selector" field was cleared in this mutation.
func (m *NewsSourceMutation) LatestPostSelectorCleared() bool {
	_, ok := m.clearedFields[newssource.FieldLatestPostSelector]
	return ok
}

// ResetLatestPostSelector resets all changes to the "latest_post_selector" field.
func (m *NewsSourceMutation) ResetLatestPostSelector() {
	m.latest_post_selector = nil
	delete(m.clearedFields, newssource.FieldLatestPostSelector)
}

// SetCategoryPostURL sets the "category_post_url" field.
func (m *NewsSourceMutation) SetCategoryPostURL(s string) {
	m.category_post_url = &s
}

// CategoryPostURL returns the value of the "category_post_url" field in the mutation.
func (m *NewsSourceMutation) CategoryPostURL() (r string, exists bool) {
	v := m.category_post_url
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryPostURL returns the old "category_post_url" field's value of the NewsSource entity.
// If the NewsSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsSourceMutation) OldCategoryPostURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryPostURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryPostURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryPostURL: %w", err)
	}
	return oldValue.CategoryPostURL, nil
}

// ClearCategoryPostURL clears the value of the "category_post_url" field.
func (m *NewsSourceMutation) ClearCategoryPostURL() {
	m.category_post_url = nil
	m.clearedFields[newssource.FieldCategoryPostURL] = struct{}{}
}

// CategoryPostURLCleared returns if the "category_post_url" field was cleared in this mutation.
func (m *NewsSourceMutation) CategoryPostURLCleared() bool {
	_, ok := m.clearedFields[newssource.FieldCategoryPostURL]
	return ok
}

// ResetCategoryPostURL resets all changes to the "category_post_url" field.
func (m *NewsSourceMutation) ResetCategoryPostURL() {
	m.category_post_url = nil
	delete(m.clearedFields, newssource.FieldCategoryPostURL)
}

// SetCategoryPostSelector sets the "category_post_selector" field.
func (m *NewsSourceMutation) SetCategoryPostSelector(sps *schema.NewsPostSelector) {
	m.category_post_selector = &sps
}

// CategoryPostSelector returns the value of the "category_post_selector" field in the mutation.
func (m *NewsSourceMutation) CategoryPostSelector() (r *schema.NewsPostSelector, exists bool) {
	v := m.category_post_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryPostSelector returns the old "category_post_selector" field's value of the NewsSource entity.
// If the NewsSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsSourceMutation) OldCategoryPostSelector(ctx context.Context) (v *schema.NewsPostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryPostSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryPostSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryPostSelector: %w", err)
	}
	return oldValue.CategoryPostSelector, nil
}

// ClearCategoryPostSelector clears the value of the "category_post_selector" field.
func (m *NewsSourceMutation) ClearCategoryPostSelector() {
	m.category_post_selector = nil
	m.clearedFields[newssource.FieldCategoryPostSelector] = struct{}{}
}

// CategoryPostSelectorCleared returns if the "category_post_selector" field was cleared in this mutation.
func (m *NewsSourceMutation) CategoryPostSelectorCleared() bool {
	_, ok := m.clearedFields[newssource.FieldCategoryPostSelector]
	return ok
}

// ResetCategoryPostSelector resets all changes to the "category_post_selector" field.
func (m *NewsSourceMutation) ResetCategoryPostSelector() {
	m.category_post_selector = nil
	delete(m.clearedFields, newssource.FieldCategoryPostSelector)
}

// SetArticleSelector sets the "article_selector" field.
func (m *NewsSourceMutation) SetArticleSelector(sas *schema.NewsArticleSelector) {
	m.article_selector = &sas
}

// ArticleSelector returns the value of the "article_selector" field in the mutation.
func (m *NewsSourceMutation) ArticleSelector() (r *schema.NewsArticleSelector, exists bool) {
	v := m.article_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldArticleSelector returns the old "article_selector" field's value of the NewsSource entity.
// If the NewsSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsSourceMutation) OldArticleSelector(ctx context.Context) (v *schema.NewsArticleSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArticleSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArticleSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArticleSelector: %w", err)
	}
	return oldValue.ArticleSelector, nil
}

// ClearArticleSelector clears the value of the "article_selector" field.
func (m *NewsSourceMutation) ClearArticleSelector() {
	m.article_selector = nil
	m.clearedFields[newssource.FieldArticleSelector] = struct{}{}
}

// ArticleSelectorCleared returns if the "article_selector" field was cleared in this mutation.
func (m *NewsSourceMutation) ArticleSelectorCleared() bool {
	_, ok := m.clearedFields[newssource.FieldArticleSelector]
	return ok
}

// ResetArticleSelector resets all changes to the "article_selector" field.
func (m *NewsSourceMutation) ResetArticleSelector() {
	m.article_selector = nil
	delete(m.clearedFields, newssource.FieldArticleSelector)
}

// SetLanguage sets the "language" field.
func (m *NewsSourceMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *NewsSourceMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the NewsSource entity.
// If the NewsSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsSourceMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *NewsSourceMutation) ResetLanguage() {
	m.language = nil
}

// SetCountry sets the "country" field.
func (m *NewsSourceMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *NewsSourceMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the NewsSource entity.
// If the NewsSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsSourceMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *NewsSourceMutation) ResetCountry() {
	m.country = nil
}

// SetStatus sets the "status" field.
func (m *NewsSourceMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *NewsSourceMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the NewsSource entity.
// If the NewsSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsSourceMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *NewsSourceMutation) ResetStatus() {
	m.status = nil
}

// SetName sets the "name" field.
func (m *NewsSourceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *NewsSourceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the NewsSource entity.
// If the NewsSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsSourceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *NewsSourceMutation) ResetName() {
	m.name = nil
}

// SetCategories sets the "categories" field.
func (m *NewsSourceMutation) SetCategories(s []string) {
	m.categories = &s
}

// Categories returns the value of the "categories" field in the mutation.
func (m *NewsSourceMutation) Categories() (r []string, exists bool) {
	v := m.categories
	if v == nil {
		return
	}
	return *v, true
}

// OldCategories returns the old "categories" field's value of the NewsSource entity.
// If the NewsSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsSourceMutation) OldCategories(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategories is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategories requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategories: %w", err)
	}
	return oldValue.Categories, nil
}

// ResetCategories resets all changes to the "categories" field.
func (m *NewsSourceMutation) ResetCategories() {
	m.categories = nil
}

// SetURL sets the "url" field.
func (m *NewsSourceMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *NewsSourceMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the NewsSource entity.
// If the NewsSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NewsSourceMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *NewsSourceMutation) ResetURL() {
	m.url = nil
}

// Where appends a list predicates to the NewsSourceMutation builder.
func (m *NewsSourceMutation) Where(ps ...predicate.NewsSource) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NewsSourceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NewsSource).
func (m *NewsSourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NewsSourceMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.latest_post_url != nil {
		fields = append(fields, newssource.FieldLatestPostURL)
	}
	if m.latest_post_selector != nil {
		fields = append(fields, newssource.FieldLatestPostSelector)
	}
	if m.category_post_url != nil {
		fields = append(fields, newssource.FieldCategoryPostURL)
	}
	if m.category_post_selector != nil {
		fields = append(fields, newssource.FieldCategoryPostSelector)
	}
	if m.article_selector != nil {
		fields = append(fields, newssource.FieldArticleSelector)
	}
	if m.language != nil {
		fields = append(fields, newssource.FieldLanguage)
	}
	if m.country != nil {
		fields = append(fields, newssource.FieldCountry)
	}
	if m.status != nil {
		fields = append(fields, newssource.FieldStatus)
	}
	if m.name != nil {
		fields = append(fields, newssource.FieldName)
	}
	if m.categories != nil {
		fields = append(fields, newssource.FieldCategories)
	}
	if m.url != nil {
		fields = append(fields, newssource.FieldURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NewsSourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case newssource.FieldLatestPostURL:
		return m.LatestPostURL()
	case newssource.FieldLatestPostSelector:
		return m.LatestPostSelector()
	case newssource.FieldCategoryPostURL:
		return m.CategoryPostURL()
	case newssource.FieldCategoryPostSelector:
		return m.CategoryPostSelector()
	case newssource.FieldArticleSelector:
		return m.ArticleSelector()
	case newssource.FieldLanguage:
		return m.Language()
	case newssource.FieldCountry:
		return m.Country()
	case newssource.FieldStatus:
		return m.Status()
	case newssource.FieldName:
		return m.Name()
	case newssource.FieldCategories:
		return m.Categories()
	case newssource.FieldURL:
		return m.URL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NewsSourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case newssource.FieldLatestPostURL:
		return m.OldLatestPostURL(ctx)
	case newssource.FieldLatestPostSelector:
		return m.OldLatestPostSelector(ctx)
	case newssource.FieldCategoryPostURL:
		return m.OldCategoryPostURL(ctx)
	case newssource.FieldCategoryPostSelector:
		return m.OldCategoryPostSelector(ctx)
	case newssource.FieldArticleSelector:
		return m.OldArticleSelector(ctx)
	case newssource.FieldLanguage:
		return m.OldLanguage(ctx)
	case newssource.FieldCountry:
		return m.OldCountry(ctx)
	case newssource.FieldStatus:
		return m.OldStatus(ctx)
	case newssource.FieldName:
		return m.OldName(ctx)
	case newssource.FieldCategories:
		return m.OldCategories(ctx)
	case newssource.FieldURL:
		return m.OldURL(ctx)
	}
	return nil, fmt.Errorf("unknown NewsSource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NewsSourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case newssource.FieldLatestPostURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatestPostURL(v)
		return nil
	case newssource.FieldLatestPostSelector:
		v, ok := value.(*schema.NewsPostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatestPostSelector(v)
		return nil
	case newssource.FieldCategoryPostURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryPostURL(v)
		return nil
	case newssource.FieldCategoryPostSelector:
		v, ok := value.(*schema.NewsPostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryPostSelector(v)
		return nil
	case newssource.FieldArticleSelector:
		v, ok := value.(*schema.NewsArticleSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArticleSelector(v)
		return nil
	case newssource.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case newssource.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case newssource.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case newssource.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case newssource.FieldCategories:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategories(v)
		return nil
	case newssource.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	}
	return fmt.Errorf("unknown NewsSource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NewsSourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NewsSourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NewsSourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown NewsSource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NewsSourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(newssource.FieldLatestPostURL) {
		fields = append(fields, newssource.FieldLatestPostURL)
	}
	if m.FieldCleared(newssource.FieldLatestPostSelector) {
		fields = append(fields, newssource.FieldLatestPostSelector)
	}
	if m.FieldCleared(newssource.FieldCategoryPostURL) {
		fields = append(fields, newssource.FieldCategoryPostURL)
	}
	if m.FieldCleared(newssource.FieldCategoryPostSelector) {
		fields = append(fields, newssource.FieldCategoryPostSelector)
	}
	if m.FieldCleared(newssource.FieldArticleSelector) {
		fields = append(fields, newssource.FieldArticleSelector)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NewsSourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NewsSourceMutation) ClearField(name string) error {
	switch name {
	case newssource.FieldLatestPostURL:
		m.ClearLatestPostURL()
		return nil
	case newssource.FieldLatestPostSelector:
		m.ClearLatestPostSelector()
		return nil
	case newssource.FieldCategoryPostURL:
		m.ClearCategoryPostURL()
		return nil
	case newssource.FieldCategoryPostSelector:
		m.ClearCategoryPostSelector()
		return nil
	case newssource.FieldArticleSelector:
		m.ClearArticleSelector()
		return nil
	}
	return fmt.Errorf("unknown NewsSource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NewsSourceMutation) ResetField(name string) error {
	switch name {
	case newssource.FieldLatestPostURL:
		m.ResetLatestPostURL()
		return nil
	case newssource.FieldLatestPostSelector:
		m.ResetLatestPostSelector()
		return nil
	case newssource.FieldCategoryPostURL:
		m.ResetCategoryPostURL()
		return nil
	case newssource.FieldCategoryPostSelector:
		m.ResetCategoryPostSelector()
		return nil
	case newssource.FieldArticleSelector:
		m.ResetArticleSelector()
		return nil
	case newssource.FieldLanguage:
		m.ResetLanguage()
		return nil
	case newssource.FieldCountry:
		m.ResetCountry()
		return nil
	case newssource.FieldStatus:
		m.ResetStatus()
		return nil
	case newssource.FieldName:
		m.ResetName()
		return nil
	case newssource.FieldCategories:
		m.ResetCategories()
		return nil
	case newssource.FieldURL:
		m.ResetURL()
		return nil
	}
	return fmt.Errorf("unknown NewsSource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NewsSourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NewsSourceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NewsSourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NewsSourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NewsSourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NewsSourceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NewsSourceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NewsSource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NewsSourceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NewsSource edge %s", name)
}
