// Code generated by entc, DO NOT EDIT.

package store

import (
	"context"
	"errors"
	"fmt"
	"news/internal/store/newscategories"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NewsCategoriesCreate is the builder for creating a NewsCategories entity.
type NewsCategoriesCreate struct {
	config
	mutation *NewsCategoriesMutation
	hooks    []Hook
}

// SetTvCategories sets the "tv_categories" field.
func (ncc *NewsCategoriesCreate) SetTvCategories(s []string) *NewsCategoriesCreate {
	ncc.mutation.SetTvCategories(s)
	return ncc
}

// SetStatus sets the "status" field.
func (ncc *NewsCategoriesCreate) SetStatus(b bool) *NewsCategoriesCreate {
	ncc.mutation.SetStatus(b)
	return ncc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ncc *NewsCategoriesCreate) SetNillableStatus(b *bool) *NewsCategoriesCreate {
	if b != nil {
		ncc.SetStatus(*b)
	}
	return ncc
}

// SetArticleCategories sets the "article_categories" field.
func (ncc *NewsCategoriesCreate) SetArticleCategories(s []string) *NewsCategoriesCreate {
	ncc.mutation.SetArticleCategories(s)
	return ncc
}

// SetLanguage sets the "language" field.
func (ncc *NewsCategoriesCreate) SetLanguage(s string) *NewsCategoriesCreate {
	ncc.mutation.SetLanguage(s)
	return ncc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (ncc *NewsCategoriesCreate) SetNillableLanguage(s *string) *NewsCategoriesCreate {
	if s != nil {
		ncc.SetLanguage(*s)
	}
	return ncc
}

// Mutation returns the NewsCategoriesMutation object of the builder.
func (ncc *NewsCategoriesCreate) Mutation() *NewsCategoriesMutation {
	return ncc.mutation
}

// Save creates the NewsCategories in the database.
func (ncc *NewsCategoriesCreate) Save(ctx context.Context) (*NewsCategories, error) {
	var (
		err  error
		node *NewsCategories
	)
	ncc.defaults()
	if len(ncc.hooks) == 0 {
		if err = ncc.check(); err != nil {
			return nil, err
		}
		node, err = ncc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewsCategoriesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ncc.check(); err != nil {
				return nil, err
			}
			ncc.mutation = mutation
			if node, err = ncc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ncc.hooks) - 1; i >= 0; i-- {
			if ncc.hooks[i] == nil {
				return nil, fmt.Errorf("store: uninitialized hook (forgotten import store/runtime?)")
			}
			mut = ncc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ncc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ncc *NewsCategoriesCreate) SaveX(ctx context.Context) *NewsCategories {
	v, err := ncc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncc *NewsCategoriesCreate) Exec(ctx context.Context) error {
	_, err := ncc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncc *NewsCategoriesCreate) ExecX(ctx context.Context) {
	if err := ncc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncc *NewsCategoriesCreate) defaults() {
	if _, ok := ncc.mutation.Status(); !ok {
		v := newscategories.DefaultStatus
		ncc.mutation.SetStatus(v)
	}
	if _, ok := ncc.mutation.Language(); !ok {
		v := newscategories.DefaultLanguage
		ncc.mutation.SetLanguage(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ncc *NewsCategoriesCreate) check() error {
	if _, ok := ncc.mutation.TvCategories(); !ok {
		return &ValidationError{Name: "tv_categories", err: errors.New(`store: missing required field "NewsCategories.tv_categories"`)}
	}
	if _, ok := ncc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`store: missing required field "NewsCategories.status"`)}
	}
	if _, ok := ncc.mutation.ArticleCategories(); !ok {
		return &ValidationError{Name: "article_categories", err: errors.New(`store: missing required field "NewsCategories.article_categories"`)}
	}
	if _, ok := ncc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`store: missing required field "NewsCategories.language"`)}
	}
	return nil
}

func (ncc *NewsCategoriesCreate) sqlSave(ctx context.Context) (*NewsCategories, error) {
	_node, _spec := ncc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ncc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ncc *NewsCategoriesCreate) createSpec() (*NewsCategories, *sqlgraph.CreateSpec) {
	var (
		_node = &NewsCategories{config: ncc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: newscategories.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: newscategories.FieldID,
			},
		}
	)
	if value, ok := ncc.mutation.TvCategories(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newscategories.FieldTvCategories,
		})
		_node.TvCategories = value
	}
	if value, ok := ncc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: newscategories.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ncc.mutation.ArticleCategories(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newscategories.FieldArticleCategories,
		})
		_node.ArticleCategories = value
	}
	if value, ok := ncc.mutation.Language(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newscategories.FieldLanguage,
		})
		_node.Language = value
	}
	return _node, _spec
}

// NewsCategoriesCreateBulk is the builder for creating many NewsCategories entities in bulk.
type NewsCategoriesCreateBulk struct {
	config
	builders []*NewsCategoriesCreate
}

// Save creates the NewsCategories entities in the database.
func (nccb *NewsCategoriesCreateBulk) Save(ctx context.Context) ([]*NewsCategories, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nccb.builders))
	nodes := make([]*NewsCategories, len(nccb.builders))
	mutators := make([]Mutator, len(nccb.builders))
	for i := range nccb.builders {
		func(i int, root context.Context) {
			builder := nccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NewsCategoriesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nccb *NewsCategoriesCreateBulk) SaveX(ctx context.Context) []*NewsCategories {
	v, err := nccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nccb *NewsCategoriesCreateBulk) Exec(ctx context.Context) error {
	_, err := nccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nccb *NewsCategoriesCreateBulk) ExecX(ctx context.Context) {
	if err := nccb.Exec(ctx); err != nil {
		panic(err)
	}
}
