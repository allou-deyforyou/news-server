// Code generated by entc, DO NOT EDIT.

package store

import (
	"encoding/json"
	"fmt"
	"news/internal/store/newstvsource"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// NewsTvSource is the model entity for the NewsTvSource schema.
type NewsTvSource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// Video holds the value of the "video" field.
	Video string `json:"video,omitempty"`
	// Live holds the value of the "live" field.
	Live bool `json:"live,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// Categories holds the value of the "categories" field.
	Categories map[string]string `json:"categories,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NewsTvSource) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case newstvsource.FieldCategories:
			values[i] = new([]byte)
		case newstvsource.FieldLive, newstvsource.FieldStatus:
			values[i] = new(sql.NullBool)
		case newstvsource.FieldID:
			values[i] = new(sql.NullInt64)
		case newstvsource.FieldLogo, newstvsource.FieldVideo, newstvsource.FieldCountry, newstvsource.FieldDescription, newstvsource.FieldLanguage, newstvsource.FieldSource:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NewsTvSource", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NewsTvSource fields.
func (nts *NewsTvSource) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case newstvsource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nts.ID = int(value.Int64)
		case newstvsource.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				nts.Logo = value.String
			}
		case newstvsource.FieldVideo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video", values[i])
			} else if value.Valid {
				nts.Video = value.String
			}
		case newstvsource.FieldLive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field live", values[i])
			} else if value.Valid {
				nts.Live = value.Bool
			}
		case newstvsource.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				nts.Status = value.Bool
			}
		case newstvsource.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				nts.Country = value.String
			}
		case newstvsource.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				nts.Description = value.String
			}
		case newstvsource.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				nts.Language = value.String
			}
		case newstvsource.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				nts.Source = value.String
			}
		case newstvsource.FieldCategories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field categories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &nts.Categories); err != nil {
					return fmt.Errorf("unmarshal field categories: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this NewsTvSource.
// Note that you need to call NewsTvSource.Unwrap() before calling this method if this NewsTvSource
// was returned from a transaction, and the transaction was committed or rolled back.
func (nts *NewsTvSource) Update() *NewsTvSourceUpdateOne {
	return (&NewsTvSourceClient{config: nts.config}).UpdateOne(nts)
}

// Unwrap unwraps the NewsTvSource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nts *NewsTvSource) Unwrap() *NewsTvSource {
	tx, ok := nts.config.driver.(*txDriver)
	if !ok {
		panic("store: NewsTvSource is not a transactional entity")
	}
	nts.config.driver = tx.drv
	return nts
}

// String implements the fmt.Stringer.
func (nts *NewsTvSource) String() string {
	var builder strings.Builder
	builder.WriteString("NewsTvSource(")
	builder.WriteString(fmt.Sprintf("id=%v", nts.ID))
	builder.WriteString(", logo=")
	builder.WriteString(nts.Logo)
	builder.WriteString(", video=")
	builder.WriteString(nts.Video)
	builder.WriteString(", live=")
	builder.WriteString(fmt.Sprintf("%v", nts.Live))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", nts.Status))
	builder.WriteString(", country=")
	builder.WriteString(nts.Country)
	builder.WriteString(", description=")
	builder.WriteString(nts.Description)
	builder.WriteString(", language=")
	builder.WriteString(nts.Language)
	builder.WriteString(", source=")
	builder.WriteString(nts.Source)
	builder.WriteString(", categories=")
	builder.WriteString(fmt.Sprintf("%v", nts.Categories))
	builder.WriteByte(')')
	return builder.String()
}

// NewsTvSources is a parsable slice of NewsTvSource.
type NewsTvSources []*NewsTvSource

func (nts NewsTvSources) config(cfg config) {
	for _i := range nts {
		nts[_i].config = cfg
	}
}
