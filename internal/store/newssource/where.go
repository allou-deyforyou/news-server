// Code generated by entc, DO NOT EDIT.

package newssource

import (
	"news/internal/store/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// LatestPostURL applies equality check predicate on the "latest_post_url" field. It's identical to LatestPostURLEQ.
func LatestPostURL(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatestPostURL), v))
	})
}

// CategoryPostURL applies equality check predicate on the "category_post_url" field. It's identical to CategoryPostURLEQ.
func CategoryPostURL(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryPostURL), v))
	})
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v bool) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// LatestPostURLEQ applies the EQ predicate on the "latest_post_url" field.
func LatestPostURLEQ(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatestPostURL), v))
	})
}

// LatestPostURLNEQ applies the NEQ predicate on the "latest_post_url" field.
func LatestPostURLNEQ(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLatestPostURL), v))
	})
}

// LatestPostURLIn applies the In predicate on the "latest_post_url" field.
func LatestPostURLIn(vs ...string) predicate.NewsSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NewsSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLatestPostURL), v...))
	})
}

// LatestPostURLNotIn applies the NotIn predicate on the "latest_post_url" field.
func LatestPostURLNotIn(vs ...string) predicate.NewsSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NewsSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLatestPostURL), v...))
	})
}

// LatestPostURLGT applies the GT predicate on the "latest_post_url" field.
func LatestPostURLGT(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLatestPostURL), v))
	})
}

// LatestPostURLGTE applies the GTE predicate on the "latest_post_url" field.
func LatestPostURLGTE(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLatestPostURL), v))
	})
}

// LatestPostURLLT applies the LT predicate on the "latest_post_url" field.
func LatestPostURLLT(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLatestPostURL), v))
	})
}

// LatestPostURLLTE applies the LTE predicate on the "latest_post_url" field.
func LatestPostURLLTE(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLatestPostURL), v))
	})
}

// LatestPostURLContains applies the Contains predicate on the "latest_post_url" field.
func LatestPostURLContains(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLatestPostURL), v))
	})
}

// LatestPostURLHasPrefix applies the HasPrefix predicate on the "latest_post_url" field.
func LatestPostURLHasPrefix(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLatestPostURL), v))
	})
}

// LatestPostURLHasSuffix applies the HasSuffix predicate on the "latest_post_url" field.
func LatestPostURLHasSuffix(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLatestPostURL), v))
	})
}

// LatestPostURLIsNil applies the IsNil predicate on the "latest_post_url" field.
func LatestPostURLIsNil() predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLatestPostURL)))
	})
}

// LatestPostURLNotNil applies the NotNil predicate on the "latest_post_url" field.
func LatestPostURLNotNil() predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLatestPostURL)))
	})
}

// LatestPostURLEqualFold applies the EqualFold predicate on the "latest_post_url" field.
func LatestPostURLEqualFold(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLatestPostURL), v))
	})
}

// LatestPostURLContainsFold applies the ContainsFold predicate on the "latest_post_url" field.
func LatestPostURLContainsFold(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLatestPostURL), v))
	})
}

// LatestPostSelectorIsNil applies the IsNil predicate on the "latest_post_selector" field.
func LatestPostSelectorIsNil() predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLatestPostSelector)))
	})
}

// LatestPostSelectorNotNil applies the NotNil predicate on the "latest_post_selector" field.
func LatestPostSelectorNotNil() predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLatestPostSelector)))
	})
}

// CategoryPostURLEQ applies the EQ predicate on the "category_post_url" field.
func CategoryPostURLEQ(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryPostURL), v))
	})
}

// CategoryPostURLNEQ applies the NEQ predicate on the "category_post_url" field.
func CategoryPostURLNEQ(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCategoryPostURL), v))
	})
}

// CategoryPostURLIn applies the In predicate on the "category_post_url" field.
func CategoryPostURLIn(vs ...string) predicate.NewsSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NewsSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCategoryPostURL), v...))
	})
}

// CategoryPostURLNotIn applies the NotIn predicate on the "category_post_url" field.
func CategoryPostURLNotIn(vs ...string) predicate.NewsSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NewsSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCategoryPostURL), v...))
	})
}

// CategoryPostURLGT applies the GT predicate on the "category_post_url" field.
func CategoryPostURLGT(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCategoryPostURL), v))
	})
}

// CategoryPostURLGTE applies the GTE predicate on the "category_post_url" field.
func CategoryPostURLGTE(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCategoryPostURL), v))
	})
}

// CategoryPostURLLT applies the LT predicate on the "category_post_url" field.
func CategoryPostURLLT(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCategoryPostURL), v))
	})
}

// CategoryPostURLLTE applies the LTE predicate on the "category_post_url" field.
func CategoryPostURLLTE(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCategoryPostURL), v))
	})
}

// CategoryPostURLContains applies the Contains predicate on the "category_post_url" field.
func CategoryPostURLContains(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCategoryPostURL), v))
	})
}

// CategoryPostURLHasPrefix applies the HasPrefix predicate on the "category_post_url" field.
func CategoryPostURLHasPrefix(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCategoryPostURL), v))
	})
}

// CategoryPostURLHasSuffix applies the HasSuffix predicate on the "category_post_url" field.
func CategoryPostURLHasSuffix(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCategoryPostURL), v))
	})
}

// CategoryPostURLIsNil applies the IsNil predicate on the "category_post_url" field.
func CategoryPostURLIsNil() predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCategoryPostURL)))
	})
}

// CategoryPostURLNotNil applies the NotNil predicate on the "category_post_url" field.
func CategoryPostURLNotNil() predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCategoryPostURL)))
	})
}

// CategoryPostURLEqualFold applies the EqualFold predicate on the "category_post_url" field.
func CategoryPostURLEqualFold(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCategoryPostURL), v))
	})
}

// CategoryPostURLContainsFold applies the ContainsFold predicate on the "category_post_url" field.
func CategoryPostURLContainsFold(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCategoryPostURL), v))
	})
}

// CategoryPostSelectorIsNil applies the IsNil predicate on the "category_post_selector" field.
func CategoryPostSelectorIsNil() predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCategoryPostSelector)))
	})
}

// CategoryPostSelectorNotNil applies the NotNil predicate on the "category_post_selector" field.
func CategoryPostSelectorNotNil() predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCategoryPostSelector)))
	})
}

// ArticleSelectorIsNil applies the IsNil predicate on the "article_selector" field.
func ArticleSelectorIsNil() predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArticleSelector)))
	})
}

// ArticleSelectorNotNil applies the NotNil predicate on the "article_selector" field.
func ArticleSelectorNotNil() predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArticleSelector)))
	})
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLanguage), v))
	})
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.NewsSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NewsSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLanguage), v...))
	})
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.NewsSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NewsSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLanguage), v...))
	})
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLanguage), v))
	})
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLanguage), v))
	})
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLanguage), v))
	})
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLanguage), v))
	})
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLanguage), v))
	})
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLanguage), v))
	})
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLanguage), v))
	})
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLanguage), v))
	})
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLanguage), v))
	})
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountry), v))
	})
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.NewsSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NewsSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCountry), v...))
	})
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.NewsSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NewsSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCountry), v...))
	})
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountry), v))
	})
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountry), v))
	})
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountry), v))
	})
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountry), v))
	})
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCountry), v))
	})
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCountry), v))
	})
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCountry), v))
	})
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCountry), v))
	})
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCountry), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v bool) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v bool) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.NewsSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NewsSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.NewsSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NewsSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.NewsSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NewsSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.NewsSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NewsSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NewsSource) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NewsSource) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NewsSource) predicate.NewsSource {
	return predicate.NewsSource(func(s *sql.Selector) {
		p(s.Not())
	})
}
