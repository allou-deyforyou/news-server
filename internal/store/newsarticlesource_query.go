// Code generated by entc, DO NOT EDIT.

package store

import (
	"context"
	"errors"
	"fmt"
	"math"
	"news/internal/store/newsarticlesource"
	"news/internal/store/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NewsArticleSourceQuery is the builder for querying NewsArticleSource entities.
type NewsArticleSourceQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.NewsArticleSource
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NewsArticleSourceQuery builder.
func (nasq *NewsArticleSourceQuery) Where(ps ...predicate.NewsArticleSource) *NewsArticleSourceQuery {
	nasq.predicates = append(nasq.predicates, ps...)
	return nasq
}

// Limit adds a limit step to the query.
func (nasq *NewsArticleSourceQuery) Limit(limit int) *NewsArticleSourceQuery {
	nasq.limit = &limit
	return nasq
}

// Offset adds an offset step to the query.
func (nasq *NewsArticleSourceQuery) Offset(offset int) *NewsArticleSourceQuery {
	nasq.offset = &offset
	return nasq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nasq *NewsArticleSourceQuery) Unique(unique bool) *NewsArticleSourceQuery {
	nasq.unique = &unique
	return nasq
}

// Order adds an order step to the query.
func (nasq *NewsArticleSourceQuery) Order(o ...OrderFunc) *NewsArticleSourceQuery {
	nasq.order = append(nasq.order, o...)
	return nasq
}

// First returns the first NewsArticleSource entity from the query.
// Returns a *NotFoundError when no NewsArticleSource was found.
func (nasq *NewsArticleSourceQuery) First(ctx context.Context) (*NewsArticleSource, error) {
	nodes, err := nasq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{newsarticlesource.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nasq *NewsArticleSourceQuery) FirstX(ctx context.Context) *NewsArticleSource {
	node, err := nasq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NewsArticleSource ID from the query.
// Returns a *NotFoundError when no NewsArticleSource ID was found.
func (nasq *NewsArticleSourceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nasq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{newsarticlesource.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nasq *NewsArticleSourceQuery) FirstIDX(ctx context.Context) int {
	id, err := nasq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NewsArticleSource entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NewsArticleSource entity is found.
// Returns a *NotFoundError when no NewsArticleSource entities are found.
func (nasq *NewsArticleSourceQuery) Only(ctx context.Context) (*NewsArticleSource, error) {
	nodes, err := nasq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{newsarticlesource.Label}
	default:
		return nil, &NotSingularError{newsarticlesource.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nasq *NewsArticleSourceQuery) OnlyX(ctx context.Context) *NewsArticleSource {
	node, err := nasq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NewsArticleSource ID in the query.
// Returns a *NotSingularError when more than one NewsArticleSource ID is found.
// Returns a *NotFoundError when no entities are found.
func (nasq *NewsArticleSourceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nasq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{newsarticlesource.Label}
	default:
		err = &NotSingularError{newsarticlesource.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nasq *NewsArticleSourceQuery) OnlyIDX(ctx context.Context) int {
	id, err := nasq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NewsArticleSources.
func (nasq *NewsArticleSourceQuery) All(ctx context.Context) ([]*NewsArticleSource, error) {
	if err := nasq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return nasq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (nasq *NewsArticleSourceQuery) AllX(ctx context.Context) []*NewsArticleSource {
	nodes, err := nasq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NewsArticleSource IDs.
func (nasq *NewsArticleSourceQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := nasq.Select(newsarticlesource.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nasq *NewsArticleSourceQuery) IDsX(ctx context.Context) []int {
	ids, err := nasq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nasq *NewsArticleSourceQuery) Count(ctx context.Context) (int, error) {
	if err := nasq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return nasq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (nasq *NewsArticleSourceQuery) CountX(ctx context.Context) int {
	count, err := nasq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nasq *NewsArticleSourceQuery) Exist(ctx context.Context) (bool, error) {
	if err := nasq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return nasq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (nasq *NewsArticleSourceQuery) ExistX(ctx context.Context) bool {
	exist, err := nasq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NewsArticleSourceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nasq *NewsArticleSourceQuery) Clone() *NewsArticleSourceQuery {
	if nasq == nil {
		return nil
	}
	return &NewsArticleSourceQuery{
		config:     nasq.config,
		limit:      nasq.limit,
		offset:     nasq.offset,
		order:      append([]OrderFunc{}, nasq.order...),
		predicates: append([]predicate.NewsArticleSource{}, nasq.predicates...),
		// clone intermediate query.
		sql:    nasq.sql.Clone(),
		path:   nasq.path,
		unique: nasq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		LatestPostURL string `json:"latest_post_url,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NewsArticleSource.Query().
//		GroupBy(newsarticlesource.FieldLatestPostURL).
//		Aggregate(store.Count()).
//		Scan(ctx, &v)
//
func (nasq *NewsArticleSourceQuery) GroupBy(field string, fields ...string) *NewsArticleSourceGroupBy {
	group := &NewsArticleSourceGroupBy{config: nasq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := nasq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return nasq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		LatestPostURL string `json:"latest_post_url,omitempty"`
//	}
//
//	client.NewsArticleSource.Query().
//		Select(newsarticlesource.FieldLatestPostURL).
//		Scan(ctx, &v)
//
func (nasq *NewsArticleSourceQuery) Select(fields ...string) *NewsArticleSourceSelect {
	nasq.fields = append(nasq.fields, fields...)
	return &NewsArticleSourceSelect{NewsArticleSourceQuery: nasq}
}

func (nasq *NewsArticleSourceQuery) prepareQuery(ctx context.Context) error {
	for _, f := range nasq.fields {
		if !newsarticlesource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("store: invalid field %q for query", f)}
		}
	}
	if nasq.path != nil {
		prev, err := nasq.path(ctx)
		if err != nil {
			return err
		}
		nasq.sql = prev
	}
	return nil
}

func (nasq *NewsArticleSourceQuery) sqlAll(ctx context.Context) ([]*NewsArticleSource, error) {
	var (
		nodes = []*NewsArticleSource{}
		_spec = nasq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &NewsArticleSource{config: nasq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("store: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, nasq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (nasq *NewsArticleSourceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nasq.querySpec()
	_spec.Node.Columns = nasq.fields
	if len(nasq.fields) > 0 {
		_spec.Unique = nasq.unique != nil && *nasq.unique
	}
	return sqlgraph.CountNodes(ctx, nasq.driver, _spec)
}

func (nasq *NewsArticleSourceQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := nasq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("store: check existence: %w", err)
	}
	return n > 0, nil
}

func (nasq *NewsArticleSourceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   newsarticlesource.Table,
			Columns: newsarticlesource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: newsarticlesource.FieldID,
			},
		},
		From:   nasq.sql,
		Unique: true,
	}
	if unique := nasq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := nasq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, newsarticlesource.FieldID)
		for i := range fields {
			if fields[i] != newsarticlesource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := nasq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nasq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nasq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nasq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nasq *NewsArticleSourceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nasq.driver.Dialect())
	t1 := builder.Table(newsarticlesource.Table)
	columns := nasq.fields
	if len(columns) == 0 {
		columns = newsarticlesource.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nasq.sql != nil {
		selector = nasq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if nasq.unique != nil && *nasq.unique {
		selector.Distinct()
	}
	for _, p := range nasq.predicates {
		p(selector)
	}
	for _, p := range nasq.order {
		p(selector)
	}
	if offset := nasq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nasq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NewsArticleSourceGroupBy is the group-by builder for NewsArticleSource entities.
type NewsArticleSourceGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (nasgb *NewsArticleSourceGroupBy) Aggregate(fns ...AggregateFunc) *NewsArticleSourceGroupBy {
	nasgb.fns = append(nasgb.fns, fns...)
	return nasgb
}

// Scan applies the group-by query and scans the result into the given value.
func (nasgb *NewsArticleSourceGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := nasgb.path(ctx)
	if err != nil {
		return err
	}
	nasgb.sql = query
	return nasgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (nasgb *NewsArticleSourceGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := nasgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (nasgb *NewsArticleSourceGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(nasgb.fields) > 1 {
		return nil, errors.New("store: NewsArticleSourceGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := nasgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (nasgb *NewsArticleSourceGroupBy) StringsX(ctx context.Context) []string {
	v, err := nasgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (nasgb *NewsArticleSourceGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = nasgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{newsarticlesource.Label}
	default:
		err = fmt.Errorf("store: NewsArticleSourceGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (nasgb *NewsArticleSourceGroupBy) StringX(ctx context.Context) string {
	v, err := nasgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (nasgb *NewsArticleSourceGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(nasgb.fields) > 1 {
		return nil, errors.New("store: NewsArticleSourceGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := nasgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (nasgb *NewsArticleSourceGroupBy) IntsX(ctx context.Context) []int {
	v, err := nasgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (nasgb *NewsArticleSourceGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = nasgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{newsarticlesource.Label}
	default:
		err = fmt.Errorf("store: NewsArticleSourceGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (nasgb *NewsArticleSourceGroupBy) IntX(ctx context.Context) int {
	v, err := nasgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (nasgb *NewsArticleSourceGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(nasgb.fields) > 1 {
		return nil, errors.New("store: NewsArticleSourceGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := nasgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (nasgb *NewsArticleSourceGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := nasgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (nasgb *NewsArticleSourceGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = nasgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{newsarticlesource.Label}
	default:
		err = fmt.Errorf("store: NewsArticleSourceGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (nasgb *NewsArticleSourceGroupBy) Float64X(ctx context.Context) float64 {
	v, err := nasgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (nasgb *NewsArticleSourceGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(nasgb.fields) > 1 {
		return nil, errors.New("store: NewsArticleSourceGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := nasgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (nasgb *NewsArticleSourceGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := nasgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (nasgb *NewsArticleSourceGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = nasgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{newsarticlesource.Label}
	default:
		err = fmt.Errorf("store: NewsArticleSourceGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (nasgb *NewsArticleSourceGroupBy) BoolX(ctx context.Context) bool {
	v, err := nasgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (nasgb *NewsArticleSourceGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range nasgb.fields {
		if !newsarticlesource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := nasgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nasgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (nasgb *NewsArticleSourceGroupBy) sqlQuery() *sql.Selector {
	selector := nasgb.sql.Select()
	aggregation := make([]string, 0, len(nasgb.fns))
	for _, fn := range nasgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(nasgb.fields)+len(nasgb.fns))
		for _, f := range nasgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(nasgb.fields...)...)
}

// NewsArticleSourceSelect is the builder for selecting fields of NewsArticleSource entities.
type NewsArticleSourceSelect struct {
	*NewsArticleSourceQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (nass *NewsArticleSourceSelect) Scan(ctx context.Context, v interface{}) error {
	if err := nass.prepareQuery(ctx); err != nil {
		return err
	}
	nass.sql = nass.NewsArticleSourceQuery.sqlQuery(ctx)
	return nass.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (nass *NewsArticleSourceSelect) ScanX(ctx context.Context, v interface{}) {
	if err := nass.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (nass *NewsArticleSourceSelect) Strings(ctx context.Context) ([]string, error) {
	if len(nass.fields) > 1 {
		return nil, errors.New("store: NewsArticleSourceSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := nass.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (nass *NewsArticleSourceSelect) StringsX(ctx context.Context) []string {
	v, err := nass.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (nass *NewsArticleSourceSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = nass.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{newsarticlesource.Label}
	default:
		err = fmt.Errorf("store: NewsArticleSourceSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (nass *NewsArticleSourceSelect) StringX(ctx context.Context) string {
	v, err := nass.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (nass *NewsArticleSourceSelect) Ints(ctx context.Context) ([]int, error) {
	if len(nass.fields) > 1 {
		return nil, errors.New("store: NewsArticleSourceSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := nass.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (nass *NewsArticleSourceSelect) IntsX(ctx context.Context) []int {
	v, err := nass.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (nass *NewsArticleSourceSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = nass.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{newsarticlesource.Label}
	default:
		err = fmt.Errorf("store: NewsArticleSourceSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (nass *NewsArticleSourceSelect) IntX(ctx context.Context) int {
	v, err := nass.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (nass *NewsArticleSourceSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(nass.fields) > 1 {
		return nil, errors.New("store: NewsArticleSourceSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := nass.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (nass *NewsArticleSourceSelect) Float64sX(ctx context.Context) []float64 {
	v, err := nass.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (nass *NewsArticleSourceSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = nass.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{newsarticlesource.Label}
	default:
		err = fmt.Errorf("store: NewsArticleSourceSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (nass *NewsArticleSourceSelect) Float64X(ctx context.Context) float64 {
	v, err := nass.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (nass *NewsArticleSourceSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(nass.fields) > 1 {
		return nil, errors.New("store: NewsArticleSourceSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := nass.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (nass *NewsArticleSourceSelect) BoolsX(ctx context.Context) []bool {
	v, err := nass.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (nass *NewsArticleSourceSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = nass.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{newsarticlesource.Label}
	default:
		err = fmt.Errorf("store: NewsArticleSourceSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (nass *NewsArticleSourceSelect) BoolX(ctx context.Context) bool {
	v, err := nass.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (nass *NewsArticleSourceSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := nass.sql.Query()
	if err := nass.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
