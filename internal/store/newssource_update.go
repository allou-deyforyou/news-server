// Code generated by entc, DO NOT EDIT.

package store

import (
	"context"
	"errors"
	"fmt"
	"news/internal/store/newssource"
	"news/internal/store/predicate"
	"news/internal/store/schema"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NewsSourceUpdate is the builder for updating NewsSource entities.
type NewsSourceUpdate struct {
	config
	hooks    []Hook
	mutation *NewsSourceMutation
}

// Where appends a list predicates to the NewsSourceUpdate builder.
func (nsu *NewsSourceUpdate) Where(ps ...predicate.NewsSource) *NewsSourceUpdate {
	nsu.mutation.Where(ps...)
	return nsu
}

// SetLatestPostURL sets the "latest_post_url" field.
func (nsu *NewsSourceUpdate) SetLatestPostURL(s string) *NewsSourceUpdate {
	nsu.mutation.SetLatestPostURL(s)
	return nsu
}

// SetNillableLatestPostURL sets the "latest_post_url" field if the given value is not nil.
func (nsu *NewsSourceUpdate) SetNillableLatestPostURL(s *string) *NewsSourceUpdate {
	if s != nil {
		nsu.SetLatestPostURL(*s)
	}
	return nsu
}

// ClearLatestPostURL clears the value of the "latest_post_url" field.
func (nsu *NewsSourceUpdate) ClearLatestPostURL() *NewsSourceUpdate {
	nsu.mutation.ClearLatestPostURL()
	return nsu
}

// SetLatestPostSelector sets the "latest_post_selector" field.
func (nsu *NewsSourceUpdate) SetLatestPostSelector(sps *schema.NewsPostSelector) *NewsSourceUpdate {
	nsu.mutation.SetLatestPostSelector(sps)
	return nsu
}

// ClearLatestPostSelector clears the value of the "latest_post_selector" field.
func (nsu *NewsSourceUpdate) ClearLatestPostSelector() *NewsSourceUpdate {
	nsu.mutation.ClearLatestPostSelector()
	return nsu
}

// SetCategoryPostURL sets the "category_post_url" field.
func (nsu *NewsSourceUpdate) SetCategoryPostURL(s string) *NewsSourceUpdate {
	nsu.mutation.SetCategoryPostURL(s)
	return nsu
}

// SetNillableCategoryPostURL sets the "category_post_url" field if the given value is not nil.
func (nsu *NewsSourceUpdate) SetNillableCategoryPostURL(s *string) *NewsSourceUpdate {
	if s != nil {
		nsu.SetCategoryPostURL(*s)
	}
	return nsu
}

// ClearCategoryPostURL clears the value of the "category_post_url" field.
func (nsu *NewsSourceUpdate) ClearCategoryPostURL() *NewsSourceUpdate {
	nsu.mutation.ClearCategoryPostURL()
	return nsu
}

// SetCategoryPostSelector sets the "category_post_selector" field.
func (nsu *NewsSourceUpdate) SetCategoryPostSelector(sps *schema.NewsPostSelector) *NewsSourceUpdate {
	nsu.mutation.SetCategoryPostSelector(sps)
	return nsu
}

// ClearCategoryPostSelector clears the value of the "category_post_selector" field.
func (nsu *NewsSourceUpdate) ClearCategoryPostSelector() *NewsSourceUpdate {
	nsu.mutation.ClearCategoryPostSelector()
	return nsu
}

// SetArticleSelector sets the "article_selector" field.
func (nsu *NewsSourceUpdate) SetArticleSelector(sas *schema.NewsArticleSelector) *NewsSourceUpdate {
	nsu.mutation.SetArticleSelector(sas)
	return nsu
}

// ClearArticleSelector clears the value of the "article_selector" field.
func (nsu *NewsSourceUpdate) ClearArticleSelector() *NewsSourceUpdate {
	nsu.mutation.ClearArticleSelector()
	return nsu
}

// SetLanguage sets the "language" field.
func (nsu *NewsSourceUpdate) SetLanguage(s string) *NewsSourceUpdate {
	nsu.mutation.SetLanguage(s)
	return nsu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (nsu *NewsSourceUpdate) SetNillableLanguage(s *string) *NewsSourceUpdate {
	if s != nil {
		nsu.SetLanguage(*s)
	}
	return nsu
}

// SetCountry sets the "country" field.
func (nsu *NewsSourceUpdate) SetCountry(s string) *NewsSourceUpdate {
	nsu.mutation.SetCountry(s)
	return nsu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (nsu *NewsSourceUpdate) SetNillableCountry(s *string) *NewsSourceUpdate {
	if s != nil {
		nsu.SetCountry(*s)
	}
	return nsu
}

// SetStatus sets the "status" field.
func (nsu *NewsSourceUpdate) SetStatus(b bool) *NewsSourceUpdate {
	nsu.mutation.SetStatus(b)
	return nsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nsu *NewsSourceUpdate) SetNillableStatus(b *bool) *NewsSourceUpdate {
	if b != nil {
		nsu.SetStatus(*b)
	}
	return nsu
}

// SetLogo sets the "logo" field.
func (nsu *NewsSourceUpdate) SetLogo(s string) *NewsSourceUpdate {
	nsu.mutation.SetLogo(s)
	return nsu
}

// SetName sets the "name" field.
func (nsu *NewsSourceUpdate) SetName(s string) *NewsSourceUpdate {
	nsu.mutation.SetName(s)
	return nsu
}

// SetCategories sets the "categories" field.
func (nsu *NewsSourceUpdate) SetCategories(s []string) *NewsSourceUpdate {
	nsu.mutation.SetCategories(s)
	return nsu
}

// SetURL sets the "url" field.
func (nsu *NewsSourceUpdate) SetURL(s string) *NewsSourceUpdate {
	nsu.mutation.SetURL(s)
	return nsu
}

// Mutation returns the NewsSourceMutation object of the builder.
func (nsu *NewsSourceUpdate) Mutation() *NewsSourceMutation {
	return nsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nsu *NewsSourceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nsu.hooks) == 0 {
		if err = nsu.check(); err != nil {
			return 0, err
		}
		affected, err = nsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewsSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nsu.check(); err != nil {
				return 0, err
			}
			nsu.mutation = mutation
			affected, err = nsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nsu.hooks) - 1; i >= 0; i-- {
			if nsu.hooks[i] == nil {
				return 0, fmt.Errorf("store: uninitialized hook (forgotten import store/runtime?)")
			}
			mut = nsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nsu *NewsSourceUpdate) SaveX(ctx context.Context) int {
	affected, err := nsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nsu *NewsSourceUpdate) Exec(ctx context.Context) error {
	_, err := nsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsu *NewsSourceUpdate) ExecX(ctx context.Context) {
	if err := nsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsu *NewsSourceUpdate) check() error {
	if v, ok := nsu.mutation.Logo(); ok {
		if err := newssource.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`store: validator failed for field "NewsSource.logo": %w`, err)}
		}
	}
	return nil
}

func (nsu *NewsSourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   newssource.Table,
			Columns: newssource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: newssource.FieldID,
			},
		},
	}
	if ps := nsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nsu.mutation.LatestPostURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldLatestPostURL,
		})
	}
	if nsu.mutation.LatestPostURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: newssource.FieldLatestPostURL,
		})
	}
	if value, ok := nsu.mutation.LatestPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newssource.FieldLatestPostSelector,
		})
	}
	if nsu.mutation.LatestPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: newssource.FieldLatestPostSelector,
		})
	}
	if value, ok := nsu.mutation.CategoryPostURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldCategoryPostURL,
		})
	}
	if nsu.mutation.CategoryPostURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: newssource.FieldCategoryPostURL,
		})
	}
	if value, ok := nsu.mutation.CategoryPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newssource.FieldCategoryPostSelector,
		})
	}
	if nsu.mutation.CategoryPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: newssource.FieldCategoryPostSelector,
		})
	}
	if value, ok := nsu.mutation.ArticleSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newssource.FieldArticleSelector,
		})
	}
	if nsu.mutation.ArticleSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: newssource.FieldArticleSelector,
		})
	}
	if value, ok := nsu.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldLanguage,
		})
	}
	if value, ok := nsu.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldCountry,
		})
	}
	if value, ok := nsu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: newssource.FieldStatus,
		})
	}
	if value, ok := nsu.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldLogo,
		})
	}
	if value, ok := nsu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldName,
		})
	}
	if value, ok := nsu.mutation.Categories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newssource.FieldCategories,
		})
	}
	if value, ok := nsu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldURL,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{newssource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NewsSourceUpdateOne is the builder for updating a single NewsSource entity.
type NewsSourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NewsSourceMutation
}

// SetLatestPostURL sets the "latest_post_url" field.
func (nsuo *NewsSourceUpdateOne) SetLatestPostURL(s string) *NewsSourceUpdateOne {
	nsuo.mutation.SetLatestPostURL(s)
	return nsuo
}

// SetNillableLatestPostURL sets the "latest_post_url" field if the given value is not nil.
func (nsuo *NewsSourceUpdateOne) SetNillableLatestPostURL(s *string) *NewsSourceUpdateOne {
	if s != nil {
		nsuo.SetLatestPostURL(*s)
	}
	return nsuo
}

// ClearLatestPostURL clears the value of the "latest_post_url" field.
func (nsuo *NewsSourceUpdateOne) ClearLatestPostURL() *NewsSourceUpdateOne {
	nsuo.mutation.ClearLatestPostURL()
	return nsuo
}

// SetLatestPostSelector sets the "latest_post_selector" field.
func (nsuo *NewsSourceUpdateOne) SetLatestPostSelector(sps *schema.NewsPostSelector) *NewsSourceUpdateOne {
	nsuo.mutation.SetLatestPostSelector(sps)
	return nsuo
}

// ClearLatestPostSelector clears the value of the "latest_post_selector" field.
func (nsuo *NewsSourceUpdateOne) ClearLatestPostSelector() *NewsSourceUpdateOne {
	nsuo.mutation.ClearLatestPostSelector()
	return nsuo
}

// SetCategoryPostURL sets the "category_post_url" field.
func (nsuo *NewsSourceUpdateOne) SetCategoryPostURL(s string) *NewsSourceUpdateOne {
	nsuo.mutation.SetCategoryPostURL(s)
	return nsuo
}

// SetNillableCategoryPostURL sets the "category_post_url" field if the given value is not nil.
func (nsuo *NewsSourceUpdateOne) SetNillableCategoryPostURL(s *string) *NewsSourceUpdateOne {
	if s != nil {
		nsuo.SetCategoryPostURL(*s)
	}
	return nsuo
}

// ClearCategoryPostURL clears the value of the "category_post_url" field.
func (nsuo *NewsSourceUpdateOne) ClearCategoryPostURL() *NewsSourceUpdateOne {
	nsuo.mutation.ClearCategoryPostURL()
	return nsuo
}

// SetCategoryPostSelector sets the "category_post_selector" field.
func (nsuo *NewsSourceUpdateOne) SetCategoryPostSelector(sps *schema.NewsPostSelector) *NewsSourceUpdateOne {
	nsuo.mutation.SetCategoryPostSelector(sps)
	return nsuo
}

// ClearCategoryPostSelector clears the value of the "category_post_selector" field.
func (nsuo *NewsSourceUpdateOne) ClearCategoryPostSelector() *NewsSourceUpdateOne {
	nsuo.mutation.ClearCategoryPostSelector()
	return nsuo
}

// SetArticleSelector sets the "article_selector" field.
func (nsuo *NewsSourceUpdateOne) SetArticleSelector(sas *schema.NewsArticleSelector) *NewsSourceUpdateOne {
	nsuo.mutation.SetArticleSelector(sas)
	return nsuo
}

// ClearArticleSelector clears the value of the "article_selector" field.
func (nsuo *NewsSourceUpdateOne) ClearArticleSelector() *NewsSourceUpdateOne {
	nsuo.mutation.ClearArticleSelector()
	return nsuo
}

// SetLanguage sets the "language" field.
func (nsuo *NewsSourceUpdateOne) SetLanguage(s string) *NewsSourceUpdateOne {
	nsuo.mutation.SetLanguage(s)
	return nsuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (nsuo *NewsSourceUpdateOne) SetNillableLanguage(s *string) *NewsSourceUpdateOne {
	if s != nil {
		nsuo.SetLanguage(*s)
	}
	return nsuo
}

// SetCountry sets the "country" field.
func (nsuo *NewsSourceUpdateOne) SetCountry(s string) *NewsSourceUpdateOne {
	nsuo.mutation.SetCountry(s)
	return nsuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (nsuo *NewsSourceUpdateOne) SetNillableCountry(s *string) *NewsSourceUpdateOne {
	if s != nil {
		nsuo.SetCountry(*s)
	}
	return nsuo
}

// SetStatus sets the "status" field.
func (nsuo *NewsSourceUpdateOne) SetStatus(b bool) *NewsSourceUpdateOne {
	nsuo.mutation.SetStatus(b)
	return nsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nsuo *NewsSourceUpdateOne) SetNillableStatus(b *bool) *NewsSourceUpdateOne {
	if b != nil {
		nsuo.SetStatus(*b)
	}
	return nsuo
}

// SetLogo sets the "logo" field.
func (nsuo *NewsSourceUpdateOne) SetLogo(s string) *NewsSourceUpdateOne {
	nsuo.mutation.SetLogo(s)
	return nsuo
}

// SetName sets the "name" field.
func (nsuo *NewsSourceUpdateOne) SetName(s string) *NewsSourceUpdateOne {
	nsuo.mutation.SetName(s)
	return nsuo
}

// SetCategories sets the "categories" field.
func (nsuo *NewsSourceUpdateOne) SetCategories(s []string) *NewsSourceUpdateOne {
	nsuo.mutation.SetCategories(s)
	return nsuo
}

// SetURL sets the "url" field.
func (nsuo *NewsSourceUpdateOne) SetURL(s string) *NewsSourceUpdateOne {
	nsuo.mutation.SetURL(s)
	return nsuo
}

// Mutation returns the NewsSourceMutation object of the builder.
func (nsuo *NewsSourceUpdateOne) Mutation() *NewsSourceMutation {
	return nsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nsuo *NewsSourceUpdateOne) Select(field string, fields ...string) *NewsSourceUpdateOne {
	nsuo.fields = append([]string{field}, fields...)
	return nsuo
}

// Save executes the query and returns the updated NewsSource entity.
func (nsuo *NewsSourceUpdateOne) Save(ctx context.Context) (*NewsSource, error) {
	var (
		err  error
		node *NewsSource
	)
	if len(nsuo.hooks) == 0 {
		if err = nsuo.check(); err != nil {
			return nil, err
		}
		node, err = nsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewsSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nsuo.check(); err != nil {
				return nil, err
			}
			nsuo.mutation = mutation
			node, err = nsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nsuo.hooks) - 1; i >= 0; i-- {
			if nsuo.hooks[i] == nil {
				return nil, fmt.Errorf("store: uninitialized hook (forgotten import store/runtime?)")
			}
			mut = nsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nsuo *NewsSourceUpdateOne) SaveX(ctx context.Context) *NewsSource {
	node, err := nsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nsuo *NewsSourceUpdateOne) Exec(ctx context.Context) error {
	_, err := nsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsuo *NewsSourceUpdateOne) ExecX(ctx context.Context) {
	if err := nsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsuo *NewsSourceUpdateOne) check() error {
	if v, ok := nsuo.mutation.Logo(); ok {
		if err := newssource.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`store: validator failed for field "NewsSource.logo": %w`, err)}
		}
	}
	return nil
}

func (nsuo *NewsSourceUpdateOne) sqlSave(ctx context.Context) (_node *NewsSource, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   newssource.Table,
			Columns: newssource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: newssource.FieldID,
			},
		},
	}
	id, ok := nsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`store: missing "NewsSource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, newssource.FieldID)
		for _, f := range fields {
			if !newssource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("store: invalid field %q for query", f)}
			}
			if f != newssource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nsuo.mutation.LatestPostURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldLatestPostURL,
		})
	}
	if nsuo.mutation.LatestPostURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: newssource.FieldLatestPostURL,
		})
	}
	if value, ok := nsuo.mutation.LatestPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newssource.FieldLatestPostSelector,
		})
	}
	if nsuo.mutation.LatestPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: newssource.FieldLatestPostSelector,
		})
	}
	if value, ok := nsuo.mutation.CategoryPostURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldCategoryPostURL,
		})
	}
	if nsuo.mutation.CategoryPostURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: newssource.FieldCategoryPostURL,
		})
	}
	if value, ok := nsuo.mutation.CategoryPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newssource.FieldCategoryPostSelector,
		})
	}
	if nsuo.mutation.CategoryPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: newssource.FieldCategoryPostSelector,
		})
	}
	if value, ok := nsuo.mutation.ArticleSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newssource.FieldArticleSelector,
		})
	}
	if nsuo.mutation.ArticleSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: newssource.FieldArticleSelector,
		})
	}
	if value, ok := nsuo.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldLanguage,
		})
	}
	if value, ok := nsuo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldCountry,
		})
	}
	if value, ok := nsuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: newssource.FieldStatus,
		})
	}
	if value, ok := nsuo.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldLogo,
		})
	}
	if value, ok := nsuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldName,
		})
	}
	if value, ok := nsuo.mutation.Categories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newssource.FieldCategories,
		})
	}
	if value, ok := nsuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldURL,
		})
	}
	_node = &NewsSource{config: nsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{newssource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
