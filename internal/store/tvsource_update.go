// Code generated by entc, DO NOT EDIT.

package store

import (
	"context"
	"errors"
	"fmt"
	"news/internal/store/predicate"
	"news/internal/store/tvsource"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TvSourceUpdate is the builder for updating TvSource entities.
type TvSourceUpdate struct {
	config
	hooks    []Hook
	mutation *TvSourceMutation
}

// Where appends a list predicates to the TvSourceUpdate builder.
func (tsu *TvSourceUpdate) Where(ps ...predicate.TvSource) *TvSourceUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetLogo sets the "logo" field.
func (tsu *TvSourceUpdate) SetLogo(s string) *TvSourceUpdate {
	tsu.mutation.SetLogo(s)
	return tsu
}

// SetVideo sets the "video" field.
func (tsu *TvSourceUpdate) SetVideo(s string) *TvSourceUpdate {
	tsu.mutation.SetVideo(s)
	return tsu
}

// SetTitle sets the "title" field.
func (tsu *TvSourceUpdate) SetTitle(s string) *TvSourceUpdate {
	tsu.mutation.SetTitle(s)
	return tsu
}

// SetStatus sets the "status" field.
func (tsu *TvSourceUpdate) SetStatus(b bool) *TvSourceUpdate {
	tsu.mutation.SetStatus(b)
	return tsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tsu *TvSourceUpdate) SetNillableStatus(b *bool) *TvSourceUpdate {
	if b != nil {
		tsu.SetStatus(*b)
	}
	return tsu
}

// SetCountry sets the "country" field.
func (tsu *TvSourceUpdate) SetCountry(s string) *TvSourceUpdate {
	tsu.mutation.SetCountry(s)
	return tsu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (tsu *TvSourceUpdate) SetNillableCountry(s *string) *TvSourceUpdate {
	if s != nil {
		tsu.SetCountry(*s)
	}
	return tsu
}

// SetDescription sets the "description" field.
func (tsu *TvSourceUpdate) SetDescription(s string) *TvSourceUpdate {
	tsu.mutation.SetDescription(s)
	return tsu
}

// SetLanguage sets the "language" field.
func (tsu *TvSourceUpdate) SetLanguage(s string) *TvSourceUpdate {
	tsu.mutation.SetLanguage(s)
	return tsu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (tsu *TvSourceUpdate) SetNillableLanguage(s *string) *TvSourceUpdate {
	if s != nil {
		tsu.SetLanguage(*s)
	}
	return tsu
}

// Mutation returns the TvSourceMutation object of the builder.
func (tsu *TvSourceUpdate) Mutation() *TvSourceMutation {
	return tsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TvSourceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tsu.hooks) == 0 {
		if err = tsu.check(); err != nil {
			return 0, err
		}
		affected, err = tsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TvSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsu.check(); err != nil {
				return 0, err
			}
			tsu.mutation = mutation
			affected, err = tsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tsu.hooks) - 1; i >= 0; i-- {
			if tsu.hooks[i] == nil {
				return 0, fmt.Errorf("store: uninitialized hook (forgotten import store/runtime?)")
			}
			mut = tsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TvSourceUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TvSourceUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TvSourceUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsu *TvSourceUpdate) check() error {
	if v, ok := tsu.mutation.Logo(); ok {
		if err := tvsource.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`store: validator failed for field "TvSource.logo": %w`, err)}
		}
	}
	if v, ok := tsu.mutation.Video(); ok {
		if err := tvsource.VideoValidator(v); err != nil {
			return &ValidationError{Name: "video", err: fmt.Errorf(`store: validator failed for field "TvSource.video": %w`, err)}
		}
	}
	if v, ok := tsu.mutation.Title(); ok {
		if err := tvsource.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`store: validator failed for field "TvSource.title": %w`, err)}
		}
	}
	if v, ok := tsu.mutation.Description(); ok {
		if err := tvsource.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`store: validator failed for field "TvSource.description": %w`, err)}
		}
	}
	return nil
}

func (tsu *TvSourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tvsource.Table,
			Columns: tvsource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tvsource.FieldID,
			},
		},
	}
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tvsource.FieldLogo,
		})
	}
	if value, ok := tsu.mutation.Video(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tvsource.FieldVideo,
		})
	}
	if value, ok := tsu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tvsource.FieldTitle,
		})
	}
	if value, ok := tsu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tvsource.FieldStatus,
		})
	}
	if value, ok := tsu.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tvsource.FieldCountry,
		})
	}
	if value, ok := tsu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tvsource.FieldDescription,
		})
	}
	if value, ok := tsu.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tvsource.FieldLanguage,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tvsource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TvSourceUpdateOne is the builder for updating a single TvSource entity.
type TvSourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TvSourceMutation
}

// SetLogo sets the "logo" field.
func (tsuo *TvSourceUpdateOne) SetLogo(s string) *TvSourceUpdateOne {
	tsuo.mutation.SetLogo(s)
	return tsuo
}

// SetVideo sets the "video" field.
func (tsuo *TvSourceUpdateOne) SetVideo(s string) *TvSourceUpdateOne {
	tsuo.mutation.SetVideo(s)
	return tsuo
}

// SetTitle sets the "title" field.
func (tsuo *TvSourceUpdateOne) SetTitle(s string) *TvSourceUpdateOne {
	tsuo.mutation.SetTitle(s)
	return tsuo
}

// SetStatus sets the "status" field.
func (tsuo *TvSourceUpdateOne) SetStatus(b bool) *TvSourceUpdateOne {
	tsuo.mutation.SetStatus(b)
	return tsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tsuo *TvSourceUpdateOne) SetNillableStatus(b *bool) *TvSourceUpdateOne {
	if b != nil {
		tsuo.SetStatus(*b)
	}
	return tsuo
}

// SetCountry sets the "country" field.
func (tsuo *TvSourceUpdateOne) SetCountry(s string) *TvSourceUpdateOne {
	tsuo.mutation.SetCountry(s)
	return tsuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (tsuo *TvSourceUpdateOne) SetNillableCountry(s *string) *TvSourceUpdateOne {
	if s != nil {
		tsuo.SetCountry(*s)
	}
	return tsuo
}

// SetDescription sets the "description" field.
func (tsuo *TvSourceUpdateOne) SetDescription(s string) *TvSourceUpdateOne {
	tsuo.mutation.SetDescription(s)
	return tsuo
}

// SetLanguage sets the "language" field.
func (tsuo *TvSourceUpdateOne) SetLanguage(s string) *TvSourceUpdateOne {
	tsuo.mutation.SetLanguage(s)
	return tsuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (tsuo *TvSourceUpdateOne) SetNillableLanguage(s *string) *TvSourceUpdateOne {
	if s != nil {
		tsuo.SetLanguage(*s)
	}
	return tsuo
}

// Mutation returns the TvSourceMutation object of the builder.
func (tsuo *TvSourceUpdateOne) Mutation() *TvSourceMutation {
	return tsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TvSourceUpdateOne) Select(field string, fields ...string) *TvSourceUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated TvSource entity.
func (tsuo *TvSourceUpdateOne) Save(ctx context.Context) (*TvSource, error) {
	var (
		err  error
		node *TvSource
	)
	if len(tsuo.hooks) == 0 {
		if err = tsuo.check(); err != nil {
			return nil, err
		}
		node, err = tsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TvSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsuo.check(); err != nil {
				return nil, err
			}
			tsuo.mutation = mutation
			node, err = tsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tsuo.hooks) - 1; i >= 0; i-- {
			if tsuo.hooks[i] == nil {
				return nil, fmt.Errorf("store: uninitialized hook (forgotten import store/runtime?)")
			}
			mut = tsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TvSourceUpdateOne) SaveX(ctx context.Context) *TvSource {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TvSourceUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TvSourceUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsuo *TvSourceUpdateOne) check() error {
	if v, ok := tsuo.mutation.Logo(); ok {
		if err := tvsource.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`store: validator failed for field "TvSource.logo": %w`, err)}
		}
	}
	if v, ok := tsuo.mutation.Video(); ok {
		if err := tvsource.VideoValidator(v); err != nil {
			return &ValidationError{Name: "video", err: fmt.Errorf(`store: validator failed for field "TvSource.video": %w`, err)}
		}
	}
	if v, ok := tsuo.mutation.Title(); ok {
		if err := tvsource.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`store: validator failed for field "TvSource.title": %w`, err)}
		}
	}
	if v, ok := tsuo.mutation.Description(); ok {
		if err := tvsource.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`store: validator failed for field "TvSource.description": %w`, err)}
		}
	}
	return nil
}

func (tsuo *TvSourceUpdateOne) sqlSave(ctx context.Context) (_node *TvSource, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tvsource.Table,
			Columns: tvsource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tvsource.FieldID,
			},
		},
	}
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`store: missing "TvSource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tvsource.FieldID)
		for _, f := range fields {
			if !tvsource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("store: invalid field %q for query", f)}
			}
			if f != tvsource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tvsource.FieldLogo,
		})
	}
	if value, ok := tsuo.mutation.Video(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tvsource.FieldVideo,
		})
	}
	if value, ok := tsuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tvsource.FieldTitle,
		})
	}
	if value, ok := tsuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tvsource.FieldStatus,
		})
	}
	if value, ok := tsuo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tvsource.FieldCountry,
		})
	}
	if value, ok := tsuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tvsource.FieldDescription,
		})
	}
	if value, ok := tsuo.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tvsource.FieldLanguage,
		})
	}
	_node = &TvSource{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tvsource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
