// Code generated by entc, DO NOT EDIT.

package store

import (
	"context"
	"fmt"
	"log"

	"news/internal/store/migrate"

	"news/internal/store/newsarticlesource"
	"news/internal/store/newscategories"
	"news/internal/store/newstvsource"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// NewsArticleSource is the client for interacting with the NewsArticleSource builders.
	NewsArticleSource *NewsArticleSourceClient
	// NewsCategories is the client for interacting with the NewsCategories builders.
	NewsCategories *NewsCategoriesClient
	// NewsTvSource is the client for interacting with the NewsTvSource builders.
	NewsTvSource *NewsTvSourceClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.NewsArticleSource = NewNewsArticleSourceClient(c.config)
	c.NewsCategories = NewNewsCategoriesClient(c.config)
	c.NewsTvSource = NewNewsTvSourceClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("store: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("store: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		NewsArticleSource: NewNewsArticleSourceClient(cfg),
		NewsCategories:    NewNewsCategoriesClient(cfg),
		NewsTvSource:      NewNewsTvSourceClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		NewsArticleSource: NewNewsArticleSourceClient(cfg),
		NewsCategories:    NewNewsCategoriesClient(cfg),
		NewsTvSource:      NewNewsTvSourceClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		NewsArticleSource.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.NewsArticleSource.Use(hooks...)
	c.NewsCategories.Use(hooks...)
	c.NewsTvSource.Use(hooks...)
}

// NewsArticleSourceClient is a client for the NewsArticleSource schema.
type NewsArticleSourceClient struct {
	config
}

// NewNewsArticleSourceClient returns a client for the NewsArticleSource from the given config.
func NewNewsArticleSourceClient(c config) *NewsArticleSourceClient {
	return &NewsArticleSourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `newsarticlesource.Hooks(f(g(h())))`.
func (c *NewsArticleSourceClient) Use(hooks ...Hook) {
	c.hooks.NewsArticleSource = append(c.hooks.NewsArticleSource, hooks...)
}

// Create returns a create builder for NewsArticleSource.
func (c *NewsArticleSourceClient) Create() *NewsArticleSourceCreate {
	mutation := newNewsArticleSourceMutation(c.config, OpCreate)
	return &NewsArticleSourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NewsArticleSource entities.
func (c *NewsArticleSourceClient) CreateBulk(builders ...*NewsArticleSourceCreate) *NewsArticleSourceCreateBulk {
	return &NewsArticleSourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NewsArticleSource.
func (c *NewsArticleSourceClient) Update() *NewsArticleSourceUpdate {
	mutation := newNewsArticleSourceMutation(c.config, OpUpdate)
	return &NewsArticleSourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NewsArticleSourceClient) UpdateOne(nas *NewsArticleSource) *NewsArticleSourceUpdateOne {
	mutation := newNewsArticleSourceMutation(c.config, OpUpdateOne, withNewsArticleSource(nas))
	return &NewsArticleSourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NewsArticleSourceClient) UpdateOneID(id int) *NewsArticleSourceUpdateOne {
	mutation := newNewsArticleSourceMutation(c.config, OpUpdateOne, withNewsArticleSourceID(id))
	return &NewsArticleSourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NewsArticleSource.
func (c *NewsArticleSourceClient) Delete() *NewsArticleSourceDelete {
	mutation := newNewsArticleSourceMutation(c.config, OpDelete)
	return &NewsArticleSourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NewsArticleSourceClient) DeleteOne(nas *NewsArticleSource) *NewsArticleSourceDeleteOne {
	return c.DeleteOneID(nas.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NewsArticleSourceClient) DeleteOneID(id int) *NewsArticleSourceDeleteOne {
	builder := c.Delete().Where(newsarticlesource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NewsArticleSourceDeleteOne{builder}
}

// Query returns a query builder for NewsArticleSource.
func (c *NewsArticleSourceClient) Query() *NewsArticleSourceQuery {
	return &NewsArticleSourceQuery{
		config: c.config,
	}
}

// Get returns a NewsArticleSource entity by its id.
func (c *NewsArticleSourceClient) Get(ctx context.Context, id int) (*NewsArticleSource, error) {
	return c.Query().Where(newsarticlesource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NewsArticleSourceClient) GetX(ctx context.Context, id int) *NewsArticleSource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NewsArticleSourceClient) Hooks() []Hook {
	return c.hooks.NewsArticleSource
}

// NewsCategoriesClient is a client for the NewsCategories schema.
type NewsCategoriesClient struct {
	config
}

// NewNewsCategoriesClient returns a client for the NewsCategories from the given config.
func NewNewsCategoriesClient(c config) *NewsCategoriesClient {
	return &NewsCategoriesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `newscategories.Hooks(f(g(h())))`.
func (c *NewsCategoriesClient) Use(hooks ...Hook) {
	c.hooks.NewsCategories = append(c.hooks.NewsCategories, hooks...)
}

// Create returns a create builder for NewsCategories.
func (c *NewsCategoriesClient) Create() *NewsCategoriesCreate {
	mutation := newNewsCategoriesMutation(c.config, OpCreate)
	return &NewsCategoriesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NewsCategories entities.
func (c *NewsCategoriesClient) CreateBulk(builders ...*NewsCategoriesCreate) *NewsCategoriesCreateBulk {
	return &NewsCategoriesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NewsCategories.
func (c *NewsCategoriesClient) Update() *NewsCategoriesUpdate {
	mutation := newNewsCategoriesMutation(c.config, OpUpdate)
	return &NewsCategoriesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NewsCategoriesClient) UpdateOne(nc *NewsCategories) *NewsCategoriesUpdateOne {
	mutation := newNewsCategoriesMutation(c.config, OpUpdateOne, withNewsCategories(nc))
	return &NewsCategoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NewsCategoriesClient) UpdateOneID(id int) *NewsCategoriesUpdateOne {
	mutation := newNewsCategoriesMutation(c.config, OpUpdateOne, withNewsCategoriesID(id))
	return &NewsCategoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NewsCategories.
func (c *NewsCategoriesClient) Delete() *NewsCategoriesDelete {
	mutation := newNewsCategoriesMutation(c.config, OpDelete)
	return &NewsCategoriesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NewsCategoriesClient) DeleteOne(nc *NewsCategories) *NewsCategoriesDeleteOne {
	return c.DeleteOneID(nc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NewsCategoriesClient) DeleteOneID(id int) *NewsCategoriesDeleteOne {
	builder := c.Delete().Where(newscategories.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NewsCategoriesDeleteOne{builder}
}

// Query returns a query builder for NewsCategories.
func (c *NewsCategoriesClient) Query() *NewsCategoriesQuery {
	return &NewsCategoriesQuery{
		config: c.config,
	}
}

// Get returns a NewsCategories entity by its id.
func (c *NewsCategoriesClient) Get(ctx context.Context, id int) (*NewsCategories, error) {
	return c.Query().Where(newscategories.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NewsCategoriesClient) GetX(ctx context.Context, id int) *NewsCategories {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NewsCategoriesClient) Hooks() []Hook {
	return c.hooks.NewsCategories
}

// NewsTvSourceClient is a client for the NewsTvSource schema.
type NewsTvSourceClient struct {
	config
}

// NewNewsTvSourceClient returns a client for the NewsTvSource from the given config.
func NewNewsTvSourceClient(c config) *NewsTvSourceClient {
	return &NewsTvSourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `newstvsource.Hooks(f(g(h())))`.
func (c *NewsTvSourceClient) Use(hooks ...Hook) {
	c.hooks.NewsTvSource = append(c.hooks.NewsTvSource, hooks...)
}

// Create returns a create builder for NewsTvSource.
func (c *NewsTvSourceClient) Create() *NewsTvSourceCreate {
	mutation := newNewsTvSourceMutation(c.config, OpCreate)
	return &NewsTvSourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NewsTvSource entities.
func (c *NewsTvSourceClient) CreateBulk(builders ...*NewsTvSourceCreate) *NewsTvSourceCreateBulk {
	return &NewsTvSourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NewsTvSource.
func (c *NewsTvSourceClient) Update() *NewsTvSourceUpdate {
	mutation := newNewsTvSourceMutation(c.config, OpUpdate)
	return &NewsTvSourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NewsTvSourceClient) UpdateOne(nts *NewsTvSource) *NewsTvSourceUpdateOne {
	mutation := newNewsTvSourceMutation(c.config, OpUpdateOne, withNewsTvSource(nts))
	return &NewsTvSourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NewsTvSourceClient) UpdateOneID(id int) *NewsTvSourceUpdateOne {
	mutation := newNewsTvSourceMutation(c.config, OpUpdateOne, withNewsTvSourceID(id))
	return &NewsTvSourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NewsTvSource.
func (c *NewsTvSourceClient) Delete() *NewsTvSourceDelete {
	mutation := newNewsTvSourceMutation(c.config, OpDelete)
	return &NewsTvSourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NewsTvSourceClient) DeleteOne(nts *NewsTvSource) *NewsTvSourceDeleteOne {
	return c.DeleteOneID(nts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NewsTvSourceClient) DeleteOneID(id int) *NewsTvSourceDeleteOne {
	builder := c.Delete().Where(newstvsource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NewsTvSourceDeleteOne{builder}
}

// Query returns a query builder for NewsTvSource.
func (c *NewsTvSourceClient) Query() *NewsTvSourceQuery {
	return &NewsTvSourceQuery{
		config: c.config,
	}
}

// Get returns a NewsTvSource entity by its id.
func (c *NewsTvSourceClient) Get(ctx context.Context, id int) (*NewsTvSource, error) {
	return c.Query().Where(newstvsource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NewsTvSourceClient) GetX(ctx context.Context, id int) *NewsTvSource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NewsTvSourceClient) Hooks() []Hook {
	return c.hooks.NewsTvSource
}
