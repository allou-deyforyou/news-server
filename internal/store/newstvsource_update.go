// Code generated by entc, DO NOT EDIT.

package store

import (
	"context"
	"errors"
	"fmt"
	"news/internal/store/newstvsource"
	"news/internal/store/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NewsTvSourceUpdate is the builder for updating NewsTvSource entities.
type NewsTvSourceUpdate struct {
	config
	hooks    []Hook
	mutation *NewsTvSourceMutation
}

// Where appends a list predicates to the NewsTvSourceUpdate builder.
func (ntsu *NewsTvSourceUpdate) Where(ps ...predicate.NewsTvSource) *NewsTvSourceUpdate {
	ntsu.mutation.Where(ps...)
	return ntsu
}

// SetLogo sets the "logo" field.
func (ntsu *NewsTvSourceUpdate) SetLogo(s string) *NewsTvSourceUpdate {
	ntsu.mutation.SetLogo(s)
	return ntsu
}

// SetVideo sets the "video" field.
func (ntsu *NewsTvSourceUpdate) SetVideo(s string) *NewsTvSourceUpdate {
	ntsu.mutation.SetVideo(s)
	return ntsu
}

// SetLive sets the "live" field.
func (ntsu *NewsTvSourceUpdate) SetLive(b bool) *NewsTvSourceUpdate {
	ntsu.mutation.SetLive(b)
	return ntsu
}

// SetNillableLive sets the "live" field if the given value is not nil.
func (ntsu *NewsTvSourceUpdate) SetNillableLive(b *bool) *NewsTvSourceUpdate {
	if b != nil {
		ntsu.SetLive(*b)
	}
	return ntsu
}

// SetStatus sets the "status" field.
func (ntsu *NewsTvSourceUpdate) SetStatus(b bool) *NewsTvSourceUpdate {
	ntsu.mutation.SetStatus(b)
	return ntsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ntsu *NewsTvSourceUpdate) SetNillableStatus(b *bool) *NewsTvSourceUpdate {
	if b != nil {
		ntsu.SetStatus(*b)
	}
	return ntsu
}

// SetCountry sets the "country" field.
func (ntsu *NewsTvSourceUpdate) SetCountry(s string) *NewsTvSourceUpdate {
	ntsu.mutation.SetCountry(s)
	return ntsu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (ntsu *NewsTvSourceUpdate) SetNillableCountry(s *string) *NewsTvSourceUpdate {
	if s != nil {
		ntsu.SetCountry(*s)
	}
	return ntsu
}

// SetDescription sets the "description" field.
func (ntsu *NewsTvSourceUpdate) SetDescription(s string) *NewsTvSourceUpdate {
	ntsu.mutation.SetDescription(s)
	return ntsu
}

// SetLanguage sets the "language" field.
func (ntsu *NewsTvSourceUpdate) SetLanguage(s string) *NewsTvSourceUpdate {
	ntsu.mutation.SetLanguage(s)
	return ntsu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (ntsu *NewsTvSourceUpdate) SetNillableLanguage(s *string) *NewsTvSourceUpdate {
	if s != nil {
		ntsu.SetLanguage(*s)
	}
	return ntsu
}

// SetSource sets the "source" field.
func (ntsu *NewsTvSourceUpdate) SetSource(s string) *NewsTvSourceUpdate {
	ntsu.mutation.SetSource(s)
	return ntsu
}

// SetCategories sets the "categories" field.
func (ntsu *NewsTvSourceUpdate) SetCategories(m map[string]string) *NewsTvSourceUpdate {
	ntsu.mutation.SetCategories(m)
	return ntsu
}

// ClearCategories clears the value of the "categories" field.
func (ntsu *NewsTvSourceUpdate) ClearCategories() *NewsTvSourceUpdate {
	ntsu.mutation.ClearCategories()
	return ntsu
}

// Mutation returns the NewsTvSourceMutation object of the builder.
func (ntsu *NewsTvSourceUpdate) Mutation() *NewsTvSourceMutation {
	return ntsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ntsu *NewsTvSourceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ntsu.hooks) == 0 {
		if err = ntsu.check(); err != nil {
			return 0, err
		}
		affected, err = ntsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewsTvSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ntsu.check(); err != nil {
				return 0, err
			}
			ntsu.mutation = mutation
			affected, err = ntsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ntsu.hooks) - 1; i >= 0; i-- {
			if ntsu.hooks[i] == nil {
				return 0, fmt.Errorf("store: uninitialized hook (forgotten import store/runtime?)")
			}
			mut = ntsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ntsu *NewsTvSourceUpdate) SaveX(ctx context.Context) int {
	affected, err := ntsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ntsu *NewsTvSourceUpdate) Exec(ctx context.Context) error {
	_, err := ntsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntsu *NewsTvSourceUpdate) ExecX(ctx context.Context) {
	if err := ntsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ntsu *NewsTvSourceUpdate) check() error {
	if v, ok := ntsu.mutation.Logo(); ok {
		if err := newstvsource.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`store: validator failed for field "NewsTvSource.logo": %w`, err)}
		}
	}
	if v, ok := ntsu.mutation.Video(); ok {
		if err := newstvsource.VideoValidator(v); err != nil {
			return &ValidationError{Name: "video", err: fmt.Errorf(`store: validator failed for field "NewsTvSource.video": %w`, err)}
		}
	}
	if v, ok := ntsu.mutation.Description(); ok {
		if err := newstvsource.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`store: validator failed for field "NewsTvSource.description": %w`, err)}
		}
	}
	if v, ok := ntsu.mutation.Source(); ok {
		if err := newstvsource.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`store: validator failed for field "NewsTvSource.source": %w`, err)}
		}
	}
	return nil
}

func (ntsu *NewsTvSourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   newstvsource.Table,
			Columns: newstvsource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: newstvsource.FieldID,
			},
		},
	}
	if ps := ntsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntsu.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newstvsource.FieldLogo,
		})
	}
	if value, ok := ntsu.mutation.Video(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newstvsource.FieldVideo,
		})
	}
	if value, ok := ntsu.mutation.Live(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: newstvsource.FieldLive,
		})
	}
	if value, ok := ntsu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: newstvsource.FieldStatus,
		})
	}
	if value, ok := ntsu.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newstvsource.FieldCountry,
		})
	}
	if value, ok := ntsu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newstvsource.FieldDescription,
		})
	}
	if value, ok := ntsu.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newstvsource.FieldLanguage,
		})
	}
	if value, ok := ntsu.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newstvsource.FieldSource,
		})
	}
	if value, ok := ntsu.mutation.Categories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newstvsource.FieldCategories,
		})
	}
	if ntsu.mutation.CategoriesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: newstvsource.FieldCategories,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ntsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{newstvsource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NewsTvSourceUpdateOne is the builder for updating a single NewsTvSource entity.
type NewsTvSourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NewsTvSourceMutation
}

// SetLogo sets the "logo" field.
func (ntsuo *NewsTvSourceUpdateOne) SetLogo(s string) *NewsTvSourceUpdateOne {
	ntsuo.mutation.SetLogo(s)
	return ntsuo
}

// SetVideo sets the "video" field.
func (ntsuo *NewsTvSourceUpdateOne) SetVideo(s string) *NewsTvSourceUpdateOne {
	ntsuo.mutation.SetVideo(s)
	return ntsuo
}

// SetLive sets the "live" field.
func (ntsuo *NewsTvSourceUpdateOne) SetLive(b bool) *NewsTvSourceUpdateOne {
	ntsuo.mutation.SetLive(b)
	return ntsuo
}

// SetNillableLive sets the "live" field if the given value is not nil.
func (ntsuo *NewsTvSourceUpdateOne) SetNillableLive(b *bool) *NewsTvSourceUpdateOne {
	if b != nil {
		ntsuo.SetLive(*b)
	}
	return ntsuo
}

// SetStatus sets the "status" field.
func (ntsuo *NewsTvSourceUpdateOne) SetStatus(b bool) *NewsTvSourceUpdateOne {
	ntsuo.mutation.SetStatus(b)
	return ntsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ntsuo *NewsTvSourceUpdateOne) SetNillableStatus(b *bool) *NewsTvSourceUpdateOne {
	if b != nil {
		ntsuo.SetStatus(*b)
	}
	return ntsuo
}

// SetCountry sets the "country" field.
func (ntsuo *NewsTvSourceUpdateOne) SetCountry(s string) *NewsTvSourceUpdateOne {
	ntsuo.mutation.SetCountry(s)
	return ntsuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (ntsuo *NewsTvSourceUpdateOne) SetNillableCountry(s *string) *NewsTvSourceUpdateOne {
	if s != nil {
		ntsuo.SetCountry(*s)
	}
	return ntsuo
}

// SetDescription sets the "description" field.
func (ntsuo *NewsTvSourceUpdateOne) SetDescription(s string) *NewsTvSourceUpdateOne {
	ntsuo.mutation.SetDescription(s)
	return ntsuo
}

// SetLanguage sets the "language" field.
func (ntsuo *NewsTvSourceUpdateOne) SetLanguage(s string) *NewsTvSourceUpdateOne {
	ntsuo.mutation.SetLanguage(s)
	return ntsuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (ntsuo *NewsTvSourceUpdateOne) SetNillableLanguage(s *string) *NewsTvSourceUpdateOne {
	if s != nil {
		ntsuo.SetLanguage(*s)
	}
	return ntsuo
}

// SetSource sets the "source" field.
func (ntsuo *NewsTvSourceUpdateOne) SetSource(s string) *NewsTvSourceUpdateOne {
	ntsuo.mutation.SetSource(s)
	return ntsuo
}

// SetCategories sets the "categories" field.
func (ntsuo *NewsTvSourceUpdateOne) SetCategories(m map[string]string) *NewsTvSourceUpdateOne {
	ntsuo.mutation.SetCategories(m)
	return ntsuo
}

// ClearCategories clears the value of the "categories" field.
func (ntsuo *NewsTvSourceUpdateOne) ClearCategories() *NewsTvSourceUpdateOne {
	ntsuo.mutation.ClearCategories()
	return ntsuo
}

// Mutation returns the NewsTvSourceMutation object of the builder.
func (ntsuo *NewsTvSourceUpdateOne) Mutation() *NewsTvSourceMutation {
	return ntsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ntsuo *NewsTvSourceUpdateOne) Select(field string, fields ...string) *NewsTvSourceUpdateOne {
	ntsuo.fields = append([]string{field}, fields...)
	return ntsuo
}

// Save executes the query and returns the updated NewsTvSource entity.
func (ntsuo *NewsTvSourceUpdateOne) Save(ctx context.Context) (*NewsTvSource, error) {
	var (
		err  error
		node *NewsTvSource
	)
	if len(ntsuo.hooks) == 0 {
		if err = ntsuo.check(); err != nil {
			return nil, err
		}
		node, err = ntsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewsTvSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ntsuo.check(); err != nil {
				return nil, err
			}
			ntsuo.mutation = mutation
			node, err = ntsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ntsuo.hooks) - 1; i >= 0; i-- {
			if ntsuo.hooks[i] == nil {
				return nil, fmt.Errorf("store: uninitialized hook (forgotten import store/runtime?)")
			}
			mut = ntsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ntsuo *NewsTvSourceUpdateOne) SaveX(ctx context.Context) *NewsTvSource {
	node, err := ntsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ntsuo *NewsTvSourceUpdateOne) Exec(ctx context.Context) error {
	_, err := ntsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntsuo *NewsTvSourceUpdateOne) ExecX(ctx context.Context) {
	if err := ntsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ntsuo *NewsTvSourceUpdateOne) check() error {
	if v, ok := ntsuo.mutation.Logo(); ok {
		if err := newstvsource.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`store: validator failed for field "NewsTvSource.logo": %w`, err)}
		}
	}
	if v, ok := ntsuo.mutation.Video(); ok {
		if err := newstvsource.VideoValidator(v); err != nil {
			return &ValidationError{Name: "video", err: fmt.Errorf(`store: validator failed for field "NewsTvSource.video": %w`, err)}
		}
	}
	if v, ok := ntsuo.mutation.Description(); ok {
		if err := newstvsource.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`store: validator failed for field "NewsTvSource.description": %w`, err)}
		}
	}
	if v, ok := ntsuo.mutation.Source(); ok {
		if err := newstvsource.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`store: validator failed for field "NewsTvSource.source": %w`, err)}
		}
	}
	return nil
}

func (ntsuo *NewsTvSourceUpdateOne) sqlSave(ctx context.Context) (_node *NewsTvSource, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   newstvsource.Table,
			Columns: newstvsource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: newstvsource.FieldID,
			},
		},
	}
	id, ok := ntsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`store: missing "NewsTvSource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ntsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, newstvsource.FieldID)
		for _, f := range fields {
			if !newstvsource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("store: invalid field %q for query", f)}
			}
			if f != newstvsource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ntsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntsuo.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newstvsource.FieldLogo,
		})
	}
	if value, ok := ntsuo.mutation.Video(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newstvsource.FieldVideo,
		})
	}
	if value, ok := ntsuo.mutation.Live(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: newstvsource.FieldLive,
		})
	}
	if value, ok := ntsuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: newstvsource.FieldStatus,
		})
	}
	if value, ok := ntsuo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newstvsource.FieldCountry,
		})
	}
	if value, ok := ntsuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newstvsource.FieldDescription,
		})
	}
	if value, ok := ntsuo.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newstvsource.FieldLanguage,
		})
	}
	if value, ok := ntsuo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newstvsource.FieldSource,
		})
	}
	if value, ok := ntsuo.mutation.Categories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newstvsource.FieldCategories,
		})
	}
	if ntsuo.mutation.CategoriesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: newstvsource.FieldCategories,
		})
	}
	_node = &NewsTvSource{config: ntsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ntsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{newstvsource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
