// Code generated by entc, DO NOT EDIT.

package store

import (
	"context"
	"errors"
	"fmt"
	"news/internal/store/newssource"
	"news/internal/store/schema"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NewsSourceCreate is the builder for creating a NewsSource entity.
type NewsSourceCreate struct {
	config
	mutation *NewsSourceMutation
	hooks    []Hook
}

// SetLatestPostURL sets the "latest_post_url" field.
func (nsc *NewsSourceCreate) SetLatestPostURL(s string) *NewsSourceCreate {
	nsc.mutation.SetLatestPostURL(s)
	return nsc
}

// SetNillableLatestPostURL sets the "latest_post_url" field if the given value is not nil.
func (nsc *NewsSourceCreate) SetNillableLatestPostURL(s *string) *NewsSourceCreate {
	if s != nil {
		nsc.SetLatestPostURL(*s)
	}
	return nsc
}

// SetLatestPostSelector sets the "latest_post_selector" field.
func (nsc *NewsSourceCreate) SetLatestPostSelector(sps *schema.NewsPostSelector) *NewsSourceCreate {
	nsc.mutation.SetLatestPostSelector(sps)
	return nsc
}

// SetCategoryPostURL sets the "category_post_url" field.
func (nsc *NewsSourceCreate) SetCategoryPostURL(s string) *NewsSourceCreate {
	nsc.mutation.SetCategoryPostURL(s)
	return nsc
}

// SetNillableCategoryPostURL sets the "category_post_url" field if the given value is not nil.
func (nsc *NewsSourceCreate) SetNillableCategoryPostURL(s *string) *NewsSourceCreate {
	if s != nil {
		nsc.SetCategoryPostURL(*s)
	}
	return nsc
}

// SetCategoryPostSelector sets the "category_post_selector" field.
func (nsc *NewsSourceCreate) SetCategoryPostSelector(sps *schema.NewsPostSelector) *NewsSourceCreate {
	nsc.mutation.SetCategoryPostSelector(sps)
	return nsc
}

// SetArticleSelector sets the "article_selector" field.
func (nsc *NewsSourceCreate) SetArticleSelector(sas *schema.NewsArticleSelector) *NewsSourceCreate {
	nsc.mutation.SetArticleSelector(sas)
	return nsc
}

// SetLanguage sets the "language" field.
func (nsc *NewsSourceCreate) SetLanguage(s string) *NewsSourceCreate {
	nsc.mutation.SetLanguage(s)
	return nsc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (nsc *NewsSourceCreate) SetNillableLanguage(s *string) *NewsSourceCreate {
	if s != nil {
		nsc.SetLanguage(*s)
	}
	return nsc
}

// SetCountry sets the "country" field.
func (nsc *NewsSourceCreate) SetCountry(s string) *NewsSourceCreate {
	nsc.mutation.SetCountry(s)
	return nsc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (nsc *NewsSourceCreate) SetNillableCountry(s *string) *NewsSourceCreate {
	if s != nil {
		nsc.SetCountry(*s)
	}
	return nsc
}

// SetStatus sets the "status" field.
func (nsc *NewsSourceCreate) SetStatus(b bool) *NewsSourceCreate {
	nsc.mutation.SetStatus(b)
	return nsc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nsc *NewsSourceCreate) SetNillableStatus(b *bool) *NewsSourceCreate {
	if b != nil {
		nsc.SetStatus(*b)
	}
	return nsc
}

// SetName sets the "name" field.
func (nsc *NewsSourceCreate) SetName(s string) *NewsSourceCreate {
	nsc.mutation.SetName(s)
	return nsc
}

// SetCategories sets the "categories" field.
func (nsc *NewsSourceCreate) SetCategories(s []string) *NewsSourceCreate {
	nsc.mutation.SetCategories(s)
	return nsc
}

// SetURL sets the "url" field.
func (nsc *NewsSourceCreate) SetURL(s string) *NewsSourceCreate {
	nsc.mutation.SetURL(s)
	return nsc
}

// Mutation returns the NewsSourceMutation object of the builder.
func (nsc *NewsSourceCreate) Mutation() *NewsSourceMutation {
	return nsc.mutation
}

// Save creates the NewsSource in the database.
func (nsc *NewsSourceCreate) Save(ctx context.Context) (*NewsSource, error) {
	var (
		err  error
		node *NewsSource
	)
	nsc.defaults()
	if len(nsc.hooks) == 0 {
		if err = nsc.check(); err != nil {
			return nil, err
		}
		node, err = nsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewsSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nsc.check(); err != nil {
				return nil, err
			}
			nsc.mutation = mutation
			if node, err = nsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(nsc.hooks) - 1; i >= 0; i-- {
			if nsc.hooks[i] == nil {
				return nil, fmt.Errorf("store: uninitialized hook (forgotten import store/runtime?)")
			}
			mut = nsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nsc *NewsSourceCreate) SaveX(ctx context.Context) *NewsSource {
	v, err := nsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nsc *NewsSourceCreate) Exec(ctx context.Context) error {
	_, err := nsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsc *NewsSourceCreate) ExecX(ctx context.Context) {
	if err := nsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nsc *NewsSourceCreate) defaults() {
	if _, ok := nsc.mutation.Language(); !ok {
		v := newssource.DefaultLanguage
		nsc.mutation.SetLanguage(v)
	}
	if _, ok := nsc.mutation.Country(); !ok {
		v := newssource.DefaultCountry
		nsc.mutation.SetCountry(v)
	}
	if _, ok := nsc.mutation.Status(); !ok {
		v := newssource.DefaultStatus
		nsc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsc *NewsSourceCreate) check() error {
	if _, ok := nsc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`store: missing required field "NewsSource.language"`)}
	}
	if _, ok := nsc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`store: missing required field "NewsSource.country"`)}
	}
	if _, ok := nsc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`store: missing required field "NewsSource.status"`)}
	}
	if _, ok := nsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`store: missing required field "NewsSource.name"`)}
	}
	if _, ok := nsc.mutation.Categories(); !ok {
		return &ValidationError{Name: "categories", err: errors.New(`store: missing required field "NewsSource.categories"`)}
	}
	if _, ok := nsc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`store: missing required field "NewsSource.url"`)}
	}
	return nil
}

func (nsc *NewsSourceCreate) sqlSave(ctx context.Context) (*NewsSource, error) {
	_node, _spec := nsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (nsc *NewsSourceCreate) createSpec() (*NewsSource, *sqlgraph.CreateSpec) {
	var (
		_node = &NewsSource{config: nsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: newssource.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: newssource.FieldID,
			},
		}
	)
	if value, ok := nsc.mutation.LatestPostURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldLatestPostURL,
		})
		_node.LatestPostURL = &value
	}
	if value, ok := nsc.mutation.LatestPostSelector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newssource.FieldLatestPostSelector,
		})
		_node.LatestPostSelector = value
	}
	if value, ok := nsc.mutation.CategoryPostURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldCategoryPostURL,
		})
		_node.CategoryPostURL = &value
	}
	if value, ok := nsc.mutation.CategoryPostSelector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newssource.FieldCategoryPostSelector,
		})
		_node.CategoryPostSelector = value
	}
	if value, ok := nsc.mutation.ArticleSelector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newssource.FieldArticleSelector,
		})
		_node.ArticleSelector = value
	}
	if value, ok := nsc.mutation.Language(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldLanguage,
		})
		_node.Language = value
	}
	if value, ok := nsc.mutation.Country(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldCountry,
		})
		_node.Country = value
	}
	if value, ok := nsc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: newssource.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := nsc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldName,
		})
		_node.Name = value
	}
	if value, ok := nsc.mutation.Categories(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: newssource.FieldCategories,
		})
		_node.Categories = value
	}
	if value, ok := nsc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: newssource.FieldURL,
		})
		_node.URL = value
	}
	return _node, _spec
}

// NewsSourceCreateBulk is the builder for creating many NewsSource entities in bulk.
type NewsSourceCreateBulk struct {
	config
	builders []*NewsSourceCreate
}

// Save creates the NewsSource entities in the database.
func (nscb *NewsSourceCreateBulk) Save(ctx context.Context) ([]*NewsSource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nscb.builders))
	nodes := make([]*NewsSource, len(nscb.builders))
	mutators := make([]Mutator, len(nscb.builders))
	for i := range nscb.builders {
		func(i int, root context.Context) {
			builder := nscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NewsSourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nscb *NewsSourceCreateBulk) SaveX(ctx context.Context) []*NewsSource {
	v, err := nscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nscb *NewsSourceCreateBulk) Exec(ctx context.Context) error {
	_, err := nscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nscb *NewsSourceCreateBulk) ExecX(ctx context.Context) {
	if err := nscb.Exec(ctx); err != nil {
		panic(err)
	}
}
