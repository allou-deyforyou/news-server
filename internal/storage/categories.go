// Code generated by entc, DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
	"news/internal/storage/categories"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Categories is the model entity for the Categories schema.
type Categories struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ArticleCategories holds the value of the "article_categories" field.
	ArticleCategories map[string]string `json:"article_categories,omitempty"`
	// MediaCategories holds the value of the "media_categories" field.
	MediaCategories map[string]string `json:"media_categories,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Categories) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case categories.FieldArticleCategories, categories.FieldMediaCategories:
			values[i] = new([]byte)
		case categories.FieldStatus:
			values[i] = new(sql.NullBool)
		case categories.FieldID:
			values[i] = new(sql.NullInt64)
		case categories.FieldLanguage:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Categories", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Categories fields.
func (c *Categories) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case categories.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case categories.FieldArticleCategories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field article_categories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.ArticleCategories); err != nil {
					return fmt.Errorf("unmarshal field article_categories: %w", err)
				}
			}
		case categories.FieldMediaCategories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field media_categories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.MediaCategories); err != nil {
					return fmt.Errorf("unmarshal field media_categories: %w", err)
				}
			}
		case categories.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				c.Language = value.String
			}
		case categories.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Categories.
// Note that you need to call Categories.Unwrap() before calling this method if this Categories
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Categories) Update() *CategoriesUpdateOne {
	return (&CategoriesClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Categories entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Categories) Unwrap() *Categories {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("storage: Categories is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Categories) String() string {
	var builder strings.Builder
	builder.WriteString("Categories(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", article_categories=")
	builder.WriteString(fmt.Sprintf("%v", c.ArticleCategories))
	builder.WriteString(", media_categories=")
	builder.WriteString(fmt.Sprintf("%v", c.MediaCategories))
	builder.WriteString(", language=")
	builder.WriteString(c.Language)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteByte(')')
	return builder.String()
}

// CategoriesSlice is a parsable slice of Categories.
type CategoriesSlice []*Categories

func (c CategoriesSlice) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
