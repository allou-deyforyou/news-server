// Code generated by entc, DO NOT EDIT.

package storage

import (
	"context"
	"errors"
	"fmt"
	"news/internal/storage/articlepost"
	"news/internal/storage/categories"
	"news/internal/storage/custom"
	"news/internal/storage/mediapost"
	"news/internal/storage/predicate"
	"news/internal/storage/source"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArticlePost = "ArticlePost"
	TypeCategories  = "Categories"
	TypeMediaPost   = "MediaPost"
	TypeSource      = "Source"
)

// ArticlePostMutation represents an operation that mutates the ArticlePost nodes in the graph.
type ArticlePostMutation struct {
	config
	op            Op
	typ           string
	id            *int
	status        *bool
	title         *string
	image         *string
	description   *string
	date          *time.Time
	link          *string
	content       *string
	source        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ArticlePost, error)
	predicates    []predicate.ArticlePost
}

var _ ent.Mutation = (*ArticlePostMutation)(nil)

// articlepostOption allows management of the mutation configuration using functional options.
type articlepostOption func(*ArticlePostMutation)

// newArticlePostMutation creates new mutation for the ArticlePost entity.
func newArticlePostMutation(c config, op Op, opts ...articlepostOption) *ArticlePostMutation {
	m := &ArticlePostMutation{
		config:        c,
		op:            op,
		typ:           TypeArticlePost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArticlePostID sets the ID field of the mutation.
func withArticlePostID(id int) articlepostOption {
	return func(m *ArticlePostMutation) {
		var (
			err   error
			once  sync.Once
			value *ArticlePost
		)
		m.oldValue = func(ctx context.Context) (*ArticlePost, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ArticlePost.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArticlePost sets the old ArticlePost of the mutation.
func withArticlePost(node *ArticlePost) articlepostOption {
	return func(m *ArticlePostMutation) {
		m.oldValue = func(context.Context) (*ArticlePost, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArticlePostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArticlePostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("storage: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArticlePostMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArticlePostMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ArticlePost.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *ArticlePostMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *ArticlePostMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ArticlePost entity.
// If the ArticlePost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticlePostMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ArticlePostMutation) ResetStatus() {
	m.status = nil
}

// SetTitle sets the "title" field.
func (m *ArticlePostMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ArticlePostMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the ArticlePost entity.
// If the ArticlePost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticlePostMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ArticlePostMutation) ResetTitle() {
	m.title = nil
}

// SetImage sets the "image" field.
func (m *ArticlePostMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *ArticlePostMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the ArticlePost entity.
// If the ArticlePost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticlePostMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *ArticlePostMutation) ResetImage() {
	m.image = nil
}

// SetDescription sets the "description" field.
func (m *ArticlePostMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ArticlePostMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ArticlePost entity.
// If the ArticlePost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticlePostMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ArticlePostMutation) ResetDescription() {
	m.description = nil
}

// SetDate sets the "date" field.
func (m *ArticlePostMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *ArticlePostMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the ArticlePost entity.
// If the ArticlePost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticlePostMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ClearDate clears the value of the "date" field.
func (m *ArticlePostMutation) ClearDate() {
	m.date = nil
	m.clearedFields[articlepost.FieldDate] = struct{}{}
}

// DateCleared returns if the "date" field was cleared in this mutation.
func (m *ArticlePostMutation) DateCleared() bool {
	_, ok := m.clearedFields[articlepost.FieldDate]
	return ok
}

// ResetDate resets all changes to the "date" field.
func (m *ArticlePostMutation) ResetDate() {
	m.date = nil
	delete(m.clearedFields, articlepost.FieldDate)
}

// SetLink sets the "link" field.
func (m *ArticlePostMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *ArticlePostMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the ArticlePost entity.
// If the ArticlePost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticlePostMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *ArticlePostMutation) ResetLink() {
	m.link = nil
}

// SetContent sets the "content" field.
func (m *ArticlePostMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *ArticlePostMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the ArticlePost entity.
// If the ArticlePost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticlePostMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *ArticlePostMutation) ClearContent() {
	m.content = nil
	m.clearedFields[articlepost.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *ArticlePostMutation) ContentCleared() bool {
	_, ok := m.clearedFields[articlepost.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *ArticlePostMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, articlepost.FieldContent)
}

// SetSource sets the "source" field.
func (m *ArticlePostMutation) SetSource(s string) {
	m.source = &s
}

// Source returns the value of the "source" field in the mutation.
func (m *ArticlePostMutation) Source() (r string, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the ArticlePost entity.
// If the ArticlePost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticlePostMutation) OldSource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// ResetSource resets all changes to the "source" field.
func (m *ArticlePostMutation) ResetSource() {
	m.source = nil
}

// Where appends a list predicates to the ArticlePostMutation builder.
func (m *ArticlePostMutation) Where(ps ...predicate.ArticlePost) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ArticlePostMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ArticlePost).
func (m *ArticlePostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArticlePostMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.status != nil {
		fields = append(fields, articlepost.FieldStatus)
	}
	if m.title != nil {
		fields = append(fields, articlepost.FieldTitle)
	}
	if m.image != nil {
		fields = append(fields, articlepost.FieldImage)
	}
	if m.description != nil {
		fields = append(fields, articlepost.FieldDescription)
	}
	if m.date != nil {
		fields = append(fields, articlepost.FieldDate)
	}
	if m.link != nil {
		fields = append(fields, articlepost.FieldLink)
	}
	if m.content != nil {
		fields = append(fields, articlepost.FieldContent)
	}
	if m.source != nil {
		fields = append(fields, articlepost.FieldSource)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArticlePostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case articlepost.FieldStatus:
		return m.Status()
	case articlepost.FieldTitle:
		return m.Title()
	case articlepost.FieldImage:
		return m.Image()
	case articlepost.FieldDescription:
		return m.Description()
	case articlepost.FieldDate:
		return m.Date()
	case articlepost.FieldLink:
		return m.Link()
	case articlepost.FieldContent:
		return m.Content()
	case articlepost.FieldSource:
		return m.Source()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArticlePostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case articlepost.FieldStatus:
		return m.OldStatus(ctx)
	case articlepost.FieldTitle:
		return m.OldTitle(ctx)
	case articlepost.FieldImage:
		return m.OldImage(ctx)
	case articlepost.FieldDescription:
		return m.OldDescription(ctx)
	case articlepost.FieldDate:
		return m.OldDate(ctx)
	case articlepost.FieldLink:
		return m.OldLink(ctx)
	case articlepost.FieldContent:
		return m.OldContent(ctx)
	case articlepost.FieldSource:
		return m.OldSource(ctx)
	}
	return nil, fmt.Errorf("unknown ArticlePost field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticlePostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case articlepost.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case articlepost.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case articlepost.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case articlepost.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case articlepost.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case articlepost.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case articlepost.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case articlepost.FieldSource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	}
	return fmt.Errorf("unknown ArticlePost field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArticlePostMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArticlePostMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticlePostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ArticlePost numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArticlePostMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(articlepost.FieldDate) {
		fields = append(fields, articlepost.FieldDate)
	}
	if m.FieldCleared(articlepost.FieldContent) {
		fields = append(fields, articlepost.FieldContent)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArticlePostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArticlePostMutation) ClearField(name string) error {
	switch name {
	case articlepost.FieldDate:
		m.ClearDate()
		return nil
	case articlepost.FieldContent:
		m.ClearContent()
		return nil
	}
	return fmt.Errorf("unknown ArticlePost nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArticlePostMutation) ResetField(name string) error {
	switch name {
	case articlepost.FieldStatus:
		m.ResetStatus()
		return nil
	case articlepost.FieldTitle:
		m.ResetTitle()
		return nil
	case articlepost.FieldImage:
		m.ResetImage()
		return nil
	case articlepost.FieldDescription:
		m.ResetDescription()
		return nil
	case articlepost.FieldDate:
		m.ResetDate()
		return nil
	case articlepost.FieldLink:
		m.ResetLink()
		return nil
	case articlepost.FieldContent:
		m.ResetContent()
		return nil
	case articlepost.FieldSource:
		m.ResetSource()
		return nil
	}
	return fmt.Errorf("unknown ArticlePost field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArticlePostMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArticlePostMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArticlePostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArticlePostMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArticlePostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArticlePostMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArticlePostMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ArticlePost unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArticlePostMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ArticlePost edge %s", name)
}

// CategoriesMutation represents an operation that mutates the Categories nodes in the graph.
type CategoriesMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	article_categories *map[string]string
	media_categories   *map[string]string
	language           *string
	status             *bool
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*Categories, error)
	predicates         []predicate.Categories
}

var _ ent.Mutation = (*CategoriesMutation)(nil)

// categoriesOption allows management of the mutation configuration using functional options.
type categoriesOption func(*CategoriesMutation)

// newCategoriesMutation creates new mutation for the Categories entity.
func newCategoriesMutation(c config, op Op, opts ...categoriesOption) *CategoriesMutation {
	m := &CategoriesMutation{
		config:        c,
		op:            op,
		typ:           TypeCategories,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoriesID sets the ID field of the mutation.
func withCategoriesID(id int) categoriesOption {
	return func(m *CategoriesMutation) {
		var (
			err   error
			once  sync.Once
			value *Categories
		)
		m.oldValue = func(ctx context.Context) (*Categories, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Categories.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategories sets the old Categories of the mutation.
func withCategories(node *Categories) categoriesOption {
	return func(m *CategoriesMutation) {
		m.oldValue = func(context.Context) (*Categories, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoriesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoriesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("storage: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoriesMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoriesMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Categories.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetArticleCategories sets the "article_categories" field.
func (m *CategoriesMutation) SetArticleCategories(value map[string]string) {
	m.article_categories = &value
}

// ArticleCategories returns the value of the "article_categories" field in the mutation.
func (m *CategoriesMutation) ArticleCategories() (r map[string]string, exists bool) {
	v := m.article_categories
	if v == nil {
		return
	}
	return *v, true
}

// OldArticleCategories returns the old "article_categories" field's value of the Categories entity.
// If the Categories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoriesMutation) OldArticleCategories(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArticleCategories is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArticleCategories requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArticleCategories: %w", err)
	}
	return oldValue.ArticleCategories, nil
}

// ClearArticleCategories clears the value of the "article_categories" field.
func (m *CategoriesMutation) ClearArticleCategories() {
	m.article_categories = nil
	m.clearedFields[categories.FieldArticleCategories] = struct{}{}
}

// ArticleCategoriesCleared returns if the "article_categories" field was cleared in this mutation.
func (m *CategoriesMutation) ArticleCategoriesCleared() bool {
	_, ok := m.clearedFields[categories.FieldArticleCategories]
	return ok
}

// ResetArticleCategories resets all changes to the "article_categories" field.
func (m *CategoriesMutation) ResetArticleCategories() {
	m.article_categories = nil
	delete(m.clearedFields, categories.FieldArticleCategories)
}

// SetMediaCategories sets the "media_categories" field.
func (m *CategoriesMutation) SetMediaCategories(value map[string]string) {
	m.media_categories = &value
}

// MediaCategories returns the value of the "media_categories" field in the mutation.
func (m *CategoriesMutation) MediaCategories() (r map[string]string, exists bool) {
	v := m.media_categories
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaCategories returns the old "media_categories" field's value of the Categories entity.
// If the Categories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoriesMutation) OldMediaCategories(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMediaCategories is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMediaCategories requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaCategories: %w", err)
	}
	return oldValue.MediaCategories, nil
}

// ClearMediaCategories clears the value of the "media_categories" field.
func (m *CategoriesMutation) ClearMediaCategories() {
	m.media_categories = nil
	m.clearedFields[categories.FieldMediaCategories] = struct{}{}
}

// MediaCategoriesCleared returns if the "media_categories" field was cleared in this mutation.
func (m *CategoriesMutation) MediaCategoriesCleared() bool {
	_, ok := m.clearedFields[categories.FieldMediaCategories]
	return ok
}

// ResetMediaCategories resets all changes to the "media_categories" field.
func (m *CategoriesMutation) ResetMediaCategories() {
	m.media_categories = nil
	delete(m.clearedFields, categories.FieldMediaCategories)
}

// SetLanguage sets the "language" field.
func (m *CategoriesMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *CategoriesMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Categories entity.
// If the Categories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoriesMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *CategoriesMutation) ResetLanguage() {
	m.language = nil
}

// SetStatus sets the "status" field.
func (m *CategoriesMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *CategoriesMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Categories entity.
// If the Categories object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoriesMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *CategoriesMutation) ResetStatus() {
	m.status = nil
}

// Where appends a list predicates to the CategoriesMutation builder.
func (m *CategoriesMutation) Where(ps ...predicate.Categories) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CategoriesMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Categories).
func (m *CategoriesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoriesMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.article_categories != nil {
		fields = append(fields, categories.FieldArticleCategories)
	}
	if m.media_categories != nil {
		fields = append(fields, categories.FieldMediaCategories)
	}
	if m.language != nil {
		fields = append(fields, categories.FieldLanguage)
	}
	if m.status != nil {
		fields = append(fields, categories.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoriesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case categories.FieldArticleCategories:
		return m.ArticleCategories()
	case categories.FieldMediaCategories:
		return m.MediaCategories()
	case categories.FieldLanguage:
		return m.Language()
	case categories.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoriesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case categories.FieldArticleCategories:
		return m.OldArticleCategories(ctx)
	case categories.FieldMediaCategories:
		return m.OldMediaCategories(ctx)
	case categories.FieldLanguage:
		return m.OldLanguage(ctx)
	case categories.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Categories field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoriesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case categories.FieldArticleCategories:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArticleCategories(v)
		return nil
	case categories.FieldMediaCategories:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaCategories(v)
		return nil
	case categories.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case categories.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Categories field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoriesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoriesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoriesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Categories numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoriesMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(categories.FieldArticleCategories) {
		fields = append(fields, categories.FieldArticleCategories)
	}
	if m.FieldCleared(categories.FieldMediaCategories) {
		fields = append(fields, categories.FieldMediaCategories)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoriesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoriesMutation) ClearField(name string) error {
	switch name {
	case categories.FieldArticleCategories:
		m.ClearArticleCategories()
		return nil
	case categories.FieldMediaCategories:
		m.ClearMediaCategories()
		return nil
	}
	return fmt.Errorf("unknown Categories nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoriesMutation) ResetField(name string) error {
	switch name {
	case categories.FieldArticleCategories:
		m.ResetArticleCategories()
		return nil
	case categories.FieldMediaCategories:
		m.ResetMediaCategories()
		return nil
	case categories.FieldLanguage:
		m.ResetLanguage()
		return nil
	case categories.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Categories field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoriesMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoriesMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoriesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoriesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoriesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoriesMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoriesMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Categories unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoriesMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Categories edge %s", name)
}

// MediaPostMutation represents an operation that mutates the MediaPost nodes in the graph.
type MediaPostMutation struct {
	config
	op            Op
	typ           string
	id            *int
	status        *bool
	live          *bool
	_type         *mediapost.Type
	title         *string
	logo          *string
	source        *string
	description   *string
	image         *string
	date          *time.Time
	link          *string
	content       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MediaPost, error)
	predicates    []predicate.MediaPost
}

var _ ent.Mutation = (*MediaPostMutation)(nil)

// mediapostOption allows management of the mutation configuration using functional options.
type mediapostOption func(*MediaPostMutation)

// newMediaPostMutation creates new mutation for the MediaPost entity.
func newMediaPostMutation(c config, op Op, opts ...mediapostOption) *MediaPostMutation {
	m := &MediaPostMutation{
		config:        c,
		op:            op,
		typ:           TypeMediaPost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMediaPostID sets the ID field of the mutation.
func withMediaPostID(id int) mediapostOption {
	return func(m *MediaPostMutation) {
		var (
			err   error
			once  sync.Once
			value *MediaPost
		)
		m.oldValue = func(ctx context.Context) (*MediaPost, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MediaPost.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMediaPost sets the old MediaPost of the mutation.
func withMediaPost(node *MediaPost) mediapostOption {
	return func(m *MediaPostMutation) {
		m.oldValue = func(context.Context) (*MediaPost, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MediaPostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MediaPostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("storage: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MediaPostMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MediaPostMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MediaPost.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *MediaPostMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *MediaPostMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the MediaPost entity.
// If the MediaPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaPostMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *MediaPostMutation) ResetStatus() {
	m.status = nil
}

// SetLive sets the "live" field.
func (m *MediaPostMutation) SetLive(b bool) {
	m.live = &b
}

// Live returns the value of the "live" field in the mutation.
func (m *MediaPostMutation) Live() (r bool, exists bool) {
	v := m.live
	if v == nil {
		return
	}
	return *v, true
}

// OldLive returns the old "live" field's value of the MediaPost entity.
// If the MediaPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaPostMutation) OldLive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLive: %w", err)
	}
	return oldValue.Live, nil
}

// ResetLive resets all changes to the "live" field.
func (m *MediaPostMutation) ResetLive() {
	m.live = nil
}

// SetType sets the "type" field.
func (m *MediaPostMutation) SetType(value mediapost.Type) {
	m._type = &value
}

// GetType returns the value of the "type" field in the mutation.
func (m *MediaPostMutation) GetType() (r mediapost.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the MediaPost entity.
// If the MediaPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaPostMutation) OldType(ctx context.Context) (v mediapost.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *MediaPostMutation) ResetType() {
	m._type = nil
}

// SetTitle sets the "title" field.
func (m *MediaPostMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *MediaPostMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the MediaPost entity.
// If the MediaPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaPostMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *MediaPostMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[mediapost.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *MediaPostMutation) TitleCleared() bool {
	_, ok := m.clearedFields[mediapost.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *MediaPostMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, mediapost.FieldTitle)
}

// SetLogo sets the "logo" field.
func (m *MediaPostMutation) SetLogo(s string) {
	m.logo = &s
}

// Logo returns the value of the "logo" field in the mutation.
func (m *MediaPostMutation) Logo() (r string, exists bool) {
	v := m.logo
	if v == nil {
		return
	}
	return *v, true
}

// OldLogo returns the old "logo" field's value of the MediaPost entity.
// If the MediaPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaPostMutation) OldLogo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogo: %w", err)
	}
	return oldValue.Logo, nil
}

// ResetLogo resets all changes to the "logo" field.
func (m *MediaPostMutation) ResetLogo() {
	m.logo = nil
}

// SetSource sets the "source" field.
func (m *MediaPostMutation) SetSource(s string) {
	m.source = &s
}

// Source returns the value of the "source" field in the mutation.
func (m *MediaPostMutation) Source() (r string, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the MediaPost entity.
// If the MediaPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaPostMutation) OldSource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// ResetSource resets all changes to the "source" field.
func (m *MediaPostMutation) ResetSource() {
	m.source = nil
}

// SetDescription sets the "description" field.
func (m *MediaPostMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MediaPostMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the MediaPost entity.
// If the MediaPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaPostMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *MediaPostMutation) ResetDescription() {
	m.description = nil
}

// SetImage sets the "image" field.
func (m *MediaPostMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *MediaPostMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the MediaPost entity.
// If the MediaPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaPostMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ClearImage clears the value of the "image" field.
func (m *MediaPostMutation) ClearImage() {
	m.image = nil
	m.clearedFields[mediapost.FieldImage] = struct{}{}
}

// ImageCleared returns if the "image" field was cleared in this mutation.
func (m *MediaPostMutation) ImageCleared() bool {
	_, ok := m.clearedFields[mediapost.FieldImage]
	return ok
}

// ResetImage resets all changes to the "image" field.
func (m *MediaPostMutation) ResetImage() {
	m.image = nil
	delete(m.clearedFields, mediapost.FieldImage)
}

// SetDate sets the "date" field.
func (m *MediaPostMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *MediaPostMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the MediaPost entity.
// If the MediaPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaPostMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ClearDate clears the value of the "date" field.
func (m *MediaPostMutation) ClearDate() {
	m.date = nil
	m.clearedFields[mediapost.FieldDate] = struct{}{}
}

// DateCleared returns if the "date" field was cleared in this mutation.
func (m *MediaPostMutation) DateCleared() bool {
	_, ok := m.clearedFields[mediapost.FieldDate]
	return ok
}

// ResetDate resets all changes to the "date" field.
func (m *MediaPostMutation) ResetDate() {
	m.date = nil
	delete(m.clearedFields, mediapost.FieldDate)
}

// SetLink sets the "link" field.
func (m *MediaPostMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *MediaPostMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the MediaPost entity.
// If the MediaPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaPostMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ClearLink clears the value of the "link" field.
func (m *MediaPostMutation) ClearLink() {
	m.link = nil
	m.clearedFields[mediapost.FieldLink] = struct{}{}
}

// LinkCleared returns if the "link" field was cleared in this mutation.
func (m *MediaPostMutation) LinkCleared() bool {
	_, ok := m.clearedFields[mediapost.FieldLink]
	return ok
}

// ResetLink resets all changes to the "link" field.
func (m *MediaPostMutation) ResetLink() {
	m.link = nil
	delete(m.clearedFields, mediapost.FieldLink)
}

// SetContent sets the "content" field.
func (m *MediaPostMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *MediaPostMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the MediaPost entity.
// If the MediaPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaPostMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *MediaPostMutation) ClearContent() {
	m.content = nil
	m.clearedFields[mediapost.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *MediaPostMutation) ContentCleared() bool {
	_, ok := m.clearedFields[mediapost.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *MediaPostMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, mediapost.FieldContent)
}

// Where appends a list predicates to the MediaPostMutation builder.
func (m *MediaPostMutation) Where(ps ...predicate.MediaPost) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MediaPostMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MediaPost).
func (m *MediaPostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MediaPostMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.status != nil {
		fields = append(fields, mediapost.FieldStatus)
	}
	if m.live != nil {
		fields = append(fields, mediapost.FieldLive)
	}
	if m._type != nil {
		fields = append(fields, mediapost.FieldType)
	}
	if m.title != nil {
		fields = append(fields, mediapost.FieldTitle)
	}
	if m.logo != nil {
		fields = append(fields, mediapost.FieldLogo)
	}
	if m.source != nil {
		fields = append(fields, mediapost.FieldSource)
	}
	if m.description != nil {
		fields = append(fields, mediapost.FieldDescription)
	}
	if m.image != nil {
		fields = append(fields, mediapost.FieldImage)
	}
	if m.date != nil {
		fields = append(fields, mediapost.FieldDate)
	}
	if m.link != nil {
		fields = append(fields, mediapost.FieldLink)
	}
	if m.content != nil {
		fields = append(fields, mediapost.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MediaPostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mediapost.FieldStatus:
		return m.Status()
	case mediapost.FieldLive:
		return m.Live()
	case mediapost.FieldType:
		return m.GetType()
	case mediapost.FieldTitle:
		return m.Title()
	case mediapost.FieldLogo:
		return m.Logo()
	case mediapost.FieldSource:
		return m.Source()
	case mediapost.FieldDescription:
		return m.Description()
	case mediapost.FieldImage:
		return m.Image()
	case mediapost.FieldDate:
		return m.Date()
	case mediapost.FieldLink:
		return m.Link()
	case mediapost.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MediaPostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mediapost.FieldStatus:
		return m.OldStatus(ctx)
	case mediapost.FieldLive:
		return m.OldLive(ctx)
	case mediapost.FieldType:
		return m.OldType(ctx)
	case mediapost.FieldTitle:
		return m.OldTitle(ctx)
	case mediapost.FieldLogo:
		return m.OldLogo(ctx)
	case mediapost.FieldSource:
		return m.OldSource(ctx)
	case mediapost.FieldDescription:
		return m.OldDescription(ctx)
	case mediapost.FieldImage:
		return m.OldImage(ctx)
	case mediapost.FieldDate:
		return m.OldDate(ctx)
	case mediapost.FieldLink:
		return m.OldLink(ctx)
	case mediapost.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown MediaPost field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaPostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mediapost.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case mediapost.FieldLive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLive(v)
		return nil
	case mediapost.FieldType:
		v, ok := value.(mediapost.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case mediapost.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case mediapost.FieldLogo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogo(v)
		return nil
	case mediapost.FieldSource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	case mediapost.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case mediapost.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case mediapost.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case mediapost.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case mediapost.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown MediaPost field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MediaPostMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MediaPostMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaPostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MediaPost numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MediaPostMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(mediapost.FieldTitle) {
		fields = append(fields, mediapost.FieldTitle)
	}
	if m.FieldCleared(mediapost.FieldImage) {
		fields = append(fields, mediapost.FieldImage)
	}
	if m.FieldCleared(mediapost.FieldDate) {
		fields = append(fields, mediapost.FieldDate)
	}
	if m.FieldCleared(mediapost.FieldLink) {
		fields = append(fields, mediapost.FieldLink)
	}
	if m.FieldCleared(mediapost.FieldContent) {
		fields = append(fields, mediapost.FieldContent)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MediaPostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MediaPostMutation) ClearField(name string) error {
	switch name {
	case mediapost.FieldTitle:
		m.ClearTitle()
		return nil
	case mediapost.FieldImage:
		m.ClearImage()
		return nil
	case mediapost.FieldDate:
		m.ClearDate()
		return nil
	case mediapost.FieldLink:
		m.ClearLink()
		return nil
	case mediapost.FieldContent:
		m.ClearContent()
		return nil
	}
	return fmt.Errorf("unknown MediaPost nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MediaPostMutation) ResetField(name string) error {
	switch name {
	case mediapost.FieldStatus:
		m.ResetStatus()
		return nil
	case mediapost.FieldLive:
		m.ResetLive()
		return nil
	case mediapost.FieldType:
		m.ResetType()
		return nil
	case mediapost.FieldTitle:
		m.ResetTitle()
		return nil
	case mediapost.FieldLogo:
		m.ResetLogo()
		return nil
	case mediapost.FieldSource:
		m.ResetSource()
		return nil
	case mediapost.FieldDescription:
		m.ResetDescription()
		return nil
	case mediapost.FieldImage:
		m.ResetImage()
		return nil
	case mediapost.FieldDate:
		m.ResetDate()
		return nil
	case mediapost.FieldLink:
		m.ResetLink()
		return nil
	case mediapost.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown MediaPost field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MediaPostMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MediaPostMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MediaPostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MediaPostMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MediaPostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MediaPostMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MediaPostMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MediaPost unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MediaPostMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MediaPost edge %s", name)
}

// SourceMutation represents an operation that mutates the Source nodes in the graph.
type SourceMutation struct {
	config
	op                             Op
	typ                            string
	id                             *int
	article_featured_post_selector **custom.SourcePostSelector
	article_featured_post_url      *string
	article_category_post_selector **custom.SourcePostSelector
	article_category_post_url      *string
	article_content_selector       **custom.SourcePostSelector
	media_featured_post_selector   **custom.SourcePostSelector
	media_featured_post_url        *string
	media_category_post_selector   **custom.SourcePostSelector
	media_category_post_url        *string
	media_content_selector         **custom.SourcePostSelector
	article_categories             *map[string]string
	media_categories               *map[string]string
	description                    *string
	language                       *string
	country                        *string
	status                         *bool
	logo                           *string
	name                           *string
	url                            *string
	clearedFields                  map[string]struct{}
	done                           bool
	oldValue                       func(context.Context) (*Source, error)
	predicates                     []predicate.Source
}

var _ ent.Mutation = (*SourceMutation)(nil)

// sourceOption allows management of the mutation configuration using functional options.
type sourceOption func(*SourceMutation)

// newSourceMutation creates new mutation for the Source entity.
func newSourceMutation(c config, op Op, opts ...sourceOption) *SourceMutation {
	m := &SourceMutation{
		config:        c,
		op:            op,
		typ:           TypeSource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSourceID sets the ID field of the mutation.
func withSourceID(id int) sourceOption {
	return func(m *SourceMutation) {
		var (
			err   error
			once  sync.Once
			value *Source
		)
		m.oldValue = func(ctx context.Context) (*Source, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Source.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSource sets the old Source of the mutation.
func withSource(node *Source) sourceOption {
	return func(m *SourceMutation) {
		m.oldValue = func(context.Context) (*Source, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("storage: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Source.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetArticleFeaturedPostSelector sets the "article_featured_post_selector" field.
func (m *SourceMutation) SetArticleFeaturedPostSelector(cps *custom.SourcePostSelector) {
	m.article_featured_post_selector = &cps
}

// ArticleFeaturedPostSelector returns the value of the "article_featured_post_selector" field in the mutation.
func (m *SourceMutation) ArticleFeaturedPostSelector() (r *custom.SourcePostSelector, exists bool) {
	v := m.article_featured_post_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldArticleFeaturedPostSelector returns the old "article_featured_post_selector" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldArticleFeaturedPostSelector(ctx context.Context) (v *custom.SourcePostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArticleFeaturedPostSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArticleFeaturedPostSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArticleFeaturedPostSelector: %w", err)
	}
	return oldValue.ArticleFeaturedPostSelector, nil
}

// ClearArticleFeaturedPostSelector clears the value of the "article_featured_post_selector" field.
func (m *SourceMutation) ClearArticleFeaturedPostSelector() {
	m.article_featured_post_selector = nil
	m.clearedFields[source.FieldArticleFeaturedPostSelector] = struct{}{}
}

// ArticleFeaturedPostSelectorCleared returns if the "article_featured_post_selector" field was cleared in this mutation.
func (m *SourceMutation) ArticleFeaturedPostSelectorCleared() bool {
	_, ok := m.clearedFields[source.FieldArticleFeaturedPostSelector]
	return ok
}

// ResetArticleFeaturedPostSelector resets all changes to the "article_featured_post_selector" field.
func (m *SourceMutation) ResetArticleFeaturedPostSelector() {
	m.article_featured_post_selector = nil
	delete(m.clearedFields, source.FieldArticleFeaturedPostSelector)
}

// SetArticleFeaturedPostURL sets the "article_featured_post_url" field.
func (m *SourceMutation) SetArticleFeaturedPostURL(s string) {
	m.article_featured_post_url = &s
}

// ArticleFeaturedPostURL returns the value of the "article_featured_post_url" field in the mutation.
func (m *SourceMutation) ArticleFeaturedPostURL() (r string, exists bool) {
	v := m.article_featured_post_url
	if v == nil {
		return
	}
	return *v, true
}

// OldArticleFeaturedPostURL returns the old "article_featured_post_url" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldArticleFeaturedPostURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArticleFeaturedPostURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArticleFeaturedPostURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArticleFeaturedPostURL: %w", err)
	}
	return oldValue.ArticleFeaturedPostURL, nil
}

// ClearArticleFeaturedPostURL clears the value of the "article_featured_post_url" field.
func (m *SourceMutation) ClearArticleFeaturedPostURL() {
	m.article_featured_post_url = nil
	m.clearedFields[source.FieldArticleFeaturedPostURL] = struct{}{}
}

// ArticleFeaturedPostURLCleared returns if the "article_featured_post_url" field was cleared in this mutation.
func (m *SourceMutation) ArticleFeaturedPostURLCleared() bool {
	_, ok := m.clearedFields[source.FieldArticleFeaturedPostURL]
	return ok
}

// ResetArticleFeaturedPostURL resets all changes to the "article_featured_post_url" field.
func (m *SourceMutation) ResetArticleFeaturedPostURL() {
	m.article_featured_post_url = nil
	delete(m.clearedFields, source.FieldArticleFeaturedPostURL)
}

// SetArticleCategoryPostSelector sets the "article_category_post_selector" field.
func (m *SourceMutation) SetArticleCategoryPostSelector(cps *custom.SourcePostSelector) {
	m.article_category_post_selector = &cps
}

// ArticleCategoryPostSelector returns the value of the "article_category_post_selector" field in the mutation.
func (m *SourceMutation) ArticleCategoryPostSelector() (r *custom.SourcePostSelector, exists bool) {
	v := m.article_category_post_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldArticleCategoryPostSelector returns the old "article_category_post_selector" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldArticleCategoryPostSelector(ctx context.Context) (v *custom.SourcePostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArticleCategoryPostSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArticleCategoryPostSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArticleCategoryPostSelector: %w", err)
	}
	return oldValue.ArticleCategoryPostSelector, nil
}

// ClearArticleCategoryPostSelector clears the value of the "article_category_post_selector" field.
func (m *SourceMutation) ClearArticleCategoryPostSelector() {
	m.article_category_post_selector = nil
	m.clearedFields[source.FieldArticleCategoryPostSelector] = struct{}{}
}

// ArticleCategoryPostSelectorCleared returns if the "article_category_post_selector" field was cleared in this mutation.
func (m *SourceMutation) ArticleCategoryPostSelectorCleared() bool {
	_, ok := m.clearedFields[source.FieldArticleCategoryPostSelector]
	return ok
}

// ResetArticleCategoryPostSelector resets all changes to the "article_category_post_selector" field.
func (m *SourceMutation) ResetArticleCategoryPostSelector() {
	m.article_category_post_selector = nil
	delete(m.clearedFields, source.FieldArticleCategoryPostSelector)
}

// SetArticleCategoryPostURL sets the "article_category_post_url" field.
func (m *SourceMutation) SetArticleCategoryPostURL(s string) {
	m.article_category_post_url = &s
}

// ArticleCategoryPostURL returns the value of the "article_category_post_url" field in the mutation.
func (m *SourceMutation) ArticleCategoryPostURL() (r string, exists bool) {
	v := m.article_category_post_url
	if v == nil {
		return
	}
	return *v, true
}

// OldArticleCategoryPostURL returns the old "article_category_post_url" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldArticleCategoryPostURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArticleCategoryPostURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArticleCategoryPostURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArticleCategoryPostURL: %w", err)
	}
	return oldValue.ArticleCategoryPostURL, nil
}

// ClearArticleCategoryPostURL clears the value of the "article_category_post_url" field.
func (m *SourceMutation) ClearArticleCategoryPostURL() {
	m.article_category_post_url = nil
	m.clearedFields[source.FieldArticleCategoryPostURL] = struct{}{}
}

// ArticleCategoryPostURLCleared returns if the "article_category_post_url" field was cleared in this mutation.
func (m *SourceMutation) ArticleCategoryPostURLCleared() bool {
	_, ok := m.clearedFields[source.FieldArticleCategoryPostURL]
	return ok
}

// ResetArticleCategoryPostURL resets all changes to the "article_category_post_url" field.
func (m *SourceMutation) ResetArticleCategoryPostURL() {
	m.article_category_post_url = nil
	delete(m.clearedFields, source.FieldArticleCategoryPostURL)
}

// SetArticleContentSelector sets the "article_content_selector" field.
func (m *SourceMutation) SetArticleContentSelector(cps *custom.SourcePostSelector) {
	m.article_content_selector = &cps
}

// ArticleContentSelector returns the value of the "article_content_selector" field in the mutation.
func (m *SourceMutation) ArticleContentSelector() (r *custom.SourcePostSelector, exists bool) {
	v := m.article_content_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldArticleContentSelector returns the old "article_content_selector" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldArticleContentSelector(ctx context.Context) (v *custom.SourcePostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArticleContentSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArticleContentSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArticleContentSelector: %w", err)
	}
	return oldValue.ArticleContentSelector, nil
}

// ClearArticleContentSelector clears the value of the "article_content_selector" field.
func (m *SourceMutation) ClearArticleContentSelector() {
	m.article_content_selector = nil
	m.clearedFields[source.FieldArticleContentSelector] = struct{}{}
}

// ArticleContentSelectorCleared returns if the "article_content_selector" field was cleared in this mutation.
func (m *SourceMutation) ArticleContentSelectorCleared() bool {
	_, ok := m.clearedFields[source.FieldArticleContentSelector]
	return ok
}

// ResetArticleContentSelector resets all changes to the "article_content_selector" field.
func (m *SourceMutation) ResetArticleContentSelector() {
	m.article_content_selector = nil
	delete(m.clearedFields, source.FieldArticleContentSelector)
}

// SetMediaFeaturedPostSelector sets the "media_featured_post_selector" field.
func (m *SourceMutation) SetMediaFeaturedPostSelector(cps *custom.SourcePostSelector) {
	m.media_featured_post_selector = &cps
}

// MediaFeaturedPostSelector returns the value of the "media_featured_post_selector" field in the mutation.
func (m *SourceMutation) MediaFeaturedPostSelector() (r *custom.SourcePostSelector, exists bool) {
	v := m.media_featured_post_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaFeaturedPostSelector returns the old "media_featured_post_selector" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldMediaFeaturedPostSelector(ctx context.Context) (v *custom.SourcePostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMediaFeaturedPostSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMediaFeaturedPostSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaFeaturedPostSelector: %w", err)
	}
	return oldValue.MediaFeaturedPostSelector, nil
}

// ClearMediaFeaturedPostSelector clears the value of the "media_featured_post_selector" field.
func (m *SourceMutation) ClearMediaFeaturedPostSelector() {
	m.media_featured_post_selector = nil
	m.clearedFields[source.FieldMediaFeaturedPostSelector] = struct{}{}
}

// MediaFeaturedPostSelectorCleared returns if the "media_featured_post_selector" field was cleared in this mutation.
func (m *SourceMutation) MediaFeaturedPostSelectorCleared() bool {
	_, ok := m.clearedFields[source.FieldMediaFeaturedPostSelector]
	return ok
}

// ResetMediaFeaturedPostSelector resets all changes to the "media_featured_post_selector" field.
func (m *SourceMutation) ResetMediaFeaturedPostSelector() {
	m.media_featured_post_selector = nil
	delete(m.clearedFields, source.FieldMediaFeaturedPostSelector)
}

// SetMediaFeaturedPostURL sets the "media_featured_post_url" field.
func (m *SourceMutation) SetMediaFeaturedPostURL(s string) {
	m.media_featured_post_url = &s
}

// MediaFeaturedPostURL returns the value of the "media_featured_post_url" field in the mutation.
func (m *SourceMutation) MediaFeaturedPostURL() (r string, exists bool) {
	v := m.media_featured_post_url
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaFeaturedPostURL returns the old "media_featured_post_url" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldMediaFeaturedPostURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMediaFeaturedPostURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMediaFeaturedPostURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaFeaturedPostURL: %w", err)
	}
	return oldValue.MediaFeaturedPostURL, nil
}

// ClearMediaFeaturedPostURL clears the value of the "media_featured_post_url" field.
func (m *SourceMutation) ClearMediaFeaturedPostURL() {
	m.media_featured_post_url = nil
	m.clearedFields[source.FieldMediaFeaturedPostURL] = struct{}{}
}

// MediaFeaturedPostURLCleared returns if the "media_featured_post_url" field was cleared in this mutation.
func (m *SourceMutation) MediaFeaturedPostURLCleared() bool {
	_, ok := m.clearedFields[source.FieldMediaFeaturedPostURL]
	return ok
}

// ResetMediaFeaturedPostURL resets all changes to the "media_featured_post_url" field.
func (m *SourceMutation) ResetMediaFeaturedPostURL() {
	m.media_featured_post_url = nil
	delete(m.clearedFields, source.FieldMediaFeaturedPostURL)
}

// SetMediaCategoryPostSelector sets the "media_category_post_selector" field.
func (m *SourceMutation) SetMediaCategoryPostSelector(cps *custom.SourcePostSelector) {
	m.media_category_post_selector = &cps
}

// MediaCategoryPostSelector returns the value of the "media_category_post_selector" field in the mutation.
func (m *SourceMutation) MediaCategoryPostSelector() (r *custom.SourcePostSelector, exists bool) {
	v := m.media_category_post_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaCategoryPostSelector returns the old "media_category_post_selector" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldMediaCategoryPostSelector(ctx context.Context) (v *custom.SourcePostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMediaCategoryPostSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMediaCategoryPostSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaCategoryPostSelector: %w", err)
	}
	return oldValue.MediaCategoryPostSelector, nil
}

// ClearMediaCategoryPostSelector clears the value of the "media_category_post_selector" field.
func (m *SourceMutation) ClearMediaCategoryPostSelector() {
	m.media_category_post_selector = nil
	m.clearedFields[source.FieldMediaCategoryPostSelector] = struct{}{}
}

// MediaCategoryPostSelectorCleared returns if the "media_category_post_selector" field was cleared in this mutation.
func (m *SourceMutation) MediaCategoryPostSelectorCleared() bool {
	_, ok := m.clearedFields[source.FieldMediaCategoryPostSelector]
	return ok
}

// ResetMediaCategoryPostSelector resets all changes to the "media_category_post_selector" field.
func (m *SourceMutation) ResetMediaCategoryPostSelector() {
	m.media_category_post_selector = nil
	delete(m.clearedFields, source.FieldMediaCategoryPostSelector)
}

// SetMediaCategoryPostURL sets the "media_category_post_url" field.
func (m *SourceMutation) SetMediaCategoryPostURL(s string) {
	m.media_category_post_url = &s
}

// MediaCategoryPostURL returns the value of the "media_category_post_url" field in the mutation.
func (m *SourceMutation) MediaCategoryPostURL() (r string, exists bool) {
	v := m.media_category_post_url
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaCategoryPostURL returns the old "media_category_post_url" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldMediaCategoryPostURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMediaCategoryPostURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMediaCategoryPostURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaCategoryPostURL: %w", err)
	}
	return oldValue.MediaCategoryPostURL, nil
}

// ClearMediaCategoryPostURL clears the value of the "media_category_post_url" field.
func (m *SourceMutation) ClearMediaCategoryPostURL() {
	m.media_category_post_url = nil
	m.clearedFields[source.FieldMediaCategoryPostURL] = struct{}{}
}

// MediaCategoryPostURLCleared returns if the "media_category_post_url" field was cleared in this mutation.
func (m *SourceMutation) MediaCategoryPostURLCleared() bool {
	_, ok := m.clearedFields[source.FieldMediaCategoryPostURL]
	return ok
}

// ResetMediaCategoryPostURL resets all changes to the "media_category_post_url" field.
func (m *SourceMutation) ResetMediaCategoryPostURL() {
	m.media_category_post_url = nil
	delete(m.clearedFields, source.FieldMediaCategoryPostURL)
}

// SetMediaContentSelector sets the "media_content_selector" field.
func (m *SourceMutation) SetMediaContentSelector(cps *custom.SourcePostSelector) {
	m.media_content_selector = &cps
}

// MediaContentSelector returns the value of the "media_content_selector" field in the mutation.
func (m *SourceMutation) MediaContentSelector() (r *custom.SourcePostSelector, exists bool) {
	v := m.media_content_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaContentSelector returns the old "media_content_selector" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldMediaContentSelector(ctx context.Context) (v *custom.SourcePostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMediaContentSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMediaContentSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaContentSelector: %w", err)
	}
	return oldValue.MediaContentSelector, nil
}

// ClearMediaContentSelector clears the value of the "media_content_selector" field.
func (m *SourceMutation) ClearMediaContentSelector() {
	m.media_content_selector = nil
	m.clearedFields[source.FieldMediaContentSelector] = struct{}{}
}

// MediaContentSelectorCleared returns if the "media_content_selector" field was cleared in this mutation.
func (m *SourceMutation) MediaContentSelectorCleared() bool {
	_, ok := m.clearedFields[source.FieldMediaContentSelector]
	return ok
}

// ResetMediaContentSelector resets all changes to the "media_content_selector" field.
func (m *SourceMutation) ResetMediaContentSelector() {
	m.media_content_selector = nil
	delete(m.clearedFields, source.FieldMediaContentSelector)
}

// SetArticleCategories sets the "article_categories" field.
func (m *SourceMutation) SetArticleCategories(value map[string]string) {
	m.article_categories = &value
}

// ArticleCategories returns the value of the "article_categories" field in the mutation.
func (m *SourceMutation) ArticleCategories() (r map[string]string, exists bool) {
	v := m.article_categories
	if v == nil {
		return
	}
	return *v, true
}

// OldArticleCategories returns the old "article_categories" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldArticleCategories(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArticleCategories is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArticleCategories requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArticleCategories: %w", err)
	}
	return oldValue.ArticleCategories, nil
}

// ClearArticleCategories clears the value of the "article_categories" field.
func (m *SourceMutation) ClearArticleCategories() {
	m.article_categories = nil
	m.clearedFields[source.FieldArticleCategories] = struct{}{}
}

// ArticleCategoriesCleared returns if the "article_categories" field was cleared in this mutation.
func (m *SourceMutation) ArticleCategoriesCleared() bool {
	_, ok := m.clearedFields[source.FieldArticleCategories]
	return ok
}

// ResetArticleCategories resets all changes to the "article_categories" field.
func (m *SourceMutation) ResetArticleCategories() {
	m.article_categories = nil
	delete(m.clearedFields, source.FieldArticleCategories)
}

// SetMediaCategories sets the "media_categories" field.
func (m *SourceMutation) SetMediaCategories(value map[string]string) {
	m.media_categories = &value
}

// MediaCategories returns the value of the "media_categories" field in the mutation.
func (m *SourceMutation) MediaCategories() (r map[string]string, exists bool) {
	v := m.media_categories
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaCategories returns the old "media_categories" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldMediaCategories(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMediaCategories is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMediaCategories requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaCategories: %w", err)
	}
	return oldValue.MediaCategories, nil
}

// ClearMediaCategories clears the value of the "media_categories" field.
func (m *SourceMutation) ClearMediaCategories() {
	m.media_categories = nil
	m.clearedFields[source.FieldMediaCategories] = struct{}{}
}

// MediaCategoriesCleared returns if the "media_categories" field was cleared in this mutation.
func (m *SourceMutation) MediaCategoriesCleared() bool {
	_, ok := m.clearedFields[source.FieldMediaCategories]
	return ok
}

// ResetMediaCategories resets all changes to the "media_categories" field.
func (m *SourceMutation) ResetMediaCategories() {
	m.media_categories = nil
	delete(m.clearedFields, source.FieldMediaCategories)
}

// SetDescription sets the "description" field.
func (m *SourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *SourceMutation) ResetDescription() {
	m.description = nil
}

// SetLanguage sets the "language" field.
func (m *SourceMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *SourceMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *SourceMutation) ResetLanguage() {
	m.language = nil
}

// SetCountry sets the "country" field.
func (m *SourceMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *SourceMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *SourceMutation) ResetCountry() {
	m.country = nil
}

// SetStatus sets the "status" field.
func (m *SourceMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *SourceMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SourceMutation) ResetStatus() {
	m.status = nil
}

// SetLogo sets the "logo" field.
func (m *SourceMutation) SetLogo(s string) {
	m.logo = &s
}

// Logo returns the value of the "logo" field in the mutation.
func (m *SourceMutation) Logo() (r string, exists bool) {
	v := m.logo
	if v == nil {
		return
	}
	return *v, true
}

// OldLogo returns the old "logo" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldLogo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogo: %w", err)
	}
	return oldValue.Logo, nil
}

// ResetLogo resets all changes to the "logo" field.
func (m *SourceMutation) ResetLogo() {
	m.logo = nil
}

// SetName sets the "name" field.
func (m *SourceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SourceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SourceMutation) ResetName() {
	m.name = nil
}

// SetURL sets the "url" field.
func (m *SourceMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *SourceMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *SourceMutation) ResetURL() {
	m.url = nil
}

// Where appends a list predicates to the SourceMutation builder.
func (m *SourceMutation) Where(ps ...predicate.Source) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SourceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Source).
func (m *SourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SourceMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.article_featured_post_selector != nil {
		fields = append(fields, source.FieldArticleFeaturedPostSelector)
	}
	if m.article_featured_post_url != nil {
		fields = append(fields, source.FieldArticleFeaturedPostURL)
	}
	if m.article_category_post_selector != nil {
		fields = append(fields, source.FieldArticleCategoryPostSelector)
	}
	if m.article_category_post_url != nil {
		fields = append(fields, source.FieldArticleCategoryPostURL)
	}
	if m.article_content_selector != nil {
		fields = append(fields, source.FieldArticleContentSelector)
	}
	if m.media_featured_post_selector != nil {
		fields = append(fields, source.FieldMediaFeaturedPostSelector)
	}
	if m.media_featured_post_url != nil {
		fields = append(fields, source.FieldMediaFeaturedPostURL)
	}
	if m.media_category_post_selector != nil {
		fields = append(fields, source.FieldMediaCategoryPostSelector)
	}
	if m.media_category_post_url != nil {
		fields = append(fields, source.FieldMediaCategoryPostURL)
	}
	if m.media_content_selector != nil {
		fields = append(fields, source.FieldMediaContentSelector)
	}
	if m.article_categories != nil {
		fields = append(fields, source.FieldArticleCategories)
	}
	if m.media_categories != nil {
		fields = append(fields, source.FieldMediaCategories)
	}
	if m.description != nil {
		fields = append(fields, source.FieldDescription)
	}
	if m.language != nil {
		fields = append(fields, source.FieldLanguage)
	}
	if m.country != nil {
		fields = append(fields, source.FieldCountry)
	}
	if m.status != nil {
		fields = append(fields, source.FieldStatus)
	}
	if m.logo != nil {
		fields = append(fields, source.FieldLogo)
	}
	if m.name != nil {
		fields = append(fields, source.FieldName)
	}
	if m.url != nil {
		fields = append(fields, source.FieldURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case source.FieldArticleFeaturedPostSelector:
		return m.ArticleFeaturedPostSelector()
	case source.FieldArticleFeaturedPostURL:
		return m.ArticleFeaturedPostURL()
	case source.FieldArticleCategoryPostSelector:
		return m.ArticleCategoryPostSelector()
	case source.FieldArticleCategoryPostURL:
		return m.ArticleCategoryPostURL()
	case source.FieldArticleContentSelector:
		return m.ArticleContentSelector()
	case source.FieldMediaFeaturedPostSelector:
		return m.MediaFeaturedPostSelector()
	case source.FieldMediaFeaturedPostURL:
		return m.MediaFeaturedPostURL()
	case source.FieldMediaCategoryPostSelector:
		return m.MediaCategoryPostSelector()
	case source.FieldMediaCategoryPostURL:
		return m.MediaCategoryPostURL()
	case source.FieldMediaContentSelector:
		return m.MediaContentSelector()
	case source.FieldArticleCategories:
		return m.ArticleCategories()
	case source.FieldMediaCategories:
		return m.MediaCategories()
	case source.FieldDescription:
		return m.Description()
	case source.FieldLanguage:
		return m.Language()
	case source.FieldCountry:
		return m.Country()
	case source.FieldStatus:
		return m.Status()
	case source.FieldLogo:
		return m.Logo()
	case source.FieldName:
		return m.Name()
	case source.FieldURL:
		return m.URL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case source.FieldArticleFeaturedPostSelector:
		return m.OldArticleFeaturedPostSelector(ctx)
	case source.FieldArticleFeaturedPostURL:
		return m.OldArticleFeaturedPostURL(ctx)
	case source.FieldArticleCategoryPostSelector:
		return m.OldArticleCategoryPostSelector(ctx)
	case source.FieldArticleCategoryPostURL:
		return m.OldArticleCategoryPostURL(ctx)
	case source.FieldArticleContentSelector:
		return m.OldArticleContentSelector(ctx)
	case source.FieldMediaFeaturedPostSelector:
		return m.OldMediaFeaturedPostSelector(ctx)
	case source.FieldMediaFeaturedPostURL:
		return m.OldMediaFeaturedPostURL(ctx)
	case source.FieldMediaCategoryPostSelector:
		return m.OldMediaCategoryPostSelector(ctx)
	case source.FieldMediaCategoryPostURL:
		return m.OldMediaCategoryPostURL(ctx)
	case source.FieldMediaContentSelector:
		return m.OldMediaContentSelector(ctx)
	case source.FieldArticleCategories:
		return m.OldArticleCategories(ctx)
	case source.FieldMediaCategories:
		return m.OldMediaCategories(ctx)
	case source.FieldDescription:
		return m.OldDescription(ctx)
	case source.FieldLanguage:
		return m.OldLanguage(ctx)
	case source.FieldCountry:
		return m.OldCountry(ctx)
	case source.FieldStatus:
		return m.OldStatus(ctx)
	case source.FieldLogo:
		return m.OldLogo(ctx)
	case source.FieldName:
		return m.OldName(ctx)
	case source.FieldURL:
		return m.OldURL(ctx)
	}
	return nil, fmt.Errorf("unknown Source field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case source.FieldArticleFeaturedPostSelector:
		v, ok := value.(*custom.SourcePostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArticleFeaturedPostSelector(v)
		return nil
	case source.FieldArticleFeaturedPostURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArticleFeaturedPostURL(v)
		return nil
	case source.FieldArticleCategoryPostSelector:
		v, ok := value.(*custom.SourcePostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArticleCategoryPostSelector(v)
		return nil
	case source.FieldArticleCategoryPostURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArticleCategoryPostURL(v)
		return nil
	case source.FieldArticleContentSelector:
		v, ok := value.(*custom.SourcePostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArticleContentSelector(v)
		return nil
	case source.FieldMediaFeaturedPostSelector:
		v, ok := value.(*custom.SourcePostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaFeaturedPostSelector(v)
		return nil
	case source.FieldMediaFeaturedPostURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaFeaturedPostURL(v)
		return nil
	case source.FieldMediaCategoryPostSelector:
		v, ok := value.(*custom.SourcePostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaCategoryPostSelector(v)
		return nil
	case source.FieldMediaCategoryPostURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaCategoryPostURL(v)
		return nil
	case source.FieldMediaContentSelector:
		v, ok := value.(*custom.SourcePostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaContentSelector(v)
		return nil
	case source.FieldArticleCategories:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArticleCategories(v)
		return nil
	case source.FieldMediaCategories:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaCategories(v)
		return nil
	case source.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case source.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case source.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case source.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case source.FieldLogo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogo(v)
		return nil
	case source.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case source.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	}
	return fmt.Errorf("unknown Source field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Source numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(source.FieldArticleFeaturedPostSelector) {
		fields = append(fields, source.FieldArticleFeaturedPostSelector)
	}
	if m.FieldCleared(source.FieldArticleFeaturedPostURL) {
		fields = append(fields, source.FieldArticleFeaturedPostURL)
	}
	if m.FieldCleared(source.FieldArticleCategoryPostSelector) {
		fields = append(fields, source.FieldArticleCategoryPostSelector)
	}
	if m.FieldCleared(source.FieldArticleCategoryPostURL) {
		fields = append(fields, source.FieldArticleCategoryPostURL)
	}
	if m.FieldCleared(source.FieldArticleContentSelector) {
		fields = append(fields, source.FieldArticleContentSelector)
	}
	if m.FieldCleared(source.FieldMediaFeaturedPostSelector) {
		fields = append(fields, source.FieldMediaFeaturedPostSelector)
	}
	if m.FieldCleared(source.FieldMediaFeaturedPostURL) {
		fields = append(fields, source.FieldMediaFeaturedPostURL)
	}
	if m.FieldCleared(source.FieldMediaCategoryPostSelector) {
		fields = append(fields, source.FieldMediaCategoryPostSelector)
	}
	if m.FieldCleared(source.FieldMediaCategoryPostURL) {
		fields = append(fields, source.FieldMediaCategoryPostURL)
	}
	if m.FieldCleared(source.FieldMediaContentSelector) {
		fields = append(fields, source.FieldMediaContentSelector)
	}
	if m.FieldCleared(source.FieldArticleCategories) {
		fields = append(fields, source.FieldArticleCategories)
	}
	if m.FieldCleared(source.FieldMediaCategories) {
		fields = append(fields, source.FieldMediaCategories)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SourceMutation) ClearField(name string) error {
	switch name {
	case source.FieldArticleFeaturedPostSelector:
		m.ClearArticleFeaturedPostSelector()
		return nil
	case source.FieldArticleFeaturedPostURL:
		m.ClearArticleFeaturedPostURL()
		return nil
	case source.FieldArticleCategoryPostSelector:
		m.ClearArticleCategoryPostSelector()
		return nil
	case source.FieldArticleCategoryPostURL:
		m.ClearArticleCategoryPostURL()
		return nil
	case source.FieldArticleContentSelector:
		m.ClearArticleContentSelector()
		return nil
	case source.FieldMediaFeaturedPostSelector:
		m.ClearMediaFeaturedPostSelector()
		return nil
	case source.FieldMediaFeaturedPostURL:
		m.ClearMediaFeaturedPostURL()
		return nil
	case source.FieldMediaCategoryPostSelector:
		m.ClearMediaCategoryPostSelector()
		return nil
	case source.FieldMediaCategoryPostURL:
		m.ClearMediaCategoryPostURL()
		return nil
	case source.FieldMediaContentSelector:
		m.ClearMediaContentSelector()
		return nil
	case source.FieldArticleCategories:
		m.ClearArticleCategories()
		return nil
	case source.FieldMediaCategories:
		m.ClearMediaCategories()
		return nil
	}
	return fmt.Errorf("unknown Source nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SourceMutation) ResetField(name string) error {
	switch name {
	case source.FieldArticleFeaturedPostSelector:
		m.ResetArticleFeaturedPostSelector()
		return nil
	case source.FieldArticleFeaturedPostURL:
		m.ResetArticleFeaturedPostURL()
		return nil
	case source.FieldArticleCategoryPostSelector:
		m.ResetArticleCategoryPostSelector()
		return nil
	case source.FieldArticleCategoryPostURL:
		m.ResetArticleCategoryPostURL()
		return nil
	case source.FieldArticleContentSelector:
		m.ResetArticleContentSelector()
		return nil
	case source.FieldMediaFeaturedPostSelector:
		m.ResetMediaFeaturedPostSelector()
		return nil
	case source.FieldMediaFeaturedPostURL:
		m.ResetMediaFeaturedPostURL()
		return nil
	case source.FieldMediaCategoryPostSelector:
		m.ResetMediaCategoryPostSelector()
		return nil
	case source.FieldMediaCategoryPostURL:
		m.ResetMediaCategoryPostURL()
		return nil
	case source.FieldMediaContentSelector:
		m.ResetMediaContentSelector()
		return nil
	case source.FieldArticleCategories:
		m.ResetArticleCategories()
		return nil
	case source.FieldMediaCategories:
		m.ResetMediaCategories()
		return nil
	case source.FieldDescription:
		m.ResetDescription()
		return nil
	case source.FieldLanguage:
		m.ResetLanguage()
		return nil
	case source.FieldCountry:
		m.ResetCountry()
		return nil
	case source.FieldStatus:
		m.ResetStatus()
		return nil
	case source.FieldLogo:
		m.ResetLogo()
		return nil
	case source.FieldName:
		m.ResetName()
		return nil
	case source.FieldURL:
		m.ResetURL()
		return nil
	}
	return fmt.Errorf("unknown Source field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SourceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SourceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SourceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Source unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SourceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Source edge %s", name)
}
