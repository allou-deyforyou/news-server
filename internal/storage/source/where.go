// Code generated by entc, DO NOT EDIT.

package source

import (
	"news/internal/storage/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ArticleFeaturedPostURL applies equality check predicate on the "article_featured_post_url" field. It's identical to ArticleFeaturedPostURLEQ.
func ArticleFeaturedPostURL(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArticleFeaturedPostURL), v))
	})
}

// ArticleCategoryPostURL applies equality check predicate on the "article_category_post_url" field. It's identical to ArticleCategoryPostURLEQ.
func ArticleCategoryPostURL(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArticleCategoryPostURL), v))
	})
}

// MediaFeaturedPostURL applies equality check predicate on the "media_featured_post_url" field. It's identical to MediaFeaturedPostURLEQ.
func MediaFeaturedPostURL(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaFeaturedPostURL), v))
	})
}

// MediaCategoryPostURL applies equality check predicate on the "media_category_post_url" field. It's identical to MediaCategoryPostURLEQ.
func MediaCategoryPostURL(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaCategoryPostURL), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v bool) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Logo applies equality check predicate on the "logo" field. It's identical to LogoEQ.
func Logo(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogo), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// ArticleFeaturedPostSelectorIsNil applies the IsNil predicate on the "article_featured_post_selector" field.
func ArticleFeaturedPostSelectorIsNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArticleFeaturedPostSelector)))
	})
}

// ArticleFeaturedPostSelectorNotNil applies the NotNil predicate on the "article_featured_post_selector" field.
func ArticleFeaturedPostSelectorNotNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArticleFeaturedPostSelector)))
	})
}

// ArticleFeaturedPostURLEQ applies the EQ predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArticleFeaturedPostURL), v))
	})
}

// ArticleFeaturedPostURLNEQ applies the NEQ predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLNEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArticleFeaturedPostURL), v))
	})
}

// ArticleFeaturedPostURLIn applies the In predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldArticleFeaturedPostURL), v...))
	})
}

// ArticleFeaturedPostURLNotIn applies the NotIn predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLNotIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldArticleFeaturedPostURL), v...))
	})
}

// ArticleFeaturedPostURLGT applies the GT predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLGT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArticleFeaturedPostURL), v))
	})
}

// ArticleFeaturedPostURLGTE applies the GTE predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLGTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArticleFeaturedPostURL), v))
	})
}

// ArticleFeaturedPostURLLT applies the LT predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLLT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArticleFeaturedPostURL), v))
	})
}

// ArticleFeaturedPostURLLTE applies the LTE predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLLTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArticleFeaturedPostURL), v))
	})
}

// ArticleFeaturedPostURLContains applies the Contains predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLContains(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldArticleFeaturedPostURL), v))
	})
}

// ArticleFeaturedPostURLHasPrefix applies the HasPrefix predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLHasPrefix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldArticleFeaturedPostURL), v))
	})
}

// ArticleFeaturedPostURLHasSuffix applies the HasSuffix predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLHasSuffix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldArticleFeaturedPostURL), v))
	})
}

// ArticleFeaturedPostURLIsNil applies the IsNil predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLIsNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArticleFeaturedPostURL)))
	})
}

// ArticleFeaturedPostURLNotNil applies the NotNil predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLNotNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArticleFeaturedPostURL)))
	})
}

// ArticleFeaturedPostURLEqualFold applies the EqualFold predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLEqualFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldArticleFeaturedPostURL), v))
	})
}

// ArticleFeaturedPostURLContainsFold applies the ContainsFold predicate on the "article_featured_post_url" field.
func ArticleFeaturedPostURLContainsFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldArticleFeaturedPostURL), v))
	})
}

// ArticleCategoryPostSelectorIsNil applies the IsNil predicate on the "article_category_post_selector" field.
func ArticleCategoryPostSelectorIsNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArticleCategoryPostSelector)))
	})
}

// ArticleCategoryPostSelectorNotNil applies the NotNil predicate on the "article_category_post_selector" field.
func ArticleCategoryPostSelectorNotNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArticleCategoryPostSelector)))
	})
}

// ArticleCategoryPostURLEQ applies the EQ predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArticleCategoryPostURL), v))
	})
}

// ArticleCategoryPostURLNEQ applies the NEQ predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLNEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArticleCategoryPostURL), v))
	})
}

// ArticleCategoryPostURLIn applies the In predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldArticleCategoryPostURL), v...))
	})
}

// ArticleCategoryPostURLNotIn applies the NotIn predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLNotIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldArticleCategoryPostURL), v...))
	})
}

// ArticleCategoryPostURLGT applies the GT predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLGT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArticleCategoryPostURL), v))
	})
}

// ArticleCategoryPostURLGTE applies the GTE predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLGTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArticleCategoryPostURL), v))
	})
}

// ArticleCategoryPostURLLT applies the LT predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLLT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArticleCategoryPostURL), v))
	})
}

// ArticleCategoryPostURLLTE applies the LTE predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLLTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArticleCategoryPostURL), v))
	})
}

// ArticleCategoryPostURLContains applies the Contains predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLContains(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldArticleCategoryPostURL), v))
	})
}

// ArticleCategoryPostURLHasPrefix applies the HasPrefix predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLHasPrefix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldArticleCategoryPostURL), v))
	})
}

// ArticleCategoryPostURLHasSuffix applies the HasSuffix predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLHasSuffix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldArticleCategoryPostURL), v))
	})
}

// ArticleCategoryPostURLIsNil applies the IsNil predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLIsNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArticleCategoryPostURL)))
	})
}

// ArticleCategoryPostURLNotNil applies the NotNil predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLNotNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArticleCategoryPostURL)))
	})
}

// ArticleCategoryPostURLEqualFold applies the EqualFold predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLEqualFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldArticleCategoryPostURL), v))
	})
}

// ArticleCategoryPostURLContainsFold applies the ContainsFold predicate on the "article_category_post_url" field.
func ArticleCategoryPostURLContainsFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldArticleCategoryPostURL), v))
	})
}

// ArticleContentSelectorIsNil applies the IsNil predicate on the "article_content_selector" field.
func ArticleContentSelectorIsNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArticleContentSelector)))
	})
}

// ArticleContentSelectorNotNil applies the NotNil predicate on the "article_content_selector" field.
func ArticleContentSelectorNotNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArticleContentSelector)))
	})
}

// MediaFeaturedPostSelectorIsNil applies the IsNil predicate on the "media_featured_post_selector" field.
func MediaFeaturedPostSelectorIsNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMediaFeaturedPostSelector)))
	})
}

// MediaFeaturedPostSelectorNotNil applies the NotNil predicate on the "media_featured_post_selector" field.
func MediaFeaturedPostSelectorNotNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMediaFeaturedPostSelector)))
	})
}

// MediaFeaturedPostURLEQ applies the EQ predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaFeaturedPostURL), v))
	})
}

// MediaFeaturedPostURLNEQ applies the NEQ predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLNEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMediaFeaturedPostURL), v))
	})
}

// MediaFeaturedPostURLIn applies the In predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMediaFeaturedPostURL), v...))
	})
}

// MediaFeaturedPostURLNotIn applies the NotIn predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLNotIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMediaFeaturedPostURL), v...))
	})
}

// MediaFeaturedPostURLGT applies the GT predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLGT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMediaFeaturedPostURL), v))
	})
}

// MediaFeaturedPostURLGTE applies the GTE predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLGTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMediaFeaturedPostURL), v))
	})
}

// MediaFeaturedPostURLLT applies the LT predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLLT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMediaFeaturedPostURL), v))
	})
}

// MediaFeaturedPostURLLTE applies the LTE predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLLTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMediaFeaturedPostURL), v))
	})
}

// MediaFeaturedPostURLContains applies the Contains predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLContains(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMediaFeaturedPostURL), v))
	})
}

// MediaFeaturedPostURLHasPrefix applies the HasPrefix predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLHasPrefix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMediaFeaturedPostURL), v))
	})
}

// MediaFeaturedPostURLHasSuffix applies the HasSuffix predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLHasSuffix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMediaFeaturedPostURL), v))
	})
}

// MediaFeaturedPostURLIsNil applies the IsNil predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLIsNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMediaFeaturedPostURL)))
	})
}

// MediaFeaturedPostURLNotNil applies the NotNil predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLNotNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMediaFeaturedPostURL)))
	})
}

// MediaFeaturedPostURLEqualFold applies the EqualFold predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLEqualFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMediaFeaturedPostURL), v))
	})
}

// MediaFeaturedPostURLContainsFold applies the ContainsFold predicate on the "media_featured_post_url" field.
func MediaFeaturedPostURLContainsFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMediaFeaturedPostURL), v))
	})
}

// MediaCategoryPostSelectorIsNil applies the IsNil predicate on the "media_category_post_selector" field.
func MediaCategoryPostSelectorIsNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMediaCategoryPostSelector)))
	})
}

// MediaCategoryPostSelectorNotNil applies the NotNil predicate on the "media_category_post_selector" field.
func MediaCategoryPostSelectorNotNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMediaCategoryPostSelector)))
	})
}

// MediaCategoryPostURLEQ applies the EQ predicate on the "media_category_post_url" field.
func MediaCategoryPostURLEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaCategoryPostURL), v))
	})
}

// MediaCategoryPostURLNEQ applies the NEQ predicate on the "media_category_post_url" field.
func MediaCategoryPostURLNEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMediaCategoryPostURL), v))
	})
}

// MediaCategoryPostURLIn applies the In predicate on the "media_category_post_url" field.
func MediaCategoryPostURLIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMediaCategoryPostURL), v...))
	})
}

// MediaCategoryPostURLNotIn applies the NotIn predicate on the "media_category_post_url" field.
func MediaCategoryPostURLNotIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMediaCategoryPostURL), v...))
	})
}

// MediaCategoryPostURLGT applies the GT predicate on the "media_category_post_url" field.
func MediaCategoryPostURLGT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMediaCategoryPostURL), v))
	})
}

// MediaCategoryPostURLGTE applies the GTE predicate on the "media_category_post_url" field.
func MediaCategoryPostURLGTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMediaCategoryPostURL), v))
	})
}

// MediaCategoryPostURLLT applies the LT predicate on the "media_category_post_url" field.
func MediaCategoryPostURLLT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMediaCategoryPostURL), v))
	})
}

// MediaCategoryPostURLLTE applies the LTE predicate on the "media_category_post_url" field.
func MediaCategoryPostURLLTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMediaCategoryPostURL), v))
	})
}

// MediaCategoryPostURLContains applies the Contains predicate on the "media_category_post_url" field.
func MediaCategoryPostURLContains(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMediaCategoryPostURL), v))
	})
}

// MediaCategoryPostURLHasPrefix applies the HasPrefix predicate on the "media_category_post_url" field.
func MediaCategoryPostURLHasPrefix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMediaCategoryPostURL), v))
	})
}

// MediaCategoryPostURLHasSuffix applies the HasSuffix predicate on the "media_category_post_url" field.
func MediaCategoryPostURLHasSuffix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMediaCategoryPostURL), v))
	})
}

// MediaCategoryPostURLIsNil applies the IsNil predicate on the "media_category_post_url" field.
func MediaCategoryPostURLIsNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMediaCategoryPostURL)))
	})
}

// MediaCategoryPostURLNotNil applies the NotNil predicate on the "media_category_post_url" field.
func MediaCategoryPostURLNotNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMediaCategoryPostURL)))
	})
}

// MediaCategoryPostURLEqualFold applies the EqualFold predicate on the "media_category_post_url" field.
func MediaCategoryPostURLEqualFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMediaCategoryPostURL), v))
	})
}

// MediaCategoryPostURLContainsFold applies the ContainsFold predicate on the "media_category_post_url" field.
func MediaCategoryPostURLContainsFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMediaCategoryPostURL), v))
	})
}

// MediaContentSelectorIsNil applies the IsNil predicate on the "media_content_selector" field.
func MediaContentSelectorIsNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMediaContentSelector)))
	})
}

// MediaContentSelectorNotNil applies the NotNil predicate on the "media_content_selector" field.
func MediaContentSelectorNotNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMediaContentSelector)))
	})
}

// ArticleCategoriesIsNil applies the IsNil predicate on the "article_categories" field.
func ArticleCategoriesIsNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArticleCategories)))
	})
}

// ArticleCategoriesNotNil applies the NotNil predicate on the "article_categories" field.
func ArticleCategoriesNotNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArticleCategories)))
	})
}

// MediaCategoriesIsNil applies the IsNil predicate on the "media_categories" field.
func MediaCategoriesIsNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMediaCategories)))
	})
}

// MediaCategoriesNotNil applies the NotNil predicate on the "media_categories" field.
func MediaCategoriesNotNil() predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMediaCategories)))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLanguage), v))
	})
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLanguage), v...))
	})
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLanguage), v...))
	})
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLanguage), v))
	})
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLanguage), v))
	})
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLanguage), v))
	})
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLanguage), v))
	})
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLanguage), v))
	})
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLanguage), v))
	})
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLanguage), v))
	})
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLanguage), v))
	})
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLanguage), v))
	})
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountry), v))
	})
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCountry), v...))
	})
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCountry), v...))
	})
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountry), v))
	})
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountry), v))
	})
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountry), v))
	})
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountry), v))
	})
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCountry), v))
	})
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCountry), v))
	})
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCountry), v))
	})
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCountry), v))
	})
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCountry), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v bool) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v bool) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// LogoEQ applies the EQ predicate on the "logo" field.
func LogoEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogo), v))
	})
}

// LogoNEQ applies the NEQ predicate on the "logo" field.
func LogoNEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLogo), v))
	})
}

// LogoIn applies the In predicate on the "logo" field.
func LogoIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLogo), v...))
	})
}

// LogoNotIn applies the NotIn predicate on the "logo" field.
func LogoNotIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLogo), v...))
	})
}

// LogoGT applies the GT predicate on the "logo" field.
func LogoGT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLogo), v))
	})
}

// LogoGTE applies the GTE predicate on the "logo" field.
func LogoGTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLogo), v))
	})
}

// LogoLT applies the LT predicate on the "logo" field.
func LogoLT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLogo), v))
	})
}

// LogoLTE applies the LTE predicate on the "logo" field.
func LogoLTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLogo), v))
	})
}

// LogoContains applies the Contains predicate on the "logo" field.
func LogoContains(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLogo), v))
	})
}

// LogoHasPrefix applies the HasPrefix predicate on the "logo" field.
func LogoHasPrefix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLogo), v))
	})
}

// LogoHasSuffix applies the HasSuffix predicate on the "logo" field.
func LogoHasSuffix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLogo), v))
	})
}

// LogoEqualFold applies the EqualFold predicate on the "logo" field.
func LogoEqualFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLogo), v))
	})
}

// LogoContainsFold applies the ContainsFold predicate on the "logo" field.
func LogoContainsFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLogo), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Source {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Source(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Source) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Source) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Source) predicate.Source {
	return predicate.Source(func(s *sql.Selector) {
		p(s.Not())
	})
}
