// Code generated by entc, DO NOT EDIT.

package storage

import (
	"fmt"
	"news/internal/storage/mediapost"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// MediaPost is the model entity for the MediaPost schema.
type MediaPost struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Live holds the value of the "live" field.
	Live bool `json:"live,omitempty"`
	// Type holds the value of the "type" field.
	Type mediapost.Type `json:"type,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MediaPost) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case mediapost.FieldStatus, mediapost.FieldLive:
			values[i] = new(sql.NullBool)
		case mediapost.FieldID:
			values[i] = new(sql.NullInt64)
		case mediapost.FieldType, mediapost.FieldTitle, mediapost.FieldLogo, mediapost.FieldSource, mediapost.FieldDescription, mediapost.FieldImage, mediapost.FieldLink, mediapost.FieldContent:
			values[i] = new(sql.NullString)
		case mediapost.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MediaPost", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MediaPost fields.
func (mp *MediaPost) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mediapost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mp.ID = int(value.Int64)
		case mediapost.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mp.Status = value.Bool
			}
		case mediapost.FieldLive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field live", values[i])
			} else if value.Valid {
				mp.Live = value.Bool
			}
		case mediapost.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				mp.Type = mediapost.Type(value.String)
			}
		case mediapost.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				mp.Title = value.String
			}
		case mediapost.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				mp.Logo = value.String
			}
		case mediapost.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				mp.Source = value.String
			}
		case mediapost.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				mp.Description = value.String
			}
		case mediapost.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				mp.Image = value.String
			}
		case mediapost.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				mp.Date = value.Time
			}
		case mediapost.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				mp.Link = value.String
			}
		case mediapost.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				mp.Content = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MediaPost.
// Note that you need to call MediaPost.Unwrap() before calling this method if this MediaPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (mp *MediaPost) Update() *MediaPostUpdateOne {
	return (&MediaPostClient{config: mp.config}).UpdateOne(mp)
}

// Unwrap unwraps the MediaPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mp *MediaPost) Unwrap() *MediaPost {
	tx, ok := mp.config.driver.(*txDriver)
	if !ok {
		panic("storage: MediaPost is not a transactional entity")
	}
	mp.config.driver = tx.drv
	return mp
}

// String implements the fmt.Stringer.
func (mp *MediaPost) String() string {
	var builder strings.Builder
	builder.WriteString("MediaPost(")
	builder.WriteString(fmt.Sprintf("id=%v", mp.ID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", mp.Status))
	builder.WriteString(", live=")
	builder.WriteString(fmt.Sprintf("%v", mp.Live))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", mp.Type))
	builder.WriteString(", title=")
	builder.WriteString(mp.Title)
	builder.WriteString(", logo=")
	builder.WriteString(mp.Logo)
	builder.WriteString(", source=")
	builder.WriteString(mp.Source)
	builder.WriteString(", description=")
	builder.WriteString(mp.Description)
	builder.WriteString(", image=")
	builder.WriteString(mp.Image)
	builder.WriteString(", date=")
	builder.WriteString(mp.Date.Format(time.ANSIC))
	builder.WriteString(", link=")
	builder.WriteString(mp.Link)
	builder.WriteString(", content=")
	builder.WriteString(mp.Content)
	builder.WriteByte(')')
	return builder.String()
}

// MediaPosts is a parsable slice of MediaPost.
type MediaPosts []*MediaPost

func (mp MediaPosts) config(cfg config) {
	for _i := range mp {
		mp[_i].config = cfg
	}
}
