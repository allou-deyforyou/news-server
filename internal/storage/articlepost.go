// Code generated by entc, DO NOT EDIT.

package storage

import (
	"fmt"
	"news/internal/storage/articlepost"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ArticlePost is the model entity for the ArticlePost schema.
type ArticlePost struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ArticlePost) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case articlepost.FieldStatus:
			values[i] = new(sql.NullBool)
		case articlepost.FieldID:
			values[i] = new(sql.NullInt64)
		case articlepost.FieldTitle, articlepost.FieldImage, articlepost.FieldLink, articlepost.FieldContent, articlepost.FieldSource:
			values[i] = new(sql.NullString)
		case articlepost.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ArticlePost", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ArticlePost fields.
func (ap *ArticlePost) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case articlepost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ap.ID = int(value.Int64)
		case articlepost.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ap.Status = value.Bool
			}
		case articlepost.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ap.Title = value.String
			}
		case articlepost.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				ap.Image = value.String
			}
		case articlepost.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				ap.Date = value.Time
			}
		case articlepost.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				ap.Link = value.String
			}
		case articlepost.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				ap.Content = value.String
			}
		case articlepost.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				ap.Source = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ArticlePost.
// Note that you need to call ArticlePost.Unwrap() before calling this method if this ArticlePost
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *ArticlePost) Update() *ArticlePostUpdateOne {
	return (&ArticlePostClient{config: ap.config}).UpdateOne(ap)
}

// Unwrap unwraps the ArticlePost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *ArticlePost) Unwrap() *ArticlePost {
	tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("storage: ArticlePost is not a transactional entity")
	}
	ap.config.driver = tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *ArticlePost) String() string {
	var builder strings.Builder
	builder.WriteString("ArticlePost(")
	builder.WriteString(fmt.Sprintf("id=%v", ap.ID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ap.Status))
	builder.WriteString(", title=")
	builder.WriteString(ap.Title)
	builder.WriteString(", image=")
	builder.WriteString(ap.Image)
	builder.WriteString(", date=")
	builder.WriteString(ap.Date.Format(time.ANSIC))
	builder.WriteString(", link=")
	builder.WriteString(ap.Link)
	builder.WriteString(", content=")
	builder.WriteString(ap.Content)
	builder.WriteString(", source=")
	builder.WriteString(ap.Source)
	builder.WriteByte(')')
	return builder.String()
}

// ArticlePosts is a parsable slice of ArticlePost.
type ArticlePosts []*ArticlePost

func (ap ArticlePosts) config(cfg config) {
	for _i := range ap {
		ap[_i].config = cfg
	}
}
