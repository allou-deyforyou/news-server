// Code generated by entc, DO NOT EDIT.

package storage

import (
	"context"
	"fmt"
	"log"

	"news/internal/storage/migrate"

	"news/internal/storage/articlepost"
	"news/internal/storage/categories"
	"news/internal/storage/mediapost"
	"news/internal/storage/source"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ArticlePost is the client for interacting with the ArticlePost builders.
	ArticlePost *ArticlePostClient
	// Categories is the client for interacting with the Categories builders.
	Categories *CategoriesClient
	// MediaPost is the client for interacting with the MediaPost builders.
	MediaPost *MediaPostClient
	// Source is the client for interacting with the Source builders.
	Source *SourceClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ArticlePost = NewArticlePostClient(c.config)
	c.Categories = NewCategoriesClient(c.config)
	c.MediaPost = NewMediaPostClient(c.config)
	c.Source = NewSourceClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("storage: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("storage: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		ArticlePost: NewArticlePostClient(cfg),
		Categories:  NewCategoriesClient(cfg),
		MediaPost:   NewMediaPostClient(cfg),
		Source:      NewSourceClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		ArticlePost: NewArticlePostClient(cfg),
		Categories:  NewCategoriesClient(cfg),
		MediaPost:   NewMediaPostClient(cfg),
		Source:      NewSourceClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ArticlePost.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ArticlePost.Use(hooks...)
	c.Categories.Use(hooks...)
	c.MediaPost.Use(hooks...)
	c.Source.Use(hooks...)
}

// ArticlePostClient is a client for the ArticlePost schema.
type ArticlePostClient struct {
	config
}

// NewArticlePostClient returns a client for the ArticlePost from the given config.
func NewArticlePostClient(c config) *ArticlePostClient {
	return &ArticlePostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `articlepost.Hooks(f(g(h())))`.
func (c *ArticlePostClient) Use(hooks ...Hook) {
	c.hooks.ArticlePost = append(c.hooks.ArticlePost, hooks...)
}

// Create returns a create builder for ArticlePost.
func (c *ArticlePostClient) Create() *ArticlePostCreate {
	mutation := newArticlePostMutation(c.config, OpCreate)
	return &ArticlePostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArticlePost entities.
func (c *ArticlePostClient) CreateBulk(builders ...*ArticlePostCreate) *ArticlePostCreateBulk {
	return &ArticlePostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArticlePost.
func (c *ArticlePostClient) Update() *ArticlePostUpdate {
	mutation := newArticlePostMutation(c.config, OpUpdate)
	return &ArticlePostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArticlePostClient) UpdateOne(ap *ArticlePost) *ArticlePostUpdateOne {
	mutation := newArticlePostMutation(c.config, OpUpdateOne, withArticlePost(ap))
	return &ArticlePostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArticlePostClient) UpdateOneID(id int) *ArticlePostUpdateOne {
	mutation := newArticlePostMutation(c.config, OpUpdateOne, withArticlePostID(id))
	return &ArticlePostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArticlePost.
func (c *ArticlePostClient) Delete() *ArticlePostDelete {
	mutation := newArticlePostMutation(c.config, OpDelete)
	return &ArticlePostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ArticlePostClient) DeleteOne(ap *ArticlePost) *ArticlePostDeleteOne {
	return c.DeleteOneID(ap.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ArticlePostClient) DeleteOneID(id int) *ArticlePostDeleteOne {
	builder := c.Delete().Where(articlepost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArticlePostDeleteOne{builder}
}

// Query returns a query builder for ArticlePost.
func (c *ArticlePostClient) Query() *ArticlePostQuery {
	return &ArticlePostQuery{
		config: c.config,
	}
}

// Get returns a ArticlePost entity by its id.
func (c *ArticlePostClient) Get(ctx context.Context, id int) (*ArticlePost, error) {
	return c.Query().Where(articlepost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArticlePostClient) GetX(ctx context.Context, id int) *ArticlePost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ArticlePostClient) Hooks() []Hook {
	return c.hooks.ArticlePost
}

// CategoriesClient is a client for the Categories schema.
type CategoriesClient struct {
	config
}

// NewCategoriesClient returns a client for the Categories from the given config.
func NewCategoriesClient(c config) *CategoriesClient {
	return &CategoriesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `categories.Hooks(f(g(h())))`.
func (c *CategoriesClient) Use(hooks ...Hook) {
	c.hooks.Categories = append(c.hooks.Categories, hooks...)
}

// Create returns a create builder for Categories.
func (c *CategoriesClient) Create() *CategoriesCreate {
	mutation := newCategoriesMutation(c.config, OpCreate)
	return &CategoriesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Categories entities.
func (c *CategoriesClient) CreateBulk(builders ...*CategoriesCreate) *CategoriesCreateBulk {
	return &CategoriesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Categories.
func (c *CategoriesClient) Update() *CategoriesUpdate {
	mutation := newCategoriesMutation(c.config, OpUpdate)
	return &CategoriesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoriesClient) UpdateOne(ca *Categories) *CategoriesUpdateOne {
	mutation := newCategoriesMutation(c.config, OpUpdateOne, withCategories(ca))
	return &CategoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoriesClient) UpdateOneID(id int) *CategoriesUpdateOne {
	mutation := newCategoriesMutation(c.config, OpUpdateOne, withCategoriesID(id))
	return &CategoriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Categories.
func (c *CategoriesClient) Delete() *CategoriesDelete {
	mutation := newCategoriesMutation(c.config, OpDelete)
	return &CategoriesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoriesClient) DeleteOne(ca *Categories) *CategoriesDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoriesClient) DeleteOneID(id int) *CategoriesDeleteOne {
	builder := c.Delete().Where(categories.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoriesDeleteOne{builder}
}

// Query returns a query builder for Categories.
func (c *CategoriesClient) Query() *CategoriesQuery {
	return &CategoriesQuery{
		config: c.config,
	}
}

// Get returns a Categories entity by its id.
func (c *CategoriesClient) Get(ctx context.Context, id int) (*Categories, error) {
	return c.Query().Where(categories.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoriesClient) GetX(ctx context.Context, id int) *Categories {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CategoriesClient) Hooks() []Hook {
	return c.hooks.Categories
}

// MediaPostClient is a client for the MediaPost schema.
type MediaPostClient struct {
	config
}

// NewMediaPostClient returns a client for the MediaPost from the given config.
func NewMediaPostClient(c config) *MediaPostClient {
	return &MediaPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mediapost.Hooks(f(g(h())))`.
func (c *MediaPostClient) Use(hooks ...Hook) {
	c.hooks.MediaPost = append(c.hooks.MediaPost, hooks...)
}

// Create returns a create builder for MediaPost.
func (c *MediaPostClient) Create() *MediaPostCreate {
	mutation := newMediaPostMutation(c.config, OpCreate)
	return &MediaPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MediaPost entities.
func (c *MediaPostClient) CreateBulk(builders ...*MediaPostCreate) *MediaPostCreateBulk {
	return &MediaPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MediaPost.
func (c *MediaPostClient) Update() *MediaPostUpdate {
	mutation := newMediaPostMutation(c.config, OpUpdate)
	return &MediaPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MediaPostClient) UpdateOne(mp *MediaPost) *MediaPostUpdateOne {
	mutation := newMediaPostMutation(c.config, OpUpdateOne, withMediaPost(mp))
	return &MediaPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MediaPostClient) UpdateOneID(id int) *MediaPostUpdateOne {
	mutation := newMediaPostMutation(c.config, OpUpdateOne, withMediaPostID(id))
	return &MediaPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MediaPost.
func (c *MediaPostClient) Delete() *MediaPostDelete {
	mutation := newMediaPostMutation(c.config, OpDelete)
	return &MediaPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MediaPostClient) DeleteOne(mp *MediaPost) *MediaPostDeleteOne {
	return c.DeleteOneID(mp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MediaPostClient) DeleteOneID(id int) *MediaPostDeleteOne {
	builder := c.Delete().Where(mediapost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MediaPostDeleteOne{builder}
}

// Query returns a query builder for MediaPost.
func (c *MediaPostClient) Query() *MediaPostQuery {
	return &MediaPostQuery{
		config: c.config,
	}
}

// Get returns a MediaPost entity by its id.
func (c *MediaPostClient) Get(ctx context.Context, id int) (*MediaPost, error) {
	return c.Query().Where(mediapost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MediaPostClient) GetX(ctx context.Context, id int) *MediaPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MediaPostClient) Hooks() []Hook {
	return c.hooks.MediaPost
}

// SourceClient is a client for the Source schema.
type SourceClient struct {
	config
}

// NewSourceClient returns a client for the Source from the given config.
func NewSourceClient(c config) *SourceClient {
	return &SourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `source.Hooks(f(g(h())))`.
func (c *SourceClient) Use(hooks ...Hook) {
	c.hooks.Source = append(c.hooks.Source, hooks...)
}

// Create returns a create builder for Source.
func (c *SourceClient) Create() *SourceCreate {
	mutation := newSourceMutation(c.config, OpCreate)
	return &SourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Source entities.
func (c *SourceClient) CreateBulk(builders ...*SourceCreate) *SourceCreateBulk {
	return &SourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Source.
func (c *SourceClient) Update() *SourceUpdate {
	mutation := newSourceMutation(c.config, OpUpdate)
	return &SourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SourceClient) UpdateOne(s *Source) *SourceUpdateOne {
	mutation := newSourceMutation(c.config, OpUpdateOne, withSource(s))
	return &SourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SourceClient) UpdateOneID(id int) *SourceUpdateOne {
	mutation := newSourceMutation(c.config, OpUpdateOne, withSourceID(id))
	return &SourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Source.
func (c *SourceClient) Delete() *SourceDelete {
	mutation := newSourceMutation(c.config, OpDelete)
	return &SourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SourceClient) DeleteOne(s *Source) *SourceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SourceClient) DeleteOneID(id int) *SourceDeleteOne {
	builder := c.Delete().Where(source.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SourceDeleteOne{builder}
}

// Query returns a query builder for Source.
func (c *SourceClient) Query() *SourceQuery {
	return &SourceQuery{
		config: c.config,
	}
}

// Get returns a Source entity by its id.
func (c *SourceClient) Get(ctx context.Context, id int) (*Source, error) {
	return c.Query().Where(source.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SourceClient) GetX(ctx context.Context, id int) *Source {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SourceClient) Hooks() []Hook {
	return c.hooks.Source
}
