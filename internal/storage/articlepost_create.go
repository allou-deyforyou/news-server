// Code generated by entc, DO NOT EDIT.

package storage

import (
	"context"
	"errors"
	"fmt"
	"news/internal/storage/articlepost"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArticlePostCreate is the builder for creating a ArticlePost entity.
type ArticlePostCreate struct {
	config
	mutation *ArticlePostMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (apc *ArticlePostCreate) SetStatus(b bool) *ArticlePostCreate {
	apc.mutation.SetStatus(b)
	return apc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apc *ArticlePostCreate) SetNillableStatus(b *bool) *ArticlePostCreate {
	if b != nil {
		apc.SetStatus(*b)
	}
	return apc
}

// SetTitle sets the "title" field.
func (apc *ArticlePostCreate) SetTitle(s string) *ArticlePostCreate {
	apc.mutation.SetTitle(s)
	return apc
}

// SetImage sets the "image" field.
func (apc *ArticlePostCreate) SetImage(s string) *ArticlePostCreate {
	apc.mutation.SetImage(s)
	return apc
}

// SetDescription sets the "description" field.
func (apc *ArticlePostCreate) SetDescription(s string) *ArticlePostCreate {
	apc.mutation.SetDescription(s)
	return apc
}

// SetDate sets the "date" field.
func (apc *ArticlePostCreate) SetDate(t time.Time) *ArticlePostCreate {
	apc.mutation.SetDate(t)
	return apc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (apc *ArticlePostCreate) SetNillableDate(t *time.Time) *ArticlePostCreate {
	if t != nil {
		apc.SetDate(*t)
	}
	return apc
}

// SetLink sets the "link" field.
func (apc *ArticlePostCreate) SetLink(s string) *ArticlePostCreate {
	apc.mutation.SetLink(s)
	return apc
}

// SetContent sets the "content" field.
func (apc *ArticlePostCreate) SetContent(s string) *ArticlePostCreate {
	apc.mutation.SetContent(s)
	return apc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (apc *ArticlePostCreate) SetNillableContent(s *string) *ArticlePostCreate {
	if s != nil {
		apc.SetContent(*s)
	}
	return apc
}

// SetSource sets the "source" field.
func (apc *ArticlePostCreate) SetSource(s string) *ArticlePostCreate {
	apc.mutation.SetSource(s)
	return apc
}

// Mutation returns the ArticlePostMutation object of the builder.
func (apc *ArticlePostCreate) Mutation() *ArticlePostMutation {
	return apc.mutation
}

// Save creates the ArticlePost in the database.
func (apc *ArticlePostCreate) Save(ctx context.Context) (*ArticlePost, error) {
	var (
		err  error
		node *ArticlePost
	)
	apc.defaults()
	if len(apc.hooks) == 0 {
		if err = apc.check(); err != nil {
			return nil, err
		}
		node, err = apc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArticlePostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apc.check(); err != nil {
				return nil, err
			}
			apc.mutation = mutation
			if node, err = apc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(apc.hooks) - 1; i >= 0; i-- {
			if apc.hooks[i] == nil {
				return nil, fmt.Errorf("storage: uninitialized hook (forgotten import storage/runtime?)")
			}
			mut = apc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (apc *ArticlePostCreate) SaveX(ctx context.Context) *ArticlePost {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *ArticlePostCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *ArticlePostCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apc *ArticlePostCreate) defaults() {
	if _, ok := apc.mutation.Status(); !ok {
		v := articlepost.DefaultStatus
		apc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apc *ArticlePostCreate) check() error {
	if _, ok := apc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`storage: missing required field "ArticlePost.status"`)}
	}
	if _, ok := apc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`storage: missing required field "ArticlePost.title"`)}
	}
	if _, ok := apc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`storage: missing required field "ArticlePost.image"`)}
	}
	if _, ok := apc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`storage: missing required field "ArticlePost.description"`)}
	}
	if _, ok := apc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`storage: missing required field "ArticlePost.link"`)}
	}
	if _, ok := apc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`storage: missing required field "ArticlePost.source"`)}
	}
	return nil
}

func (apc *ArticlePostCreate) sqlSave(ctx context.Context) (*ArticlePost, error) {
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (apc *ArticlePostCreate) createSpec() (*ArticlePost, *sqlgraph.CreateSpec) {
	var (
		_node = &ArticlePost{config: apc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: articlepost.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: articlepost.FieldID,
			},
		}
	)
	if value, ok := apc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: articlepost.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := apc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := apc.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := apc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := apc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: articlepost.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := apc.mutation.Link(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldLink,
		})
		_node.Link = value
	}
	if value, ok := apc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := apc.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldSource,
		})
		_node.Source = value
	}
	return _node, _spec
}

// ArticlePostCreateBulk is the builder for creating many ArticlePost entities in bulk.
type ArticlePostCreateBulk struct {
	config
	builders []*ArticlePostCreate
}

// Save creates the ArticlePost entities in the database.
func (apcb *ArticlePostCreateBulk) Save(ctx context.Context) ([]*ArticlePost, error) {
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*ArticlePost, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArticlePostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *ArticlePostCreateBulk) SaveX(ctx context.Context) []*ArticlePost {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *ArticlePostCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *ArticlePostCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}
