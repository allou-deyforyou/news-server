// Code generated by entc, DO NOT EDIT.

package storage

import (
	"context"
	"errors"
	"fmt"
	"news/internal/storage/articlepost"
	"news/internal/storage/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArticlePostUpdate is the builder for updating ArticlePost entities.
type ArticlePostUpdate struct {
	config
	hooks    []Hook
	mutation *ArticlePostMutation
}

// Where appends a list predicates to the ArticlePostUpdate builder.
func (apu *ArticlePostUpdate) Where(ps ...predicate.ArticlePost) *ArticlePostUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetStatus sets the "status" field.
func (apu *ArticlePostUpdate) SetStatus(b bool) *ArticlePostUpdate {
	apu.mutation.SetStatus(b)
	return apu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apu *ArticlePostUpdate) SetNillableStatus(b *bool) *ArticlePostUpdate {
	if b != nil {
		apu.SetStatus(*b)
	}
	return apu
}

// SetTitle sets the "title" field.
func (apu *ArticlePostUpdate) SetTitle(s string) *ArticlePostUpdate {
	apu.mutation.SetTitle(s)
	return apu
}

// SetImage sets the "image" field.
func (apu *ArticlePostUpdate) SetImage(s string) *ArticlePostUpdate {
	apu.mutation.SetImage(s)
	return apu
}

// SetDate sets the "date" field.
func (apu *ArticlePostUpdate) SetDate(t time.Time) *ArticlePostUpdate {
	apu.mutation.SetDate(t)
	return apu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (apu *ArticlePostUpdate) SetNillableDate(t *time.Time) *ArticlePostUpdate {
	if t != nil {
		apu.SetDate(*t)
	}
	return apu
}

// ClearDate clears the value of the "date" field.
func (apu *ArticlePostUpdate) ClearDate() *ArticlePostUpdate {
	apu.mutation.ClearDate()
	return apu
}

// SetLink sets the "link" field.
func (apu *ArticlePostUpdate) SetLink(s string) *ArticlePostUpdate {
	apu.mutation.SetLink(s)
	return apu
}

// SetContent sets the "content" field.
func (apu *ArticlePostUpdate) SetContent(s string) *ArticlePostUpdate {
	apu.mutation.SetContent(s)
	return apu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (apu *ArticlePostUpdate) SetNillableContent(s *string) *ArticlePostUpdate {
	if s != nil {
		apu.SetContent(*s)
	}
	return apu
}

// ClearContent clears the value of the "content" field.
func (apu *ArticlePostUpdate) ClearContent() *ArticlePostUpdate {
	apu.mutation.ClearContent()
	return apu
}

// SetSource sets the "source" field.
func (apu *ArticlePostUpdate) SetSource(s string) *ArticlePostUpdate {
	apu.mutation.SetSource(s)
	return apu
}

// Mutation returns the ArticlePostMutation object of the builder.
func (apu *ArticlePostUpdate) Mutation() *ArticlePostMutation {
	return apu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *ArticlePostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(apu.hooks) == 0 {
		affected, err = apu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArticlePostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			apu.mutation = mutation
			affected, err = apu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(apu.hooks) - 1; i >= 0; i-- {
			if apu.hooks[i] == nil {
				return 0, fmt.Errorf("storage: uninitialized hook (forgotten import storage/runtime?)")
			}
			mut = apu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (apu *ArticlePostUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *ArticlePostUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *ArticlePostUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (apu *ArticlePostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   articlepost.Table,
			Columns: articlepost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: articlepost.FieldID,
			},
		},
	}
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: articlepost.FieldStatus,
		})
	}
	if value, ok := apu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldTitle,
		})
	}
	if value, ok := apu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldImage,
		})
	}
	if value, ok := apu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: articlepost.FieldDate,
		})
	}
	if apu.mutation.DateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: articlepost.FieldDate,
		})
	}
	if value, ok := apu.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldLink,
		})
	}
	if value, ok := apu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldContent,
		})
	}
	if apu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: articlepost.FieldContent,
		})
	}
	if value, ok := apu.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldSource,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlepost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ArticlePostUpdateOne is the builder for updating a single ArticlePost entity.
type ArticlePostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticlePostMutation
}

// SetStatus sets the "status" field.
func (apuo *ArticlePostUpdateOne) SetStatus(b bool) *ArticlePostUpdateOne {
	apuo.mutation.SetStatus(b)
	return apuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apuo *ArticlePostUpdateOne) SetNillableStatus(b *bool) *ArticlePostUpdateOne {
	if b != nil {
		apuo.SetStatus(*b)
	}
	return apuo
}

// SetTitle sets the "title" field.
func (apuo *ArticlePostUpdateOne) SetTitle(s string) *ArticlePostUpdateOne {
	apuo.mutation.SetTitle(s)
	return apuo
}

// SetImage sets the "image" field.
func (apuo *ArticlePostUpdateOne) SetImage(s string) *ArticlePostUpdateOne {
	apuo.mutation.SetImage(s)
	return apuo
}

// SetDate sets the "date" field.
func (apuo *ArticlePostUpdateOne) SetDate(t time.Time) *ArticlePostUpdateOne {
	apuo.mutation.SetDate(t)
	return apuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (apuo *ArticlePostUpdateOne) SetNillableDate(t *time.Time) *ArticlePostUpdateOne {
	if t != nil {
		apuo.SetDate(*t)
	}
	return apuo
}

// ClearDate clears the value of the "date" field.
func (apuo *ArticlePostUpdateOne) ClearDate() *ArticlePostUpdateOne {
	apuo.mutation.ClearDate()
	return apuo
}

// SetLink sets the "link" field.
func (apuo *ArticlePostUpdateOne) SetLink(s string) *ArticlePostUpdateOne {
	apuo.mutation.SetLink(s)
	return apuo
}

// SetContent sets the "content" field.
func (apuo *ArticlePostUpdateOne) SetContent(s string) *ArticlePostUpdateOne {
	apuo.mutation.SetContent(s)
	return apuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (apuo *ArticlePostUpdateOne) SetNillableContent(s *string) *ArticlePostUpdateOne {
	if s != nil {
		apuo.SetContent(*s)
	}
	return apuo
}

// ClearContent clears the value of the "content" field.
func (apuo *ArticlePostUpdateOne) ClearContent() *ArticlePostUpdateOne {
	apuo.mutation.ClearContent()
	return apuo
}

// SetSource sets the "source" field.
func (apuo *ArticlePostUpdateOne) SetSource(s string) *ArticlePostUpdateOne {
	apuo.mutation.SetSource(s)
	return apuo
}

// Mutation returns the ArticlePostMutation object of the builder.
func (apuo *ArticlePostUpdateOne) Mutation() *ArticlePostMutation {
	return apuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *ArticlePostUpdateOne) Select(field string, fields ...string) *ArticlePostUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated ArticlePost entity.
func (apuo *ArticlePostUpdateOne) Save(ctx context.Context) (*ArticlePost, error) {
	var (
		err  error
		node *ArticlePost
	)
	if len(apuo.hooks) == 0 {
		node, err = apuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArticlePostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			apuo.mutation = mutation
			node, err = apuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(apuo.hooks) - 1; i >= 0; i-- {
			if apuo.hooks[i] == nil {
				return nil, fmt.Errorf("storage: uninitialized hook (forgotten import storage/runtime?)")
			}
			mut = apuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *ArticlePostUpdateOne) SaveX(ctx context.Context) *ArticlePost {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *ArticlePostUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *ArticlePostUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (apuo *ArticlePostUpdateOne) sqlSave(ctx context.Context) (_node *ArticlePost, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   articlepost.Table,
			Columns: articlepost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: articlepost.FieldID,
			},
		},
	}
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`storage: missing "ArticlePost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, articlepost.FieldID)
		for _, f := range fields {
			if !articlepost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("storage: invalid field %q for query", f)}
			}
			if f != articlepost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: articlepost.FieldStatus,
		})
	}
	if value, ok := apuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldTitle,
		})
	}
	if value, ok := apuo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldImage,
		})
	}
	if value, ok := apuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: articlepost.FieldDate,
		})
	}
	if apuo.mutation.DateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: articlepost.FieldDate,
		})
	}
	if value, ok := apuo.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldLink,
		})
	}
	if value, ok := apuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldContent,
		})
	}
	if apuo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: articlepost.FieldContent,
		})
	}
	if value, ok := apuo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: articlepost.FieldSource,
		})
	}
	_node = &ArticlePost{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlepost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
