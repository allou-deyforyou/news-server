// Code generated by entc, DO NOT EDIT.

package storage

import (
	"context"
	"errors"
	"fmt"
	"news/internal/storage/custom"
	"news/internal/storage/source"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SourceCreate is the builder for creating a Source entity.
type SourceCreate struct {
	config
	mutation *SourceMutation
	hooks    []Hook
}

// SetArticleFeaturedPostSelector sets the "article_featured_post_selector" field.
func (sc *SourceCreate) SetArticleFeaturedPostSelector(cps *custom.SourcePostSelector) *SourceCreate {
	sc.mutation.SetArticleFeaturedPostSelector(cps)
	return sc
}

// SetArticleFeaturedPostURL sets the "article_featured_post_url" field.
func (sc *SourceCreate) SetArticleFeaturedPostURL(s string) *SourceCreate {
	sc.mutation.SetArticleFeaturedPostURL(s)
	return sc
}

// SetNillableArticleFeaturedPostURL sets the "article_featured_post_url" field if the given value is not nil.
func (sc *SourceCreate) SetNillableArticleFeaturedPostURL(s *string) *SourceCreate {
	if s != nil {
		sc.SetArticleFeaturedPostURL(*s)
	}
	return sc
}

// SetArticleCategoryPostSelector sets the "article_category_post_selector" field.
func (sc *SourceCreate) SetArticleCategoryPostSelector(cps *custom.SourcePostSelector) *SourceCreate {
	sc.mutation.SetArticleCategoryPostSelector(cps)
	return sc
}

// SetArticleCategoryPostURL sets the "article_category_post_url" field.
func (sc *SourceCreate) SetArticleCategoryPostURL(s string) *SourceCreate {
	sc.mutation.SetArticleCategoryPostURL(s)
	return sc
}

// SetNillableArticleCategoryPostURL sets the "article_category_post_url" field if the given value is not nil.
func (sc *SourceCreate) SetNillableArticleCategoryPostURL(s *string) *SourceCreate {
	if s != nil {
		sc.SetArticleCategoryPostURL(*s)
	}
	return sc
}

// SetArticleContentSelector sets the "article_content_selector" field.
func (sc *SourceCreate) SetArticleContentSelector(cps *custom.SourcePostSelector) *SourceCreate {
	sc.mutation.SetArticleContentSelector(cps)
	return sc
}

// SetMediaFeaturedPostSelector sets the "media_featured_post_selector" field.
func (sc *SourceCreate) SetMediaFeaturedPostSelector(cps *custom.SourcePostSelector) *SourceCreate {
	sc.mutation.SetMediaFeaturedPostSelector(cps)
	return sc
}

// SetMediaFeaturedPostURL sets the "media_featured_post_url" field.
func (sc *SourceCreate) SetMediaFeaturedPostURL(s string) *SourceCreate {
	sc.mutation.SetMediaFeaturedPostURL(s)
	return sc
}

// SetNillableMediaFeaturedPostURL sets the "media_featured_post_url" field if the given value is not nil.
func (sc *SourceCreate) SetNillableMediaFeaturedPostURL(s *string) *SourceCreate {
	if s != nil {
		sc.SetMediaFeaturedPostURL(*s)
	}
	return sc
}

// SetMediaCategoryPostSelector sets the "media_category_post_selector" field.
func (sc *SourceCreate) SetMediaCategoryPostSelector(cps *custom.SourcePostSelector) *SourceCreate {
	sc.mutation.SetMediaCategoryPostSelector(cps)
	return sc
}

// SetMediaCategoryPostURL sets the "media_category_post_url" field.
func (sc *SourceCreate) SetMediaCategoryPostURL(s string) *SourceCreate {
	sc.mutation.SetMediaCategoryPostURL(s)
	return sc
}

// SetNillableMediaCategoryPostURL sets the "media_category_post_url" field if the given value is not nil.
func (sc *SourceCreate) SetNillableMediaCategoryPostURL(s *string) *SourceCreate {
	if s != nil {
		sc.SetMediaCategoryPostURL(*s)
	}
	return sc
}

// SetMediaContentSelector sets the "media_content_selector" field.
func (sc *SourceCreate) SetMediaContentSelector(cps *custom.SourcePostSelector) *SourceCreate {
	sc.mutation.SetMediaContentSelector(cps)
	return sc
}

// SetArticleCategories sets the "article_categories" field.
func (sc *SourceCreate) SetArticleCategories(m map[string]string) *SourceCreate {
	sc.mutation.SetArticleCategories(m)
	return sc
}

// SetMediaCategories sets the "media_categories" field.
func (sc *SourceCreate) SetMediaCategories(m map[string]string) *SourceCreate {
	sc.mutation.SetMediaCategories(m)
	return sc
}

// SetDescription sets the "description" field.
func (sc *SourceCreate) SetDescription(s string) *SourceCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetLanguage sets the "language" field.
func (sc *SourceCreate) SetLanguage(s string) *SourceCreate {
	sc.mutation.SetLanguage(s)
	return sc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (sc *SourceCreate) SetNillableLanguage(s *string) *SourceCreate {
	if s != nil {
		sc.SetLanguage(*s)
	}
	return sc
}

// SetCountry sets the "country" field.
func (sc *SourceCreate) SetCountry(s string) *SourceCreate {
	sc.mutation.SetCountry(s)
	return sc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (sc *SourceCreate) SetNillableCountry(s *string) *SourceCreate {
	if s != nil {
		sc.SetCountry(*s)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *SourceCreate) SetStatus(b bool) *SourceCreate {
	sc.mutation.SetStatus(b)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *SourceCreate) SetNillableStatus(b *bool) *SourceCreate {
	if b != nil {
		sc.SetStatus(*b)
	}
	return sc
}

// SetLogo sets the "logo" field.
func (sc *SourceCreate) SetLogo(s string) *SourceCreate {
	sc.mutation.SetLogo(s)
	return sc
}

// SetName sets the "name" field.
func (sc *SourceCreate) SetName(s string) *SourceCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetURL sets the "url" field.
func (sc *SourceCreate) SetURL(s string) *SourceCreate {
	sc.mutation.SetURL(s)
	return sc
}

// Mutation returns the SourceMutation object of the builder.
func (sc *SourceCreate) Mutation() *SourceMutation {
	return sc.mutation
}

// Save creates the Source in the database.
func (sc *SourceCreate) Save(ctx context.Context) (*Source, error) {
	var (
		err  error
		node *Source
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("storage: uninitialized hook (forgotten import storage/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SourceCreate) SaveX(ctx context.Context) *Source {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SourceCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SourceCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SourceCreate) defaults() {
	if _, ok := sc.mutation.Language(); !ok {
		v := source.DefaultLanguage
		sc.mutation.SetLanguage(v)
	}
	if _, ok := sc.mutation.Country(); !ok {
		v := source.DefaultCountry
		sc.mutation.SetCountry(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := source.DefaultStatus
		sc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SourceCreate) check() error {
	if _, ok := sc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`storage: missing required field "Source.description"`)}
	}
	if v, ok := sc.mutation.Description(); ok {
		if err := source.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`storage: validator failed for field "Source.description": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`storage: missing required field "Source.language"`)}
	}
	if _, ok := sc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`storage: missing required field "Source.country"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`storage: missing required field "Source.status"`)}
	}
	if _, ok := sc.mutation.Logo(); !ok {
		return &ValidationError{Name: "logo", err: errors.New(`storage: missing required field "Source.logo"`)}
	}
	if v, ok := sc.mutation.Logo(); ok {
		if err := source.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`storage: validator failed for field "Source.logo": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`storage: missing required field "Source.name"`)}
	}
	if _, ok := sc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`storage: missing required field "Source.url"`)}
	}
	return nil
}

func (sc *SourceCreate) sqlSave(ctx context.Context) (*Source, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *SourceCreate) createSpec() (*Source, *sqlgraph.CreateSpec) {
	var (
		_node = &Source{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: source.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: source.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.ArticleFeaturedPostSelector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldArticleFeaturedPostSelector,
		})
		_node.ArticleFeaturedPostSelector = value
	}
	if value, ok := sc.mutation.ArticleFeaturedPostURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldArticleFeaturedPostURL,
		})
		_node.ArticleFeaturedPostURL = value
	}
	if value, ok := sc.mutation.ArticleCategoryPostSelector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldArticleCategoryPostSelector,
		})
		_node.ArticleCategoryPostSelector = value
	}
	if value, ok := sc.mutation.ArticleCategoryPostURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldArticleCategoryPostURL,
		})
		_node.ArticleCategoryPostURL = value
	}
	if value, ok := sc.mutation.ArticleContentSelector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldArticleContentSelector,
		})
		_node.ArticleContentSelector = value
	}
	if value, ok := sc.mutation.MediaFeaturedPostSelector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldMediaFeaturedPostSelector,
		})
		_node.MediaFeaturedPostSelector = value
	}
	if value, ok := sc.mutation.MediaFeaturedPostURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldMediaFeaturedPostURL,
		})
		_node.MediaFeaturedPostURL = value
	}
	if value, ok := sc.mutation.MediaCategoryPostSelector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldMediaCategoryPostSelector,
		})
		_node.MediaCategoryPostSelector = value
	}
	if value, ok := sc.mutation.MediaCategoryPostURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldMediaCategoryPostURL,
		})
		_node.MediaCategoryPostURL = value
	}
	if value, ok := sc.mutation.MediaContentSelector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldMediaContentSelector,
		})
		_node.MediaContentSelector = value
	}
	if value, ok := sc.mutation.ArticleCategories(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldArticleCategories,
		})
		_node.ArticleCategories = value
	}
	if value, ok := sc.mutation.MediaCategories(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldMediaCategories,
		})
		_node.MediaCategories = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := sc.mutation.Language(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldLanguage,
		})
		_node.Language = value
	}
	if value, ok := sc.mutation.Country(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldCountry,
		})
		_node.Country = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: source.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := sc.mutation.Logo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldLogo,
		})
		_node.Logo = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldURL,
		})
		_node.URL = value
	}
	return _node, _spec
}

// SourceCreateBulk is the builder for creating many Source entities in bulk.
type SourceCreateBulk struct {
	config
	builders []*SourceCreate
}

// Save creates the Source entities in the database.
func (scb *SourceCreateBulk) Save(ctx context.Context) ([]*Source, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Source, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SourceCreateBulk) SaveX(ctx context.Context) []*Source {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SourceCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SourceCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
