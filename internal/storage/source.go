// Code generated by entc, DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
	"news/internal/storage/custom"
	"news/internal/storage/source"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Source is the model entity for the Source schema.
type Source struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ArticleFeaturedPostSelector holds the value of the "article_featured_post_selector" field.
	ArticleFeaturedPostSelector *custom.SourcePostSelector `json:"article_featured_post_selector,omitempty"`
	// ArticleFeaturedPostURL holds the value of the "article_featured_post_url" field.
	ArticleFeaturedPostURL string `json:"article_featured_post_url,omitempty"`
	// ArticleCategoryPostSelector holds the value of the "article_category_post_selector" field.
	ArticleCategoryPostSelector *custom.SourcePostSelector `json:"article_category_post_selector,omitempty"`
	// ArticleCategoryPostURL holds the value of the "article_category_post_url" field.
	ArticleCategoryPostURL string `json:"article_category_post_url,omitempty"`
	// ArticleContentSelector holds the value of the "article_content_selector" field.
	ArticleContentSelector *custom.SourcePostSelector `json:"article_content_selector,omitempty"`
	// MediaFeaturedPostSelector holds the value of the "media_featured_post_selector" field.
	MediaFeaturedPostSelector *custom.SourcePostSelector `json:"media_featured_post_selector,omitempty"`
	// MediaFeaturedPostURL holds the value of the "media_featured_post_url" field.
	MediaFeaturedPostURL string `json:"media_featured_post_url,omitempty"`
	// MediaCategoryPostSelector holds the value of the "media_category_post_selector" field.
	MediaCategoryPostSelector *custom.SourcePostSelector `json:"media_category_post_selector,omitempty"`
	// MediaCategoryPostURL holds the value of the "media_category_post_url" field.
	MediaCategoryPostURL string `json:"media_category_post_url,omitempty"`
	// MediaContentSelector holds the value of the "media_content_selector" field.
	MediaContentSelector *custom.SourcePostSelector `json:"media_content_selector,omitempty"`
	// ArticleCategories holds the value of the "article_categories" field.
	ArticleCategories map[string]string `json:"article_categories,omitempty"`
	// MediaCategories holds the value of the "media_categories" field.
	MediaCategories map[string]string `json:"media_categories,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Source) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case source.FieldArticleFeaturedPostSelector, source.FieldArticleCategoryPostSelector, source.FieldArticleContentSelector, source.FieldMediaFeaturedPostSelector, source.FieldMediaCategoryPostSelector, source.FieldMediaContentSelector, source.FieldArticleCategories, source.FieldMediaCategories:
			values[i] = new([]byte)
		case source.FieldStatus:
			values[i] = new(sql.NullBool)
		case source.FieldID:
			values[i] = new(sql.NullInt64)
		case source.FieldArticleFeaturedPostURL, source.FieldArticleCategoryPostURL, source.FieldMediaFeaturedPostURL, source.FieldMediaCategoryPostURL, source.FieldLanguage, source.FieldCountry, source.FieldLogo, source.FieldName, source.FieldURL:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Source", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Source fields.
func (s *Source) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case source.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case source.FieldArticleFeaturedPostSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field article_featured_post_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.ArticleFeaturedPostSelector); err != nil {
					return fmt.Errorf("unmarshal field article_featured_post_selector: %w", err)
				}
			}
		case source.FieldArticleFeaturedPostURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field article_featured_post_url", values[i])
			} else if value.Valid {
				s.ArticleFeaturedPostURL = value.String
			}
		case source.FieldArticleCategoryPostSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field article_category_post_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.ArticleCategoryPostSelector); err != nil {
					return fmt.Errorf("unmarshal field article_category_post_selector: %w", err)
				}
			}
		case source.FieldArticleCategoryPostURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field article_category_post_url", values[i])
			} else if value.Valid {
				s.ArticleCategoryPostURL = value.String
			}
		case source.FieldArticleContentSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field article_content_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.ArticleContentSelector); err != nil {
					return fmt.Errorf("unmarshal field article_content_selector: %w", err)
				}
			}
		case source.FieldMediaFeaturedPostSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field media_featured_post_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.MediaFeaturedPostSelector); err != nil {
					return fmt.Errorf("unmarshal field media_featured_post_selector: %w", err)
				}
			}
		case source.FieldMediaFeaturedPostURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_featured_post_url", values[i])
			} else if value.Valid {
				s.MediaFeaturedPostURL = value.String
			}
		case source.FieldMediaCategoryPostSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field media_category_post_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.MediaCategoryPostSelector); err != nil {
					return fmt.Errorf("unmarshal field media_category_post_selector: %w", err)
				}
			}
		case source.FieldMediaCategoryPostURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_category_post_url", values[i])
			} else if value.Valid {
				s.MediaCategoryPostURL = value.String
			}
		case source.FieldMediaContentSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field media_content_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.MediaContentSelector); err != nil {
					return fmt.Errorf("unmarshal field media_content_selector: %w", err)
				}
			}
		case source.FieldArticleCategories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field article_categories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.ArticleCategories); err != nil {
					return fmt.Errorf("unmarshal field article_categories: %w", err)
				}
			}
		case source.FieldMediaCategories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field media_categories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.MediaCategories); err != nil {
					return fmt.Errorf("unmarshal field media_categories: %w", err)
				}
			}
		case source.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				s.Language = value.String
			}
		case source.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				s.Country = value.String
			}
		case source.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = value.Bool
			}
		case source.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				s.Logo = value.String
			}
		case source.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case source.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				s.URL = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Source.
// Note that you need to call Source.Unwrap() before calling this method if this Source
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Source) Update() *SourceUpdateOne {
	return (&SourceClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Source entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Source) Unwrap() *Source {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("storage: Source is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Source) String() string {
	var builder strings.Builder
	builder.WriteString("Source(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", article_featured_post_selector=")
	builder.WriteString(fmt.Sprintf("%v", s.ArticleFeaturedPostSelector))
	builder.WriteString(", article_featured_post_url=")
	builder.WriteString(s.ArticleFeaturedPostURL)
	builder.WriteString(", article_category_post_selector=")
	builder.WriteString(fmt.Sprintf("%v", s.ArticleCategoryPostSelector))
	builder.WriteString(", article_category_post_url=")
	builder.WriteString(s.ArticleCategoryPostURL)
	builder.WriteString(", article_content_selector=")
	builder.WriteString(fmt.Sprintf("%v", s.ArticleContentSelector))
	builder.WriteString(", media_featured_post_selector=")
	builder.WriteString(fmt.Sprintf("%v", s.MediaFeaturedPostSelector))
	builder.WriteString(", media_featured_post_url=")
	builder.WriteString(s.MediaFeaturedPostURL)
	builder.WriteString(", media_category_post_selector=")
	builder.WriteString(fmt.Sprintf("%v", s.MediaCategoryPostSelector))
	builder.WriteString(", media_category_post_url=")
	builder.WriteString(s.MediaCategoryPostURL)
	builder.WriteString(", media_content_selector=")
	builder.WriteString(fmt.Sprintf("%v", s.MediaContentSelector))
	builder.WriteString(", article_categories=")
	builder.WriteString(fmt.Sprintf("%v", s.ArticleCategories))
	builder.WriteString(", media_categories=")
	builder.WriteString(fmt.Sprintf("%v", s.MediaCategories))
	builder.WriteString(", language=")
	builder.WriteString(s.Language)
	builder.WriteString(", country=")
	builder.WriteString(s.Country)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", logo=")
	builder.WriteString(s.Logo)
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", url=")
	builder.WriteString(s.URL)
	builder.WriteByte(')')
	return builder.String()
}

// Sources is a parsable slice of Source.
type Sources []*Source

func (s Sources) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
