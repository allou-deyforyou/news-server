// Code generated by entc, DO NOT EDIT.

package storage

import (
	"context"
	"errors"
	"fmt"
	"news/internal/storage/mediapost"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MediaPostCreate is the builder for creating a MediaPost entity.
type MediaPostCreate struct {
	config
	mutation *MediaPostMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (mpc *MediaPostCreate) SetStatus(b bool) *MediaPostCreate {
	mpc.mutation.SetStatus(b)
	return mpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpc *MediaPostCreate) SetNillableStatus(b *bool) *MediaPostCreate {
	if b != nil {
		mpc.SetStatus(*b)
	}
	return mpc
}

// SetLive sets the "live" field.
func (mpc *MediaPostCreate) SetLive(b bool) *MediaPostCreate {
	mpc.mutation.SetLive(b)
	return mpc
}

// SetNillableLive sets the "live" field if the given value is not nil.
func (mpc *MediaPostCreate) SetNillableLive(b *bool) *MediaPostCreate {
	if b != nil {
		mpc.SetLive(*b)
	}
	return mpc
}

// SetType sets the "type" field.
func (mpc *MediaPostCreate) SetType(m mediapost.Type) *MediaPostCreate {
	mpc.mutation.SetType(m)
	return mpc
}

// SetTitle sets the "title" field.
func (mpc *MediaPostCreate) SetTitle(s string) *MediaPostCreate {
	mpc.mutation.SetTitle(s)
	return mpc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mpc *MediaPostCreate) SetNillableTitle(s *string) *MediaPostCreate {
	if s != nil {
		mpc.SetTitle(*s)
	}
	return mpc
}

// SetLogo sets the "logo" field.
func (mpc *MediaPostCreate) SetLogo(s string) *MediaPostCreate {
	mpc.mutation.SetLogo(s)
	return mpc
}

// SetSource sets the "source" field.
func (mpc *MediaPostCreate) SetSource(s string) *MediaPostCreate {
	mpc.mutation.SetSource(s)
	return mpc
}

// SetDescription sets the "description" field.
func (mpc *MediaPostCreate) SetDescription(s string) *MediaPostCreate {
	mpc.mutation.SetDescription(s)
	return mpc
}

// SetImage sets the "image" field.
func (mpc *MediaPostCreate) SetImage(s string) *MediaPostCreate {
	mpc.mutation.SetImage(s)
	return mpc
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (mpc *MediaPostCreate) SetNillableImage(s *string) *MediaPostCreate {
	if s != nil {
		mpc.SetImage(*s)
	}
	return mpc
}

// SetDate sets the "date" field.
func (mpc *MediaPostCreate) SetDate(t time.Time) *MediaPostCreate {
	mpc.mutation.SetDate(t)
	return mpc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (mpc *MediaPostCreate) SetNillableDate(t *time.Time) *MediaPostCreate {
	if t != nil {
		mpc.SetDate(*t)
	}
	return mpc
}

// SetLink sets the "link" field.
func (mpc *MediaPostCreate) SetLink(s string) *MediaPostCreate {
	mpc.mutation.SetLink(s)
	return mpc
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (mpc *MediaPostCreate) SetNillableLink(s *string) *MediaPostCreate {
	if s != nil {
		mpc.SetLink(*s)
	}
	return mpc
}

// SetContent sets the "content" field.
func (mpc *MediaPostCreate) SetContent(s string) *MediaPostCreate {
	mpc.mutation.SetContent(s)
	return mpc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mpc *MediaPostCreate) SetNillableContent(s *string) *MediaPostCreate {
	if s != nil {
		mpc.SetContent(*s)
	}
	return mpc
}

// Mutation returns the MediaPostMutation object of the builder.
func (mpc *MediaPostCreate) Mutation() *MediaPostMutation {
	return mpc.mutation
}

// Save creates the MediaPost in the database.
func (mpc *MediaPostCreate) Save(ctx context.Context) (*MediaPost, error) {
	var (
		err  error
		node *MediaPost
	)
	mpc.defaults()
	if len(mpc.hooks) == 0 {
		if err = mpc.check(); err != nil {
			return nil, err
		}
		node, err = mpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MediaPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mpc.check(); err != nil {
				return nil, err
			}
			mpc.mutation = mutation
			if node, err = mpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mpc.hooks) - 1; i >= 0; i-- {
			if mpc.hooks[i] == nil {
				return nil, fmt.Errorf("storage: uninitialized hook (forgotten import storage/runtime?)")
			}
			mut = mpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mpc *MediaPostCreate) SaveX(ctx context.Context) *MediaPost {
	v, err := mpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpc *MediaPostCreate) Exec(ctx context.Context) error {
	_, err := mpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpc *MediaPostCreate) ExecX(ctx context.Context) {
	if err := mpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpc *MediaPostCreate) defaults() {
	if _, ok := mpc.mutation.Status(); !ok {
		v := mediapost.DefaultStatus
		mpc.mutation.SetStatus(v)
	}
	if _, ok := mpc.mutation.Live(); !ok {
		v := mediapost.DefaultLive
		mpc.mutation.SetLive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpc *MediaPostCreate) check() error {
	if _, ok := mpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`storage: missing required field "MediaPost.status"`)}
	}
	if _, ok := mpc.mutation.Live(); !ok {
		return &ValidationError{Name: "live", err: errors.New(`storage: missing required field "MediaPost.live"`)}
	}
	if _, ok := mpc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`storage: missing required field "MediaPost.type"`)}
	}
	if v, ok := mpc.mutation.GetType(); ok {
		if err := mediapost.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`storage: validator failed for field "MediaPost.type": %w`, err)}
		}
	}
	if _, ok := mpc.mutation.Logo(); !ok {
		return &ValidationError{Name: "logo", err: errors.New(`storage: missing required field "MediaPost.logo"`)}
	}
	if _, ok := mpc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`storage: missing required field "MediaPost.source"`)}
	}
	if _, ok := mpc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`storage: missing required field "MediaPost.description"`)}
	}
	return nil
}

func (mpc *MediaPostCreate) sqlSave(ctx context.Context) (*MediaPost, error) {
	_node, _spec := mpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mpc *MediaPostCreate) createSpec() (*MediaPost, *sqlgraph.CreateSpec) {
	var (
		_node = &MediaPost{config: mpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mediapost.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mediapost.FieldID,
			},
		}
	)
	if value, ok := mpc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mediapost.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := mpc.mutation.Live(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mediapost.FieldLive,
		})
		_node.Live = value
	}
	if value, ok := mpc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mediapost.FieldType,
		})
		_node.Type = value
	}
	if value, ok := mpc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := mpc.mutation.Logo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldLogo,
		})
		_node.Logo = value
	}
	if value, ok := mpc.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldSource,
		})
		_node.Source = value
	}
	if value, ok := mpc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := mpc.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := mpc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mediapost.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := mpc.mutation.Link(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldLink,
		})
		_node.Link = value
	}
	if value, ok := mpc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldContent,
		})
		_node.Content = value
	}
	return _node, _spec
}

// MediaPostCreateBulk is the builder for creating many MediaPost entities in bulk.
type MediaPostCreateBulk struct {
	config
	builders []*MediaPostCreate
}

// Save creates the MediaPost entities in the database.
func (mpcb *MediaPostCreateBulk) Save(ctx context.Context) ([]*MediaPost, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mpcb.builders))
	nodes := make([]*MediaPost, len(mpcb.builders))
	mutators := make([]Mutator, len(mpcb.builders))
	for i := range mpcb.builders {
		func(i int, root context.Context) {
			builder := mpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MediaPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpcb *MediaPostCreateBulk) SaveX(ctx context.Context) []*MediaPost {
	v, err := mpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpcb *MediaPostCreateBulk) Exec(ctx context.Context) error {
	_, err := mpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpcb *MediaPostCreateBulk) ExecX(ctx context.Context) {
	if err := mpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
