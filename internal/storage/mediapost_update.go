// Code generated by entc, DO NOT EDIT.

package storage

import (
	"context"
	"errors"
	"fmt"
	"news/internal/storage/mediapost"
	"news/internal/storage/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MediaPostUpdate is the builder for updating MediaPost entities.
type MediaPostUpdate struct {
	config
	hooks    []Hook
	mutation *MediaPostMutation
}

// Where appends a list predicates to the MediaPostUpdate builder.
func (mpu *MediaPostUpdate) Where(ps ...predicate.MediaPost) *MediaPostUpdate {
	mpu.mutation.Where(ps...)
	return mpu
}

// SetStatus sets the "status" field.
func (mpu *MediaPostUpdate) SetStatus(b bool) *MediaPostUpdate {
	mpu.mutation.SetStatus(b)
	return mpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpu *MediaPostUpdate) SetNillableStatus(b *bool) *MediaPostUpdate {
	if b != nil {
		mpu.SetStatus(*b)
	}
	return mpu
}

// SetLive sets the "live" field.
func (mpu *MediaPostUpdate) SetLive(b bool) *MediaPostUpdate {
	mpu.mutation.SetLive(b)
	return mpu
}

// SetNillableLive sets the "live" field if the given value is not nil.
func (mpu *MediaPostUpdate) SetNillableLive(b *bool) *MediaPostUpdate {
	if b != nil {
		mpu.SetLive(*b)
	}
	return mpu
}

// SetType sets the "type" field.
func (mpu *MediaPostUpdate) SetType(m mediapost.Type) *MediaPostUpdate {
	mpu.mutation.SetType(m)
	return mpu
}

// SetTitle sets the "title" field.
func (mpu *MediaPostUpdate) SetTitle(s string) *MediaPostUpdate {
	mpu.mutation.SetTitle(s)
	return mpu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mpu *MediaPostUpdate) SetNillableTitle(s *string) *MediaPostUpdate {
	if s != nil {
		mpu.SetTitle(*s)
	}
	return mpu
}

// ClearTitle clears the value of the "title" field.
func (mpu *MediaPostUpdate) ClearTitle() *MediaPostUpdate {
	mpu.mutation.ClearTitle()
	return mpu
}

// SetLogo sets the "logo" field.
func (mpu *MediaPostUpdate) SetLogo(s string) *MediaPostUpdate {
	mpu.mutation.SetLogo(s)
	return mpu
}

// SetSource sets the "source" field.
func (mpu *MediaPostUpdate) SetSource(s string) *MediaPostUpdate {
	mpu.mutation.SetSource(s)
	return mpu
}

// SetDescription sets the "description" field.
func (mpu *MediaPostUpdate) SetDescription(s string) *MediaPostUpdate {
	mpu.mutation.SetDescription(s)
	return mpu
}

// SetImage sets the "image" field.
func (mpu *MediaPostUpdate) SetImage(s string) *MediaPostUpdate {
	mpu.mutation.SetImage(s)
	return mpu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (mpu *MediaPostUpdate) SetNillableImage(s *string) *MediaPostUpdate {
	if s != nil {
		mpu.SetImage(*s)
	}
	return mpu
}

// ClearImage clears the value of the "image" field.
func (mpu *MediaPostUpdate) ClearImage() *MediaPostUpdate {
	mpu.mutation.ClearImage()
	return mpu
}

// SetDate sets the "date" field.
func (mpu *MediaPostUpdate) SetDate(t time.Time) *MediaPostUpdate {
	mpu.mutation.SetDate(t)
	return mpu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (mpu *MediaPostUpdate) SetNillableDate(t *time.Time) *MediaPostUpdate {
	if t != nil {
		mpu.SetDate(*t)
	}
	return mpu
}

// ClearDate clears the value of the "date" field.
func (mpu *MediaPostUpdate) ClearDate() *MediaPostUpdate {
	mpu.mutation.ClearDate()
	return mpu
}

// SetLink sets the "link" field.
func (mpu *MediaPostUpdate) SetLink(s string) *MediaPostUpdate {
	mpu.mutation.SetLink(s)
	return mpu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (mpu *MediaPostUpdate) SetNillableLink(s *string) *MediaPostUpdate {
	if s != nil {
		mpu.SetLink(*s)
	}
	return mpu
}

// ClearLink clears the value of the "link" field.
func (mpu *MediaPostUpdate) ClearLink() *MediaPostUpdate {
	mpu.mutation.ClearLink()
	return mpu
}

// SetContent sets the "content" field.
func (mpu *MediaPostUpdate) SetContent(s string) *MediaPostUpdate {
	mpu.mutation.SetContent(s)
	return mpu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mpu *MediaPostUpdate) SetNillableContent(s *string) *MediaPostUpdate {
	if s != nil {
		mpu.SetContent(*s)
	}
	return mpu
}

// ClearContent clears the value of the "content" field.
func (mpu *MediaPostUpdate) ClearContent() *MediaPostUpdate {
	mpu.mutation.ClearContent()
	return mpu
}

// Mutation returns the MediaPostMutation object of the builder.
func (mpu *MediaPostUpdate) Mutation() *MediaPostMutation {
	return mpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpu *MediaPostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mpu.hooks) == 0 {
		if err = mpu.check(); err != nil {
			return 0, err
		}
		affected, err = mpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MediaPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mpu.check(); err != nil {
				return 0, err
			}
			mpu.mutation = mutation
			affected, err = mpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mpu.hooks) - 1; i >= 0; i-- {
			if mpu.hooks[i] == nil {
				return 0, fmt.Errorf("storage: uninitialized hook (forgotten import storage/runtime?)")
			}
			mut = mpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *MediaPostUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *MediaPostUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *MediaPostUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpu *MediaPostUpdate) check() error {
	if v, ok := mpu.mutation.GetType(); ok {
		if err := mediapost.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`storage: validator failed for field "MediaPost.type": %w`, err)}
		}
	}
	return nil
}

func (mpu *MediaPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mediapost.Table,
			Columns: mediapost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mediapost.FieldID,
			},
		},
	}
	if ps := mpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mediapost.FieldStatus,
		})
	}
	if value, ok := mpu.mutation.Live(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mediapost.FieldLive,
		})
	}
	if value, ok := mpu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mediapost.FieldType,
		})
	}
	if value, ok := mpu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldTitle,
		})
	}
	if mpu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: mediapost.FieldTitle,
		})
	}
	if value, ok := mpu.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldLogo,
		})
	}
	if value, ok := mpu.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldSource,
		})
	}
	if value, ok := mpu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldDescription,
		})
	}
	if value, ok := mpu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldImage,
		})
	}
	if mpu.mutation.ImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: mediapost.FieldImage,
		})
	}
	if value, ok := mpu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mediapost.FieldDate,
		})
	}
	if mpu.mutation.DateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: mediapost.FieldDate,
		})
	}
	if value, ok := mpu.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldLink,
		})
	}
	if mpu.mutation.LinkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: mediapost.FieldLink,
		})
	}
	if value, ok := mpu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldContent,
		})
	}
	if mpu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: mediapost.FieldContent,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mediapost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MediaPostUpdateOne is the builder for updating a single MediaPost entity.
type MediaPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MediaPostMutation
}

// SetStatus sets the "status" field.
func (mpuo *MediaPostUpdateOne) SetStatus(b bool) *MediaPostUpdateOne {
	mpuo.mutation.SetStatus(b)
	return mpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpuo *MediaPostUpdateOne) SetNillableStatus(b *bool) *MediaPostUpdateOne {
	if b != nil {
		mpuo.SetStatus(*b)
	}
	return mpuo
}

// SetLive sets the "live" field.
func (mpuo *MediaPostUpdateOne) SetLive(b bool) *MediaPostUpdateOne {
	mpuo.mutation.SetLive(b)
	return mpuo
}

// SetNillableLive sets the "live" field if the given value is not nil.
func (mpuo *MediaPostUpdateOne) SetNillableLive(b *bool) *MediaPostUpdateOne {
	if b != nil {
		mpuo.SetLive(*b)
	}
	return mpuo
}

// SetType sets the "type" field.
func (mpuo *MediaPostUpdateOne) SetType(m mediapost.Type) *MediaPostUpdateOne {
	mpuo.mutation.SetType(m)
	return mpuo
}

// SetTitle sets the "title" field.
func (mpuo *MediaPostUpdateOne) SetTitle(s string) *MediaPostUpdateOne {
	mpuo.mutation.SetTitle(s)
	return mpuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mpuo *MediaPostUpdateOne) SetNillableTitle(s *string) *MediaPostUpdateOne {
	if s != nil {
		mpuo.SetTitle(*s)
	}
	return mpuo
}

// ClearTitle clears the value of the "title" field.
func (mpuo *MediaPostUpdateOne) ClearTitle() *MediaPostUpdateOne {
	mpuo.mutation.ClearTitle()
	return mpuo
}

// SetLogo sets the "logo" field.
func (mpuo *MediaPostUpdateOne) SetLogo(s string) *MediaPostUpdateOne {
	mpuo.mutation.SetLogo(s)
	return mpuo
}

// SetSource sets the "source" field.
func (mpuo *MediaPostUpdateOne) SetSource(s string) *MediaPostUpdateOne {
	mpuo.mutation.SetSource(s)
	return mpuo
}

// SetDescription sets the "description" field.
func (mpuo *MediaPostUpdateOne) SetDescription(s string) *MediaPostUpdateOne {
	mpuo.mutation.SetDescription(s)
	return mpuo
}

// SetImage sets the "image" field.
func (mpuo *MediaPostUpdateOne) SetImage(s string) *MediaPostUpdateOne {
	mpuo.mutation.SetImage(s)
	return mpuo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (mpuo *MediaPostUpdateOne) SetNillableImage(s *string) *MediaPostUpdateOne {
	if s != nil {
		mpuo.SetImage(*s)
	}
	return mpuo
}

// ClearImage clears the value of the "image" field.
func (mpuo *MediaPostUpdateOne) ClearImage() *MediaPostUpdateOne {
	mpuo.mutation.ClearImage()
	return mpuo
}

// SetDate sets the "date" field.
func (mpuo *MediaPostUpdateOne) SetDate(t time.Time) *MediaPostUpdateOne {
	mpuo.mutation.SetDate(t)
	return mpuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (mpuo *MediaPostUpdateOne) SetNillableDate(t *time.Time) *MediaPostUpdateOne {
	if t != nil {
		mpuo.SetDate(*t)
	}
	return mpuo
}

// ClearDate clears the value of the "date" field.
func (mpuo *MediaPostUpdateOne) ClearDate() *MediaPostUpdateOne {
	mpuo.mutation.ClearDate()
	return mpuo
}

// SetLink sets the "link" field.
func (mpuo *MediaPostUpdateOne) SetLink(s string) *MediaPostUpdateOne {
	mpuo.mutation.SetLink(s)
	return mpuo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (mpuo *MediaPostUpdateOne) SetNillableLink(s *string) *MediaPostUpdateOne {
	if s != nil {
		mpuo.SetLink(*s)
	}
	return mpuo
}

// ClearLink clears the value of the "link" field.
func (mpuo *MediaPostUpdateOne) ClearLink() *MediaPostUpdateOne {
	mpuo.mutation.ClearLink()
	return mpuo
}

// SetContent sets the "content" field.
func (mpuo *MediaPostUpdateOne) SetContent(s string) *MediaPostUpdateOne {
	mpuo.mutation.SetContent(s)
	return mpuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mpuo *MediaPostUpdateOne) SetNillableContent(s *string) *MediaPostUpdateOne {
	if s != nil {
		mpuo.SetContent(*s)
	}
	return mpuo
}

// ClearContent clears the value of the "content" field.
func (mpuo *MediaPostUpdateOne) ClearContent() *MediaPostUpdateOne {
	mpuo.mutation.ClearContent()
	return mpuo
}

// Mutation returns the MediaPostMutation object of the builder.
func (mpuo *MediaPostUpdateOne) Mutation() *MediaPostMutation {
	return mpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpuo *MediaPostUpdateOne) Select(field string, fields ...string) *MediaPostUpdateOne {
	mpuo.fields = append([]string{field}, fields...)
	return mpuo
}

// Save executes the query and returns the updated MediaPost entity.
func (mpuo *MediaPostUpdateOne) Save(ctx context.Context) (*MediaPost, error) {
	var (
		err  error
		node *MediaPost
	)
	if len(mpuo.hooks) == 0 {
		if err = mpuo.check(); err != nil {
			return nil, err
		}
		node, err = mpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MediaPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mpuo.check(); err != nil {
				return nil, err
			}
			mpuo.mutation = mutation
			node, err = mpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mpuo.hooks) - 1; i >= 0; i-- {
			if mpuo.hooks[i] == nil {
				return nil, fmt.Errorf("storage: uninitialized hook (forgotten import storage/runtime?)")
			}
			mut = mpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *MediaPostUpdateOne) SaveX(ctx context.Context) *MediaPost {
	node, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuo *MediaPostUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *MediaPostUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpuo *MediaPostUpdateOne) check() error {
	if v, ok := mpuo.mutation.GetType(); ok {
		if err := mediapost.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`storage: validator failed for field "MediaPost.type": %w`, err)}
		}
	}
	return nil
}

func (mpuo *MediaPostUpdateOne) sqlSave(ctx context.Context) (_node *MediaPost, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mediapost.Table,
			Columns: mediapost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mediapost.FieldID,
			},
		},
	}
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`storage: missing "MediaPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mediapost.FieldID)
		for _, f := range fields {
			if !mediapost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("storage: invalid field %q for query", f)}
			}
			if f != mediapost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mediapost.FieldStatus,
		})
	}
	if value, ok := mpuo.mutation.Live(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: mediapost.FieldLive,
		})
	}
	if value, ok := mpuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mediapost.FieldType,
		})
	}
	if value, ok := mpuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldTitle,
		})
	}
	if mpuo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: mediapost.FieldTitle,
		})
	}
	if value, ok := mpuo.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldLogo,
		})
	}
	if value, ok := mpuo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldSource,
		})
	}
	if value, ok := mpuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldDescription,
		})
	}
	if value, ok := mpuo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldImage,
		})
	}
	if mpuo.mutation.ImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: mediapost.FieldImage,
		})
	}
	if value, ok := mpuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mediapost.FieldDate,
		})
	}
	if mpuo.mutation.DateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: mediapost.FieldDate,
		})
	}
	if value, ok := mpuo.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldLink,
		})
	}
	if mpuo.mutation.LinkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: mediapost.FieldLink,
		})
	}
	if value, ok := mpuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediapost.FieldContent,
		})
	}
	if mpuo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: mediapost.FieldContent,
		})
	}
	_node = &MediaPost{config: mpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mediapost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
