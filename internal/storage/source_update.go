// Code generated by entc, DO NOT EDIT.

package storage

import (
	"context"
	"errors"
	"fmt"
	"news/internal/storage/custom"
	"news/internal/storage/predicate"
	"news/internal/storage/source"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SourceUpdate is the builder for updating Source entities.
type SourceUpdate struct {
	config
	hooks    []Hook
	mutation *SourceMutation
}

// Where appends a list predicates to the SourceUpdate builder.
func (su *SourceUpdate) Where(ps ...predicate.Source) *SourceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetArticleFeaturedPostSelector sets the "article_featured_post_selector" field.
func (su *SourceUpdate) SetArticleFeaturedPostSelector(cps *custom.SourcePostSelector) *SourceUpdate {
	su.mutation.SetArticleFeaturedPostSelector(cps)
	return su
}

// ClearArticleFeaturedPostSelector clears the value of the "article_featured_post_selector" field.
func (su *SourceUpdate) ClearArticleFeaturedPostSelector() *SourceUpdate {
	su.mutation.ClearArticleFeaturedPostSelector()
	return su
}

// SetArticleFeaturedPostURL sets the "article_featured_post_url" field.
func (su *SourceUpdate) SetArticleFeaturedPostURL(s string) *SourceUpdate {
	su.mutation.SetArticleFeaturedPostURL(s)
	return su
}

// SetNillableArticleFeaturedPostURL sets the "article_featured_post_url" field if the given value is not nil.
func (su *SourceUpdate) SetNillableArticleFeaturedPostURL(s *string) *SourceUpdate {
	if s != nil {
		su.SetArticleFeaturedPostURL(*s)
	}
	return su
}

// ClearArticleFeaturedPostURL clears the value of the "article_featured_post_url" field.
func (su *SourceUpdate) ClearArticleFeaturedPostURL() *SourceUpdate {
	su.mutation.ClearArticleFeaturedPostURL()
	return su
}

// SetArticleCategoryPostSelector sets the "article_category_post_selector" field.
func (su *SourceUpdate) SetArticleCategoryPostSelector(cps *custom.SourcePostSelector) *SourceUpdate {
	su.mutation.SetArticleCategoryPostSelector(cps)
	return su
}

// ClearArticleCategoryPostSelector clears the value of the "article_category_post_selector" field.
func (su *SourceUpdate) ClearArticleCategoryPostSelector() *SourceUpdate {
	su.mutation.ClearArticleCategoryPostSelector()
	return su
}

// SetArticleCategoryPostURL sets the "article_category_post_url" field.
func (su *SourceUpdate) SetArticleCategoryPostURL(s string) *SourceUpdate {
	su.mutation.SetArticleCategoryPostURL(s)
	return su
}

// SetNillableArticleCategoryPostURL sets the "article_category_post_url" field if the given value is not nil.
func (su *SourceUpdate) SetNillableArticleCategoryPostURL(s *string) *SourceUpdate {
	if s != nil {
		su.SetArticleCategoryPostURL(*s)
	}
	return su
}

// ClearArticleCategoryPostURL clears the value of the "article_category_post_url" field.
func (su *SourceUpdate) ClearArticleCategoryPostURL() *SourceUpdate {
	su.mutation.ClearArticleCategoryPostURL()
	return su
}

// SetArticleContentSelector sets the "article_content_selector" field.
func (su *SourceUpdate) SetArticleContentSelector(cps *custom.SourcePostSelector) *SourceUpdate {
	su.mutation.SetArticleContentSelector(cps)
	return su
}

// ClearArticleContentSelector clears the value of the "article_content_selector" field.
func (su *SourceUpdate) ClearArticleContentSelector() *SourceUpdate {
	su.mutation.ClearArticleContentSelector()
	return su
}

// SetMediaFeaturedPostSelector sets the "media_featured_post_selector" field.
func (su *SourceUpdate) SetMediaFeaturedPostSelector(cps *custom.SourcePostSelector) *SourceUpdate {
	su.mutation.SetMediaFeaturedPostSelector(cps)
	return su
}

// ClearMediaFeaturedPostSelector clears the value of the "media_featured_post_selector" field.
func (su *SourceUpdate) ClearMediaFeaturedPostSelector() *SourceUpdate {
	su.mutation.ClearMediaFeaturedPostSelector()
	return su
}

// SetMediaFeaturedPostURL sets the "media_featured_post_url" field.
func (su *SourceUpdate) SetMediaFeaturedPostURL(s string) *SourceUpdate {
	su.mutation.SetMediaFeaturedPostURL(s)
	return su
}

// SetNillableMediaFeaturedPostURL sets the "media_featured_post_url" field if the given value is not nil.
func (su *SourceUpdate) SetNillableMediaFeaturedPostURL(s *string) *SourceUpdate {
	if s != nil {
		su.SetMediaFeaturedPostURL(*s)
	}
	return su
}

// ClearMediaFeaturedPostURL clears the value of the "media_featured_post_url" field.
func (su *SourceUpdate) ClearMediaFeaturedPostURL() *SourceUpdate {
	su.mutation.ClearMediaFeaturedPostURL()
	return su
}

// SetMediaCategoryPostSelector sets the "media_category_post_selector" field.
func (su *SourceUpdate) SetMediaCategoryPostSelector(cps *custom.SourcePostSelector) *SourceUpdate {
	su.mutation.SetMediaCategoryPostSelector(cps)
	return su
}

// ClearMediaCategoryPostSelector clears the value of the "media_category_post_selector" field.
func (su *SourceUpdate) ClearMediaCategoryPostSelector() *SourceUpdate {
	su.mutation.ClearMediaCategoryPostSelector()
	return su
}

// SetMediaCategoryPostURL sets the "media_category_post_url" field.
func (su *SourceUpdate) SetMediaCategoryPostURL(s string) *SourceUpdate {
	su.mutation.SetMediaCategoryPostURL(s)
	return su
}

// SetNillableMediaCategoryPostURL sets the "media_category_post_url" field if the given value is not nil.
func (su *SourceUpdate) SetNillableMediaCategoryPostURL(s *string) *SourceUpdate {
	if s != nil {
		su.SetMediaCategoryPostURL(*s)
	}
	return su
}

// ClearMediaCategoryPostURL clears the value of the "media_category_post_url" field.
func (su *SourceUpdate) ClearMediaCategoryPostURL() *SourceUpdate {
	su.mutation.ClearMediaCategoryPostURL()
	return su
}

// SetMediaContentSelector sets the "media_content_selector" field.
func (su *SourceUpdate) SetMediaContentSelector(cps *custom.SourcePostSelector) *SourceUpdate {
	su.mutation.SetMediaContentSelector(cps)
	return su
}

// ClearMediaContentSelector clears the value of the "media_content_selector" field.
func (su *SourceUpdate) ClearMediaContentSelector() *SourceUpdate {
	su.mutation.ClearMediaContentSelector()
	return su
}

// SetArticleCategories sets the "article_categories" field.
func (su *SourceUpdate) SetArticleCategories(m map[string]string) *SourceUpdate {
	su.mutation.SetArticleCategories(m)
	return su
}

// ClearArticleCategories clears the value of the "article_categories" field.
func (su *SourceUpdate) ClearArticleCategories() *SourceUpdate {
	su.mutation.ClearArticleCategories()
	return su
}

// SetMediaCategories sets the "media_categories" field.
func (su *SourceUpdate) SetMediaCategories(m map[string]string) *SourceUpdate {
	su.mutation.SetMediaCategories(m)
	return su
}

// ClearMediaCategories clears the value of the "media_categories" field.
func (su *SourceUpdate) ClearMediaCategories() *SourceUpdate {
	su.mutation.ClearMediaCategories()
	return su
}

// SetDescription sets the "description" field.
func (su *SourceUpdate) SetDescription(s string) *SourceUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetLanguage sets the "language" field.
func (su *SourceUpdate) SetLanguage(s string) *SourceUpdate {
	su.mutation.SetLanguage(s)
	return su
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (su *SourceUpdate) SetNillableLanguage(s *string) *SourceUpdate {
	if s != nil {
		su.SetLanguage(*s)
	}
	return su
}

// SetCountry sets the "country" field.
func (su *SourceUpdate) SetCountry(s string) *SourceUpdate {
	su.mutation.SetCountry(s)
	return su
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (su *SourceUpdate) SetNillableCountry(s *string) *SourceUpdate {
	if s != nil {
		su.SetCountry(*s)
	}
	return su
}

// SetStatus sets the "status" field.
func (su *SourceUpdate) SetStatus(b bool) *SourceUpdate {
	su.mutation.SetStatus(b)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SourceUpdate) SetNillableStatus(b *bool) *SourceUpdate {
	if b != nil {
		su.SetStatus(*b)
	}
	return su
}

// SetLogo sets the "logo" field.
func (su *SourceUpdate) SetLogo(s string) *SourceUpdate {
	su.mutation.SetLogo(s)
	return su
}

// SetName sets the "name" field.
func (su *SourceUpdate) SetName(s string) *SourceUpdate {
	su.mutation.SetName(s)
	return su
}

// SetURL sets the "url" field.
func (su *SourceUpdate) SetURL(s string) *SourceUpdate {
	su.mutation.SetURL(s)
	return su
}

// Mutation returns the SourceMutation object of the builder.
func (su *SourceUpdate) Mutation() *SourceMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SourceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("storage: uninitialized hook (forgotten import storage/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SourceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SourceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SourceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SourceUpdate) check() error {
	if v, ok := su.mutation.Description(); ok {
		if err := source.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`storage: validator failed for field "Source.description": %w`, err)}
		}
	}
	if v, ok := su.mutation.Logo(); ok {
		if err := source.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`storage: validator failed for field "Source.logo": %w`, err)}
		}
	}
	return nil
}

func (su *SourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   source.Table,
			Columns: source.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: source.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.ArticleFeaturedPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldArticleFeaturedPostSelector,
		})
	}
	if su.mutation.ArticleFeaturedPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldArticleFeaturedPostSelector,
		})
	}
	if value, ok := su.mutation.ArticleFeaturedPostURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldArticleFeaturedPostURL,
		})
	}
	if su.mutation.ArticleFeaturedPostURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: source.FieldArticleFeaturedPostURL,
		})
	}
	if value, ok := su.mutation.ArticleCategoryPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldArticleCategoryPostSelector,
		})
	}
	if su.mutation.ArticleCategoryPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldArticleCategoryPostSelector,
		})
	}
	if value, ok := su.mutation.ArticleCategoryPostURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldArticleCategoryPostURL,
		})
	}
	if su.mutation.ArticleCategoryPostURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: source.FieldArticleCategoryPostURL,
		})
	}
	if value, ok := su.mutation.ArticleContentSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldArticleContentSelector,
		})
	}
	if su.mutation.ArticleContentSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldArticleContentSelector,
		})
	}
	if value, ok := su.mutation.MediaFeaturedPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldMediaFeaturedPostSelector,
		})
	}
	if su.mutation.MediaFeaturedPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldMediaFeaturedPostSelector,
		})
	}
	if value, ok := su.mutation.MediaFeaturedPostURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldMediaFeaturedPostURL,
		})
	}
	if su.mutation.MediaFeaturedPostURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: source.FieldMediaFeaturedPostURL,
		})
	}
	if value, ok := su.mutation.MediaCategoryPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldMediaCategoryPostSelector,
		})
	}
	if su.mutation.MediaCategoryPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldMediaCategoryPostSelector,
		})
	}
	if value, ok := su.mutation.MediaCategoryPostURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldMediaCategoryPostURL,
		})
	}
	if su.mutation.MediaCategoryPostURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: source.FieldMediaCategoryPostURL,
		})
	}
	if value, ok := su.mutation.MediaContentSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldMediaContentSelector,
		})
	}
	if su.mutation.MediaContentSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldMediaContentSelector,
		})
	}
	if value, ok := su.mutation.ArticleCategories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldArticleCategories,
		})
	}
	if su.mutation.ArticleCategoriesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldArticleCategories,
		})
	}
	if value, ok := su.mutation.MediaCategories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldMediaCategories,
		})
	}
	if su.mutation.MediaCategoriesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldMediaCategories,
		})
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldDescription,
		})
	}
	if value, ok := su.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldLanguage,
		})
	}
	if value, ok := su.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldCountry,
		})
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: source.FieldStatus,
		})
	}
	if value, ok := su.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldLogo,
		})
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldName,
		})
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldURL,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{source.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SourceUpdateOne is the builder for updating a single Source entity.
type SourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SourceMutation
}

// SetArticleFeaturedPostSelector sets the "article_featured_post_selector" field.
func (suo *SourceUpdateOne) SetArticleFeaturedPostSelector(cps *custom.SourcePostSelector) *SourceUpdateOne {
	suo.mutation.SetArticleFeaturedPostSelector(cps)
	return suo
}

// ClearArticleFeaturedPostSelector clears the value of the "article_featured_post_selector" field.
func (suo *SourceUpdateOne) ClearArticleFeaturedPostSelector() *SourceUpdateOne {
	suo.mutation.ClearArticleFeaturedPostSelector()
	return suo
}

// SetArticleFeaturedPostURL sets the "article_featured_post_url" field.
func (suo *SourceUpdateOne) SetArticleFeaturedPostURL(s string) *SourceUpdateOne {
	suo.mutation.SetArticleFeaturedPostURL(s)
	return suo
}

// SetNillableArticleFeaturedPostURL sets the "article_featured_post_url" field if the given value is not nil.
func (suo *SourceUpdateOne) SetNillableArticleFeaturedPostURL(s *string) *SourceUpdateOne {
	if s != nil {
		suo.SetArticleFeaturedPostURL(*s)
	}
	return suo
}

// ClearArticleFeaturedPostURL clears the value of the "article_featured_post_url" field.
func (suo *SourceUpdateOne) ClearArticleFeaturedPostURL() *SourceUpdateOne {
	suo.mutation.ClearArticleFeaturedPostURL()
	return suo
}

// SetArticleCategoryPostSelector sets the "article_category_post_selector" field.
func (suo *SourceUpdateOne) SetArticleCategoryPostSelector(cps *custom.SourcePostSelector) *SourceUpdateOne {
	suo.mutation.SetArticleCategoryPostSelector(cps)
	return suo
}

// ClearArticleCategoryPostSelector clears the value of the "article_category_post_selector" field.
func (suo *SourceUpdateOne) ClearArticleCategoryPostSelector() *SourceUpdateOne {
	suo.mutation.ClearArticleCategoryPostSelector()
	return suo
}

// SetArticleCategoryPostURL sets the "article_category_post_url" field.
func (suo *SourceUpdateOne) SetArticleCategoryPostURL(s string) *SourceUpdateOne {
	suo.mutation.SetArticleCategoryPostURL(s)
	return suo
}

// SetNillableArticleCategoryPostURL sets the "article_category_post_url" field if the given value is not nil.
func (suo *SourceUpdateOne) SetNillableArticleCategoryPostURL(s *string) *SourceUpdateOne {
	if s != nil {
		suo.SetArticleCategoryPostURL(*s)
	}
	return suo
}

// ClearArticleCategoryPostURL clears the value of the "article_category_post_url" field.
func (suo *SourceUpdateOne) ClearArticleCategoryPostURL() *SourceUpdateOne {
	suo.mutation.ClearArticleCategoryPostURL()
	return suo
}

// SetArticleContentSelector sets the "article_content_selector" field.
func (suo *SourceUpdateOne) SetArticleContentSelector(cps *custom.SourcePostSelector) *SourceUpdateOne {
	suo.mutation.SetArticleContentSelector(cps)
	return suo
}

// ClearArticleContentSelector clears the value of the "article_content_selector" field.
func (suo *SourceUpdateOne) ClearArticleContentSelector() *SourceUpdateOne {
	suo.mutation.ClearArticleContentSelector()
	return suo
}

// SetMediaFeaturedPostSelector sets the "media_featured_post_selector" field.
func (suo *SourceUpdateOne) SetMediaFeaturedPostSelector(cps *custom.SourcePostSelector) *SourceUpdateOne {
	suo.mutation.SetMediaFeaturedPostSelector(cps)
	return suo
}

// ClearMediaFeaturedPostSelector clears the value of the "media_featured_post_selector" field.
func (suo *SourceUpdateOne) ClearMediaFeaturedPostSelector() *SourceUpdateOne {
	suo.mutation.ClearMediaFeaturedPostSelector()
	return suo
}

// SetMediaFeaturedPostURL sets the "media_featured_post_url" field.
func (suo *SourceUpdateOne) SetMediaFeaturedPostURL(s string) *SourceUpdateOne {
	suo.mutation.SetMediaFeaturedPostURL(s)
	return suo
}

// SetNillableMediaFeaturedPostURL sets the "media_featured_post_url" field if the given value is not nil.
func (suo *SourceUpdateOne) SetNillableMediaFeaturedPostURL(s *string) *SourceUpdateOne {
	if s != nil {
		suo.SetMediaFeaturedPostURL(*s)
	}
	return suo
}

// ClearMediaFeaturedPostURL clears the value of the "media_featured_post_url" field.
func (suo *SourceUpdateOne) ClearMediaFeaturedPostURL() *SourceUpdateOne {
	suo.mutation.ClearMediaFeaturedPostURL()
	return suo
}

// SetMediaCategoryPostSelector sets the "media_category_post_selector" field.
func (suo *SourceUpdateOne) SetMediaCategoryPostSelector(cps *custom.SourcePostSelector) *SourceUpdateOne {
	suo.mutation.SetMediaCategoryPostSelector(cps)
	return suo
}

// ClearMediaCategoryPostSelector clears the value of the "media_category_post_selector" field.
func (suo *SourceUpdateOne) ClearMediaCategoryPostSelector() *SourceUpdateOne {
	suo.mutation.ClearMediaCategoryPostSelector()
	return suo
}

// SetMediaCategoryPostURL sets the "media_category_post_url" field.
func (suo *SourceUpdateOne) SetMediaCategoryPostURL(s string) *SourceUpdateOne {
	suo.mutation.SetMediaCategoryPostURL(s)
	return suo
}

// SetNillableMediaCategoryPostURL sets the "media_category_post_url" field if the given value is not nil.
func (suo *SourceUpdateOne) SetNillableMediaCategoryPostURL(s *string) *SourceUpdateOne {
	if s != nil {
		suo.SetMediaCategoryPostURL(*s)
	}
	return suo
}

// ClearMediaCategoryPostURL clears the value of the "media_category_post_url" field.
func (suo *SourceUpdateOne) ClearMediaCategoryPostURL() *SourceUpdateOne {
	suo.mutation.ClearMediaCategoryPostURL()
	return suo
}

// SetMediaContentSelector sets the "media_content_selector" field.
func (suo *SourceUpdateOne) SetMediaContentSelector(cps *custom.SourcePostSelector) *SourceUpdateOne {
	suo.mutation.SetMediaContentSelector(cps)
	return suo
}

// ClearMediaContentSelector clears the value of the "media_content_selector" field.
func (suo *SourceUpdateOne) ClearMediaContentSelector() *SourceUpdateOne {
	suo.mutation.ClearMediaContentSelector()
	return suo
}

// SetArticleCategories sets the "article_categories" field.
func (suo *SourceUpdateOne) SetArticleCategories(m map[string]string) *SourceUpdateOne {
	suo.mutation.SetArticleCategories(m)
	return suo
}

// ClearArticleCategories clears the value of the "article_categories" field.
func (suo *SourceUpdateOne) ClearArticleCategories() *SourceUpdateOne {
	suo.mutation.ClearArticleCategories()
	return suo
}

// SetMediaCategories sets the "media_categories" field.
func (suo *SourceUpdateOne) SetMediaCategories(m map[string]string) *SourceUpdateOne {
	suo.mutation.SetMediaCategories(m)
	return suo
}

// ClearMediaCategories clears the value of the "media_categories" field.
func (suo *SourceUpdateOne) ClearMediaCategories() *SourceUpdateOne {
	suo.mutation.ClearMediaCategories()
	return suo
}

// SetDescription sets the "description" field.
func (suo *SourceUpdateOne) SetDescription(s string) *SourceUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetLanguage sets the "language" field.
func (suo *SourceUpdateOne) SetLanguage(s string) *SourceUpdateOne {
	suo.mutation.SetLanguage(s)
	return suo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (suo *SourceUpdateOne) SetNillableLanguage(s *string) *SourceUpdateOne {
	if s != nil {
		suo.SetLanguage(*s)
	}
	return suo
}

// SetCountry sets the "country" field.
func (suo *SourceUpdateOne) SetCountry(s string) *SourceUpdateOne {
	suo.mutation.SetCountry(s)
	return suo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (suo *SourceUpdateOne) SetNillableCountry(s *string) *SourceUpdateOne {
	if s != nil {
		suo.SetCountry(*s)
	}
	return suo
}

// SetStatus sets the "status" field.
func (suo *SourceUpdateOne) SetStatus(b bool) *SourceUpdateOne {
	suo.mutation.SetStatus(b)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SourceUpdateOne) SetNillableStatus(b *bool) *SourceUpdateOne {
	if b != nil {
		suo.SetStatus(*b)
	}
	return suo
}

// SetLogo sets the "logo" field.
func (suo *SourceUpdateOne) SetLogo(s string) *SourceUpdateOne {
	suo.mutation.SetLogo(s)
	return suo
}

// SetName sets the "name" field.
func (suo *SourceUpdateOne) SetName(s string) *SourceUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetURL sets the "url" field.
func (suo *SourceUpdateOne) SetURL(s string) *SourceUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// Mutation returns the SourceMutation object of the builder.
func (suo *SourceUpdateOne) Mutation() *SourceMutation {
	return suo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SourceUpdateOne) Select(field string, fields ...string) *SourceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Source entity.
func (suo *SourceUpdateOne) Save(ctx context.Context) (*Source, error) {
	var (
		err  error
		node *Source
	)
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("storage: uninitialized hook (forgotten import storage/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SourceUpdateOne) SaveX(ctx context.Context) *Source {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SourceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SourceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SourceUpdateOne) check() error {
	if v, ok := suo.mutation.Description(); ok {
		if err := source.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`storage: validator failed for field "Source.description": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Logo(); ok {
		if err := source.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`storage: validator failed for field "Source.logo": %w`, err)}
		}
	}
	return nil
}

func (suo *SourceUpdateOne) sqlSave(ctx context.Context) (_node *Source, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   source.Table,
			Columns: source.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: source.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`storage: missing "Source.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, source.FieldID)
		for _, f := range fields {
			if !source.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("storage: invalid field %q for query", f)}
			}
			if f != source.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.ArticleFeaturedPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldArticleFeaturedPostSelector,
		})
	}
	if suo.mutation.ArticleFeaturedPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldArticleFeaturedPostSelector,
		})
	}
	if value, ok := suo.mutation.ArticleFeaturedPostURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldArticleFeaturedPostURL,
		})
	}
	if suo.mutation.ArticleFeaturedPostURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: source.FieldArticleFeaturedPostURL,
		})
	}
	if value, ok := suo.mutation.ArticleCategoryPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldArticleCategoryPostSelector,
		})
	}
	if suo.mutation.ArticleCategoryPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldArticleCategoryPostSelector,
		})
	}
	if value, ok := suo.mutation.ArticleCategoryPostURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldArticleCategoryPostURL,
		})
	}
	if suo.mutation.ArticleCategoryPostURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: source.FieldArticleCategoryPostURL,
		})
	}
	if value, ok := suo.mutation.ArticleContentSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldArticleContentSelector,
		})
	}
	if suo.mutation.ArticleContentSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldArticleContentSelector,
		})
	}
	if value, ok := suo.mutation.MediaFeaturedPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldMediaFeaturedPostSelector,
		})
	}
	if suo.mutation.MediaFeaturedPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldMediaFeaturedPostSelector,
		})
	}
	if value, ok := suo.mutation.MediaFeaturedPostURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldMediaFeaturedPostURL,
		})
	}
	if suo.mutation.MediaFeaturedPostURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: source.FieldMediaFeaturedPostURL,
		})
	}
	if value, ok := suo.mutation.MediaCategoryPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldMediaCategoryPostSelector,
		})
	}
	if suo.mutation.MediaCategoryPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldMediaCategoryPostSelector,
		})
	}
	if value, ok := suo.mutation.MediaCategoryPostURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldMediaCategoryPostURL,
		})
	}
	if suo.mutation.MediaCategoryPostURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: source.FieldMediaCategoryPostURL,
		})
	}
	if value, ok := suo.mutation.MediaContentSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldMediaContentSelector,
		})
	}
	if suo.mutation.MediaContentSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldMediaContentSelector,
		})
	}
	if value, ok := suo.mutation.ArticleCategories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldArticleCategories,
		})
	}
	if suo.mutation.ArticleCategoriesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldArticleCategories,
		})
	}
	if value, ok := suo.mutation.MediaCategories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: source.FieldMediaCategories,
		})
	}
	if suo.mutation.MediaCategoriesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: source.FieldMediaCategories,
		})
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldDescription,
		})
	}
	if value, ok := suo.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldLanguage,
		})
	}
	if value, ok := suo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldCountry,
		})
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: source.FieldStatus,
		})
	}
	if value, ok := suo.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldLogo,
		})
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldName,
		})
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldURL,
		})
	}
	_node = &Source{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{source.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
